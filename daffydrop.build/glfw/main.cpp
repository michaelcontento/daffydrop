
#include "main.h"

//${CONFIG_BEGIN}
#define CFG_ANDROID_APP_LABEL DaffyDrop
#define CFG_ANDROID_APP_PACKAGE com.coragames.daffydrop
#define CFG_ANDROID_NATIVE_GL_ENABLED true
#define CFG_CONFIG debug
#define CFG_CPP_INCREMENTAL_GC 1
#define CFG_GLFW_WINDOW_FULLSCREEN false
#define CFG_GLFW_WINDOW_HEIGHT 960
#define CFG_GLFW_WINDOW_RESIZABLE false
#define CFG_GLFW_WINDOW_TITLE "Monkey Game"
#define CFG_GLFW_WINDOW_WIDTH 640
#define CFG_HOST macos
#define CFG_IMAGE_FILES *.png|*.jpg
#define CFG_IOS_ACCELEROMETER_ENABLED false
#define CFG_IOS_DISPLAY_LINK_ENABLED true
#define CFG_IOS_RETINA_ENABLED true
#define CFG_LANG cpp
#define CFG_MOJO_AUTO_SUSPEND_ENABLED false
#define CFG_MOJO_IMAGE_FILTERING_ENABLED true
#define CFG_MUSIC_FILES *.wav
#define CFG_OPENGL_DEPTH_BUFFER_ENABLED false
#define CFG_OPENGL_GLES20_ENABLED false
#define CFG_PARSER_FUNC_ATTRS 0
#define CFG_SOUND_FILES *.wav
#define CFG_TARGET glfw
#define CFG_TEXT_FILES *.txt|*.xml|*.json
//${CONFIG_END}

//For monkey main to set...
int (*runner)();

//${TRANSCODE_BEGIN}

// C++ Monkey runtime.
//
// Placed into the public domain 24/02/2011.
// No warranty implied; use at your own risk.

//***** Monkey Types *****

typedef wchar_t Char;
template<class T> class Array;
class String;
class Object;

#if CFG_CPP_DOUBLE_PRECISION_FLOATS
typedef double Float;
#define FLOAT(X) X
#else
typedef float Float;
#define FLOAT(X) X##f
#endif

void dbg_error( const char *p );

//***** GC Config *****

#if CFG_CPP_DEBUG_GC
#define DEBUG_GC 1
#if __APPLE__
#define DEBUG_GC_MAC 1
#elif defined( __glfw_h_ )
#define DEBUG_GC_GLFW 1
#else
#undef DEBUG_GC
#endif
#endif

// ***** GC *****

#if DEBUG_GC_MAC
#include <mach/mach_time.h>
int gcMicros(){
	static uint64_t startTime;
	static mach_timebase_info_data_t timeInfo;
	if( !startTime ){
		startTime=mach_absolute_time();
		mach_timebase_info( &timeInfo );
	}
	uint64_t nanos=mach_absolute_time()-startTime;
	nanos*=timeInfo.numer;
	nanos/=timeInfo.denom;
	return nanos/1000L;
}
#endif

#if DEBUG_GC_GLFW
int gcMicros(){
	return glfwGetTime()*1000000;
}
#endif

struct gc_object;

gc_object *gc_malloc( int size );
void gc_free( gc_object *p );

struct gc_object{
	gc_object *succ;
	int flags;
	
	virtual ~gc_object(){
	}
	
	virtual void mark(){
	}
	
	void *operator new( size_t size ){
		return gc_malloc( size );
	}
	
	void operator delete( void *p ){
		gc_free( (gc_object*)p );
	}
};

//alloced objs
gc_object *gc_objs;

//fast alloc cache
gc_object *gc_cache[8];

//objects allocated
int gc_total;

//objects marked
int gc_marked;

//is object marked flag
int gc_markbit=1;	//toggles 1,2,1,2...

//how much mem alloced
int gc_alloced;
int gc_maxalloced;

//queue of objects to mark
std::vector<gc_object*> gc_mark_queue;

//generated by translator
void gc_mark();
#define gc_mark_roots gc_mark

//void gc_mark_roots();

gc_object *gc_malloc( int size ){
	size=(size+7)&~7;
	
	gc_object *p;
	if( size<64 ){
		if( (p=gc_cache[size>>3]) ){
			gc_cache[size>>3]=p->succ;
		}else{
			p=(gc_object*)malloc( size );
		}
	}else{
		p=(gc_object*)malloc( size );
	}
	
	p->flags=size | (gc_markbit^3);
	p->succ=gc_objs;
	gc_objs=p;

	++gc_total;
	
	gc_alloced+=size;
	if( gc_alloced>gc_maxalloced ) gc_maxalloced=gc_alloced;
	
	return p;
}

void gc_free( gc_object *p ){
	int size=p->flags & ~7;
	if( size<64 ){
		p->succ=gc_cache[size>>3];
		gc_cache[size>>3]=p;
	}else{
		free( p );
	}
	--gc_total;
	gc_alloced-=size;
}

template<class T> void gc_mark( T *t ){

	gc_object *p=dynamic_cast<gc_object*>(t);
	
	if( !p || (p->flags & gc_markbit) ) return;

	p->flags^=3;
	++gc_marked;
	p->mark();
}

template<class T> void gc_mark_q( T *t ){

	gc_object *p=dynamic_cast<gc_object*>(t);
	
	if( !p || (p->flags & gc_markbit) ) return;

	p->flags^=3;
	++gc_marked;
	gc_mark_queue.push_back( p );
}

#if CFG_CPP_INCREMENTAL_GC

template<class T,class V> void gc_assign( T *&lhs,V *rhs ){

	gc_object *p=dynamic_cast<gc_object*>(rhs);

	if( p && !(p->flags & gc_markbit) ){
		p->flags^=3;
		++gc_marked;
		gc_mark_queue.push_back( p );
	}
	lhs=rhs;
}

void gc_collect(){

#if DEBUG_GC
	int us=gcMicros();
#endif

	static int maxalloced;

	int swept=0,c=0;
	
	if( gc_maxalloced>maxalloced ){
		maxalloced=gc_maxalloced;
		c=gc_total;
	}else{
		c=gc_total/10;
	}
	
	int term=gc_marked+c;
	
	while( gc_marked<term ){
	
		if( gc_mark_queue.empty() ){
		
			gc_object **q=&gc_objs;
			
			swept=gc_total;
			
			while( gc_marked!=gc_total ){
				gc_object *p=*q;
				
				while( (p->flags & gc_markbit) ){
					q=&p->succ;
					p=*q;
				}

				*q=p->succ;
				delete p;
			}
			
			swept-=gc_total;
			
			gc_marked=0;

			gc_markbit^=3;
	
			gc_mark_roots();
			
			break;
		}
		
		gc_object *p=gc_mark_queue.back();
		gc_mark_queue.pop_back();
		p->mark();
	}

#if DEBUG_GC
	us=gcMicros()-us;
	printf( "us=%i, swept=%i, objects=%i, memalloced=%i, maxalloced=%i\n",us,swept,gc_total,gc_alloced,gc_maxalloced );
	fflush( stdout );
#endif
}

#else

#define gc_assign( X,Y ) X=Y

void gc_collect(){

#if DEBUG_GC
	int us=gcMicros();
#endif
	
	//mark...

	gc_mark_roots();
	
	while( !gc_mark_queue.empty() ){
		gc_object *p=gc_mark_queue.back();
		gc_mark_queue.pop_back();
		p->mark();
	}
	
	//sweep...
	
	gc_object **q=&gc_objs;
	
	int swept=gc_total;

	while( gc_marked!=gc_total ){
		gc_object *p=*q;
		
		while( (p->flags & gc_markbit) ){
			q=&p->succ;
			p=*q;
		}
		
		*q=p->succ;
		delete p;
	}
	
	swept-=gc_total;
	
	gc_marked=0;
	
	gc_markbit^=3;

#if DEBUG_GC
	us=gcMicros()-us;
	printf( "us=%i, swept=%i, objects=%i, memalloced=%i, maxalloced=%i\n",us,swept,gc_total,gc_alloced,gc_maxalloced );fflush( stdout );
#endif
}

#endif

// ***** Array *****

template<class T> T *t_memcpy( T *dst,const T *src,int n ){
	memcpy( dst,src,n*sizeof(T) );
	return dst+n;
}

template<class T> T *t_memset( T *dst,int val,int n ){
	memset( dst,val,n*sizeof(T) );
	return dst+n;
}

template<class T> int t_memcmp( const T *x,const T *y,int n ){
	return memcmp( x,y,n*sizeof(T) );
}

template<class T> int t_strlen( const T *p ){
	const T *q=p++;
	while( *q++ ){}
	return q-p;
}

template<class T> T *t_create( int n,T *p ){
	t_memset( p,0,n );
	return p+n;
}

template<class T> T *t_create( int n,T *p,const T *q ){
	t_memcpy( p,q,n );
	return p+n;
}

template<class T> void t_destroy( int n,T *p ){
}

//for int, float etc arrays...needs to go before Array<> decl to shut xcode 4.0.2 up.
template<class T> void gc_mark_array( int n,T *p ){
}

template<class T> class Array{
public:
	Array():rep( Rep::alloc(0) ){
	}

	//Use default...
//	Array( const Array<T> &t )...
	
	Array( int length ):rep( Rep::alloc( length ) ){
		t_create( rep->length,rep->data );
	}
	
	Array( const T *p,int length ):rep( Rep::alloc(length) ){
		t_create( rep->length,rep->data,p );
	}
	
	~Array(){
	}

	//Use default...
//	Array &operator=( const Array &t )...
	
	int Length()const{ 
		return rep->length; 
	}
	
	T &At( int index ){
		if( index<0 || index>=rep->length ) dbg_error( "Array index out of range" );
		return rep->data[index]; 
	}
	
	const T &At( int index )const{
		if( index<0 || index>=rep->length ) dbg_error( "Array index out of range" );
		return rep->data[index]; 
	}
	
	T &operator[]( int index ){
		return rep->data[index]; 
	}

	const T &operator[]( int index )const{
		return rep->data[index]; 
	}
	
	Array Slice( int from,int term )const{
		int len=rep->length;
		if( from<0 ){ 
			from+=len;
			if( from<0 ) from=0;
		}else if( from>len ){
			from=len;
		}
		if( term<0 ){
			term+=len;
		}else if( term>len ){
			term=len;
		}
		if( term<=from ) return Array();
		return Array( rep->data+from,term-from );
	}

	Array Slice( int from )const{
		return Slice( from,rep->length );
	}
	
	Array Resize( int newlen )const{
		if( newlen<=0 ) return Array();
		int n=rep->length;
		if( newlen<n ) n=newlen;
		Rep *p=Rep::alloc( newlen );
		T *q=p->data;
		q=t_create( n,q,rep->data );
		q=t_create( (newlen-n),q );
		return Array( p );
	}

private:
	struct Rep : public gc_object{
		int length;
		T data[0];
		
		Rep():length(0){
			flags=3;
		}
		
		Rep( int length ):length(length){
		}
		
		~Rep(){
			t_destroy( length,data );
		}
		
		void mark(){
			gc_mark_array( length,data );
		}
		
		static Rep *alloc( int length ){
			if( !length ){
				static Rep null;
				return &null;
			}
			void *p=gc_malloc( sizeof(Rep)+length*sizeof(T) );
			return ::new(p) Rep( length );
		}
	};
	Rep *rep;

	template<class C> friend void gc_mark( Array<C> &t );
	template<class C> friend void gc_mark_q( Array<C> &t );

#if CFG_CPP_INCREMENTAL_GC

	template<class C> friend void gc_assign( Array<C> &lhs,Array<C> rhs );
	
#endif

	Array( Rep *rep ):rep(rep){
	}
};

template<class T> void gc_mark( Array<T> &t ){
	gc_mark( t.rep );
}

template<class T> void gc_mark_q( Array<T> &t ){
	gc_mark_q( t.rep );
}

//for object arrays....
template<class T> void gc_mark_array( int n,T **p ){
	for( int i=0;i<n;++i ) gc_mark( p[i] );
}

//for array arrays...
template<class T> void gc_mark_array( int n,Array<T> *p ){
	for( int i=0;i<n;++i ) gc_mark( p[i] );
}

#if CFG_CPP_INCREMENTAL_GC

template<class T> void gc_assign( Array<T> &lhs,Array<T> rhs ){
	gc_mark( rhs.rep );
	lhs=rhs;
}

#endif
		
// ***** String *****

class String{
public:
	String():rep( Rep::alloc(0) ){
	}
	
	String( const String &t ):rep( t.rep ){
		rep->retain();
	}

	String( int n ){
		char buf[256];
		sprintf( buf,"%i",n );
		rep=Rep::alloc( t_strlen(buf) );
		for( int i=0;i<rep->length;++i ) rep->data[i]=buf[i];
	}
	
	String( Float n ){
		char buf[256];
		
		//would rather use snprintf, but it's doing weird things in MingW.
		//
		sprintf( buf,"%.17lg",n );
		//
		char *p;
		for( p=buf;*p;++p ){
			if( *p=='.' || *p=='e' ) break;
		}
		if( !*p ){
			*p++='.';
			*p++='0';
			*p=0;
		}

		rep=Rep::alloc( t_strlen(buf) );
		for( int i=0;i<rep->length;++i ) rep->data[i]=buf[i];
	}

	String( Char ch,int length ):rep( Rep::alloc(length) ){
		for( int i=0;i<length;++i ) rep->data[i]=ch;
	}

	String( const Char *p ):rep( Rep::alloc(t_strlen(p)) ){
		t_memcpy( rep->data,p,rep->length );
	}

	String( const Char *p,int length ):rep( Rep::alloc(length) ){
		t_memcpy( rep->data,p,rep->length );
	}
	
#if __OBJC__	
	String( NSString *nsstr ):rep( Rep::alloc([nsstr length]) ){
		unichar *buf=(unichar*)malloc( rep->length * sizeof(unichar) );
		[nsstr getCharacters:buf range:NSMakeRange(0,rep->length)];
		for( int i=0;i<rep->length;++i ) rep->data[i]=buf[i];
		free( buf );
	}
#endif

	~String(){
		rep->release();
	}
	
	template<class C> String( const C *p ):rep( Rep::alloc(t_strlen(p)) ){
		for( int i=0;i<rep->length;++i ) rep->data[i]=p[i];
	}
	
	template<class C> String( const C *p,int length ):rep( Rep::alloc(length) ){
		for( int i=0;i<rep->length;++i ) rep->data[i]=p[i];
	}
	
	int Length()const{
		return rep->length;
	}
	
	const Char *Data()const{
		return rep->data;
	}
	
	Char operator[]( int index )const{
		return rep->data[index];
	}
	
	String &operator=( const String &t ){
		t.rep->retain();
		rep->release();
		rep=t.rep;
		return *this;
	}
	
	String &operator+=( const String &t ){
		return operator=( *this+t );
	}
	
	int Compare( const String &t )const{
		int n=rep->length<t.rep->length ? rep->length : t.rep->length;
		for( int i=0;i<n;++i ){
			if( int q=(int)(rep->data[i])-(int)(t.rep->data[i]) ) return q;
		}
		return rep->length-t.rep->length;
	}
	
	bool operator==( const String &t )const{
		return rep->length==t.rep->length && t_memcmp( rep->data,t.rep->data,rep->length )==0;
	}
	
	bool operator!=( const String &t )const{
		return rep->length!=t.rep->length || t_memcmp( rep->data,t.rep->data,rep->length )!=0;
	}
	
	bool operator<( const String &t )const{
		return Compare( t )<0;
	}
	
	bool operator<=( const String &t )const{
		return Compare( t )<=0;
	}
	
	bool operator>( const String &t )const{
		return Compare( t )>0;
	}
	
	bool operator>=( const String &t )const{
		return Compare( t )>=0;
	}
	
	String operator+( const String &t )const{
		if( !rep->length ) return t;
		if( !t.rep->length ) return *this;
		Rep *p=Rep::alloc( rep->length+t.rep->length );
		Char *q=p->data;
		q=t_memcpy( q,rep->data,rep->length );
		q=t_memcpy( q,t.rep->data,t.rep->length );
		return String( p );
	}
	
	int Find( String find,int start=0 )const{
		if( start<0 ) start=0;
		while( start+find.rep->length<=rep->length ){
			if( !t_memcmp( rep->data+start,find.rep->data,find.rep->length ) ) return start;
			++start;
		}
		return -1;
	}
	
	int FindLast( String find )const{
		int start=rep->length-find.rep->length;
		while( start>=0 ){
			if( !t_memcmp( rep->data+start,find.rep->data,find.rep->length ) ) return start;
			--start;
		}
		return -1;
	}
	
	int FindLast( String find,int start )const{
		if( start>rep->length-find.rep->length ) start=rep->length-find.rep->length;
		while( start>=0 ){
			if( !t_memcmp( rep->data+start,find.rep->data,find.rep->length ) ) return start;
			--start;
		}
		return -1;
	}
	
	String Trim()const{
		int i=0,i2=rep->length;
		while( i<i2 && rep->data[i]<=32 ) ++i;
		while( i2>i && rep->data[i2-1]<=32 ) --i2;
		if( i==0 && i2==rep->length ) return *this;
		return String( rep->data+i,i2-i );
	}

	Array<String> Split( String sep )const{
	
		if( !sep.rep->length ){
			Array<String> bits( rep->length );
			for( int i=0;i<rep->length;++i ){
				bits[i]=String( (Char)(*this)[i],1 );
			}
			return bits;
		}
		
		int i=0,i2,n=1;
		while( (i2=Find( sep,i ))!=-1 ){
			++n;
			i=i2+sep.rep->length;
		}
		Array<String> bits( n );
		if( n==1 ){
			bits[0]=*this;
			return bits;
		}
		i=0;n=0;
		while( (i2=Find( sep,i ))!=-1 ){
			bits[n++]=Slice( i,i2 );
			i=i2+sep.rep->length;
		}
		bits[n]=Slice( i );
		return bits;
	}

	String Join( Array<String> bits )const{
		if( bits.Length()==0 ) return String();
		if( bits.Length()==1 ) return bits[0];
		int newlen=rep->length * (bits.Length()-1);
		for( int i=0;i<bits.Length();++i ){
			newlen+=bits[i].rep->length;
		}
		Rep *p=Rep::alloc( newlen );
		Char *q=p->data;
		q=t_memcpy( q,bits[0].rep->data,bits[0].rep->length );
		for( int i=1;i<bits.Length();++i ){
			q=t_memcpy( q,rep->data,rep->length );
			q=t_memcpy( q,bits[i].rep->data,bits[i].rep->length );
		}
		return String( p );
	}

	String Replace( String find,String repl )const{
		int i=0,i2,newlen=0;
		while( (i2=Find( find,i ))!=-1 ){
			newlen+=(i2-i)+repl.rep->length;
			i=i2+find.rep->length;
		}
		if( !i ) return *this;
		newlen+=rep->length-i;
		Rep *p=Rep::alloc( newlen );
		Char *q=p->data;
		i=0;
		while( (i2=Find( find,i ))!=-1 ){
			q=t_memcpy( q,rep->data+i,i2-i );
			q=t_memcpy( q,repl.rep->data,repl.rep->length );
			i=i2+find.rep->length;
		}
		q=t_memcpy( q,rep->data+i,rep->length-i );
		return String( p );
	}

	String ToLower()const{
		for( int i=0;i<rep->length;++i ){
			Char t=tolower( rep->data[i] );
			if( t==rep->data[i] ) continue;
			Rep *p=Rep::alloc( rep->length );
			Char *q=p->data;
			t_memcpy( q,rep->data,i );
			for( q[i++]=t;i<rep->length;++i ){
				q[i]=tolower( rep->data[i] );
			}
			return String( p );
		}
		return *this;
	}

	String ToUpper()const{
		for( int i=0;i<rep->length;++i ){
			Char t=toupper( rep->data[i] );
			if( t==rep->data[i] ) continue;
			Rep *p=Rep::alloc( rep->length );
			Char *q=p->data;
			t_memcpy( q,rep->data,i );
			for( q[i++]=t;i<rep->length;++i ){
				q[i]=toupper( rep->data[i] );
			}
			return String( p );
		}
		return *this;
	}
	
	bool Contains( String sub )const{
		return Find( sub )!=-1;
	}

	bool StartsWith( String sub )const{
		return sub.rep->length<=rep->length && !t_memcmp( rep->data,sub.rep->data,sub.rep->length );
	}

	bool EndsWith( String sub )const{
		return sub.rep->length<=rep->length && !t_memcmp( rep->data+rep->length-sub.rep->length,sub.rep->data,sub.rep->length );
	}
	
	String Slice( int from,int term )const{
		int len=rep->length;
		if( from<0 ){
			from+=len;
			if( from<0 ) from=0;
		}else if( from>len ){
			from=len;
		}
		if( term<0 ){
			term+=len;
		}else if( term>len ){
			term=len;
		}
		if( term<from ) return String();
		if( from==0 && term==len ) return *this;
		return String( rep->data+from,term-from );
	}

	String Slice( int from )const{
		return Slice( from,rep->length );
	}
	
	int ToInt()const{
		return atoi( ToCString<char>() );
	}
	
	Float ToFloat()const{
		return atof( ToCString<char>() );
	}
	
	template<class C> C *ToCString()const{

		C *p=&Array<C>( rep->length+1 )[0];
		
		for( int i=0;i<rep->length;++i ) p[i]=rep->data[i];
		p[rep->length]=0;
		return p;
	}

#if __OBJC__	
	NSString *ToNSString()const{
		return [NSString stringWithCharacters:ToCString<unichar>() length:rep->length];
	}
#endif

	bool Save( FILE *fp ){
		std::vector<unsigned char> buf;
		Save( buf );
		return buf.size() ? fwrite( &buf[0],1,buf.size(),fp )==buf.size() : true;
	}
	
	void Save( std::vector<unsigned char> &buf ){
	
		bool uni=false;
		
		for( int i=0;i<rep->length;++i ){
			if( rep->data[i]>=0xfe ){
				uni=true;
				break;
			}
		}
		
		if( uni ){
			Char c;
			unsigned char *p=(unsigned char*)&c;
			c=0xfeff;
			buf.push_back( p[0] );
			buf.push_back( p[1] );
			for( int i=0;i<rep->length;++i ){
				c=rep->data[i];
				buf.push_back( p[0] );
				buf.push_back( p[1] );
			}
		}else{
			for( int i=0;i<rep->length;++i ){
				buf.push_back( rep->data[i] );
			}
		}
	}
	
	static String FromChars( Array<int> chars ){
		int n=chars.Length();
		Rep *p=Rep::alloc( n );
		for( int i=0;i<n;++i ){
			p->data[i]=chars[i];
		}
		return String( p );
	}

	static String Load( FILE *fp ){
		unsigned char tmp[4096];
		std::vector<unsigned char> buf;
		for(;;){
			int n=fread( tmp,1,4096,fp );
			if( n>0 ) buf.insert( buf.end(),tmp,tmp+n );
			if( n!=4096 ) break;
		}
		return buf.size() ? String::Load( &buf[0],buf.size() ) : "";
	}
	
	static String Load( unsigned char *p,int n ){
	
		if( n<3 ) return String( p,n );
		
		unsigned char *term=p+n;
		std::vector<Char> chars;

		int c=*p++;
		int d=*p++;
		
		if( c==0xfe && d==0xff ){
			while( p<term-1 ){
				int c=*p++;
				chars.push_back( (c<<8)|*p++ );
			}
		}else if( c==0xff && d==0xfe ){
			while( p<term-1 ){
				int c=*p++;
				chars.push_back( (*p++<<8)|c );
			}
		}else{
			int e=*p++;
			if( c!=0xef || d!=0xbb || e!=0xbf ) return String( p-3,n );
			while( p<term ){
				int c=*p++;
				if( c>=128 && p<term ){
					int d=*p++;
					if( c>=224 && p<term ){
						int e=*p++;
						if( c>=240 ) break;	//Illegal UTF8!
						c=(c-224)*4096+(d-128)*64+(e-128);
					}else{
						c=(c-192)*64+(d-128);
					}
				}
				chars.push_back( c );
			}
		}
		return String( &chars[0],chars.size() );
	}
	
private:
	struct Rep{
		int refs;
		int length;
		Char data[0];
		
		Rep( int length ):refs(1),length(length){
		}
		
		void retain(){
			++refs;
		}
		
		void release(){
			if( --refs || !length ) return;
			free( this );
		}

		static Rep *alloc( int length ){
			if( !length ){
				static Rep null(0);
				return &null;
			}
			void *p=malloc( sizeof(Rep)+length*sizeof(Char) );
			return new(p) Rep( length );
		}
	};
	Rep *rep;
	
	String( Rep *rep ):rep(rep){
	}
};

String *t_create( int n,String *p ){
	for( int i=0;i<n;++i ) new( &p[i] ) String();
	return p+n;
}

String *t_create( int n,String *p,const String *q ){
	for( int i=0;i<n;++i ) new( &p[i] ) String( q[i] );
	return p+n;
}

void t_destroy( int n,String *p ){
	for( int i=0;i<n;++i ) p[i].~String();
}

String T( const char *p ){
	return String( p );
}

String T( const wchar_t *p ){
	return String( p );
}

// ***** Object *****

class Object : public gc_object{
public:
	virtual bool Equals( Object *obj ){
		return this==obj;
	}
	
	virtual int Compare( Object *obj ){
		return (char*)this-(char*)obj;
	}
	
	virtual String debug(){
		return "+Object\n";
	}
};

class ThrowableObject : public Object{
};

struct gc_interface{
	virtual ~gc_interface(){}
};


//***** Debugger *****

int Print( String t );

#define dbg_stream stderr

#if _MSC_VER
#define dbg_typeof decltype
#else
#define dbg_typeof __typeof__
#endif 

struct dbg_func;
struct dbg_var_type;

static int dbg_suspend;
static int dbg_stepmode;

const char *dbg_info;
String dbg_exstack;

static void *dbg_var_buf[65536*3];
static void **dbg_var_ptr=dbg_var_buf;

static dbg_func *dbg_func_buf[1024];
static dbg_func **dbg_func_ptr=dbg_func_buf;

String dbg_type( bool *p ){
	return "Bool";
}

String dbg_type( int *p ){
	return "Int";
}

String dbg_type( Float *p ){
	return "Float";
}

String dbg_type( String *p ){
	return "String";
}

template<class T> String dbg_type( T *p ){
	return "Object";
}

template<class T> String dbg_type( Array<T> *p ){
	return dbg_type( &(*p)[0] )+"[]";
}

String dbg_value( bool *p ){
	return *p ? "True" : "False";
}

String dbg_value( int *p ){
	return String( *p );
}

String dbg_value( Float *p ){
	return String( *p );
}

String dbg_value( String *p ){
	return String( "\"" )+(*p).Replace( "\"","~q" )+String( "\"" );
}

template<class T> String dbg_value( T *t ){
	Object *p=dynamic_cast<Object*>( *t );
	char buf[64];
	sprintf( buf,"%p",p );
	return String("@") + (buf[0]=='0' && buf[1]=='x' ? buf+2 : buf );
}

template<class T> String dbg_value( Array<T> *p ){
	String t="[";
	int n=(*p).Length();
	for( int i=0;i<n;++i ){
		if( i ) t+=",";
		t+=dbg_value( &(*p)[i] );
	}
	return t+"]";
}

template<class T> String dbg_decl( const char *id,T *ptr ){
	return String( id )+":"+dbg_type(ptr)+"="+dbg_value(ptr)+"\n";
}

struct dbg_var_type{
	virtual String type( void *p )=0;
	virtual String value( void *p )=0;
};

template<class T> struct dbg_var_type_t : public dbg_var_type{

	String type( void *p ){
		return dbg_type( (T*)p );
	}
	
	String value( void *p ){
		return dbg_value( (T*)p );
	}
	
	static dbg_var_type_t<T> info;
};
template<class T> dbg_var_type_t<T> dbg_var_type_t<T>::info;

struct dbg_blk{
	void **var_ptr;
	
	dbg_blk():var_ptr(dbg_var_ptr){
		if( dbg_stepmode=='l' ) --dbg_suspend;
	}
	
	~dbg_blk(){
		if( dbg_stepmode=='l' ) ++dbg_suspend;
		dbg_var_ptr=var_ptr;
	}
};

struct dbg_func : public dbg_blk{
	const char *id;
	const char *info;

	dbg_func( const char *p ):id(p),info(dbg_info){
		*dbg_func_ptr++=this;
		if( dbg_stepmode=='s' ) --dbg_suspend;
	}
	
	~dbg_func(){
		if( dbg_stepmode=='s' ) ++dbg_suspend;
		--dbg_func_ptr;
		dbg_info=info;
	}
};

int dbg_print( String t ){
	static char *buf;
	static int len;
	int n=t.Length();
	if( n+100>len ){
		len=n+100;
		free( buf );
		buf=(char*)malloc( len );
	}
	buf[n]='\n';
	for( int i=0;i<n;++i ) buf[i]=t[i];
	fwrite( buf,n+1,1,dbg_stream );
	fflush( dbg_stream );
	return 0;
}

void dbg_callstack(){

	void **var_ptr=dbg_var_buf;
	dbg_func **func_ptr=dbg_func_buf;
	
	while( var_ptr!=dbg_var_ptr ){
		while( func_ptr!=dbg_func_ptr && var_ptr==(*func_ptr)->var_ptr ){
			const char *id=(*func_ptr++)->id;
			const char *info=func_ptr!=dbg_func_ptr ? (*func_ptr)->info : dbg_info;
			fprintf( dbg_stream,"+%s;%s\n",id,info );
		}
		void *vp=*var_ptr++;
		const char *nm=(const char*)*var_ptr++;
		dbg_var_type *ty=(dbg_var_type*)*var_ptr++;
		dbg_print( String(nm)+":"+ty->type(vp)+"="+ty->value(vp) );
	}
	while( func_ptr!=dbg_func_ptr ){
		const char *id=(*func_ptr++)->id;
		const char *info=func_ptr!=dbg_func_ptr ? (*func_ptr)->info : dbg_info;
		fprintf( dbg_stream,"+%s;%s\n",id,info );
	}
}

String dbg_stacktrace(){
	if( !dbg_info || !dbg_info[0] ) return "";
	String str=String( dbg_info )+"\n";
	dbg_func **func_ptr=dbg_func_ptr;
	if( func_ptr==dbg_func_buf ) return str;
	while( --func_ptr!=dbg_func_buf ){
		str+=String( (*func_ptr)->info )+"\n";
	}
	return str;
}

void dbg_throw( const char *err ){
	dbg_exstack=dbg_stacktrace();
	throw err;
}

void dbg_stop(){

#ifdef TARGET_OS_IPHONE
	dbg_throw( "STOP" );
#endif

	fprintf( dbg_stream,"{{~~%s~~}}\n",dbg_info );
	dbg_callstack();
	dbg_print( "" );
	
	for(;;){

		char buf[256];
		char *e=fgets( buf,256,stdin );
		if( !e ) exit( -1 );
		
		e=strchr( buf,'\n' );
		if( !e ) exit( -1 );
		
		*e=0;
		
		Object *p;
		
		switch( buf[0] ){
		case '?':
			break;
		case 'r':	//run
			dbg_suspend=0;		
			dbg_stepmode=0;
			return;
		case 's':	//step
			dbg_suspend=1;
			dbg_stepmode='s';
			return;
		case 'e':	//enter func
			dbg_suspend=1;
			dbg_stepmode='e';
			return;
		case 'l':	//leave block
			dbg_suspend=0;
			dbg_stepmode='l';
			return;
		case '@':	//dump object
			p=0;
			sscanf( buf+1,"%p",&p );
			if( p ){
				dbg_print( p->debug() );
			}else{
				dbg_print( "" );
			}
			break;
		case 'q':	//quit!
			exit( 0 );
			break;			
		default:
			printf( "????? %s ?????",buf );fflush( stdout );
			exit( -1 );
		}
	}
}

void dbg_error( const char *err ){

#ifdef TARGET_OS_IPHONE
	dbg_throw( err );
#endif

	for(;;){
		Print( String("Monkey Runtime Error : ")+err );
		Print( dbg_stacktrace() );
		dbg_stop();
	}
}

#define DBG_INFO(X) dbg_info=(X);if( dbg_suspend>0 ) dbg_stop();

#define DBG_ENTER(P) dbg_func _dbg_func(P);

#define DBG_BLOCK(T) dbg_blk _dbg_blk;

#define DBG_GLOBAL( ID,NAME )	//TODO!

#define DBG_LOCAL( ID,NAME )\
*dbg_var_ptr++=&ID;\
*dbg_var_ptr++=(void*)NAME;\
*dbg_var_ptr++=&dbg_var_type_t<dbg_typeof(ID)>::info;

//**** main ****

int argc;
const char **argv;

Float D2R=0.017453292519943295f;
Float R2D=57.29577951308232f;

int Print( String t ){
	static char *buf;
	static int len;
	int n=t.Length();
	if( n+100>len ){
		len=n+100;
		free( buf );
		buf=(char*)malloc( len );
	}
	for( int i=0;i<n;++i ) buf[i]=t[i];
	buf[n]=0;
	puts( buf );
	fflush( stdout );
	return 0;
}

int Error( String err ){
	if( !err.Length() ) exit( 0 );
	dbg_error( err.ToCString<char>() );
	return 0;
}

int DebugLog( String t ){
	Print( t );
	return 0;
}

int DebugStop(){
	dbg_stop();
	return 0;
}

int bbInit();
int bbMain();

#if _MSC_VER

static void _cdecl seTranslator( unsigned int ex,EXCEPTION_POINTERS *p ){

	switch( ex ){
	case EXCEPTION_ACCESS_VIOLATION:dbg_error( "Memory access violation" );
	case EXCEPTION_ILLEGAL_INSTRUCTION:dbg_error( "Illegal instruction" );
	case EXCEPTION_INT_DIVIDE_BY_ZERO:dbg_error( "Integer divide by zero" );
	case EXCEPTION_STACK_OVERFLOW:dbg_error( "Stack overflow" );
	}
	dbg_error( "Unknown exception" );
}

#else

void sighandler( int sig  ){
	switch( sig ){
	case SIGSEGV:dbg_error( "Memory access violation" );
	case SIGILL:dbg_error( "Illegal instruction" );
	case SIGFPE:dbg_error( "Floating point exception" );
#if !_WIN32
	case SIGBUS:dbg_error( "Bus error" );
#endif	
	}
	dbg_error( "Unknown signal" );
}

#endif

//entry point call by target main()...
//
int bb_std_main( int argc,const char **argv ){

	::argc=argc;
	::argv=argv;
	
#if _MSC_VER

	_set_se_translator( seTranslator );

#else
	
	signal( SIGSEGV,sighandler );
	signal( SIGILL,sighandler );
	signal( SIGFPE,sighandler );
#if !_WIN32
	signal( SIGBUS,sighandler );
#endif

#endif

	bbInit();
	
#if CFG_CPP_INCREMENTAL_GC
	gc_mark_roots();
#endif
	
	bbMain();

	return 0;
}

// GLFW mojo runtime.
//
// Copyright 2011 Mark Sibly, all rights reserved.
// No warranty implied; use at your own risk.

class gxtkApp;
class gxtkGraphics;
class gxtkSurface;
class gxtkInput;
class gxtkAudio;
class gxtkSample;

#define KEY_LMB 1
#define KEY_RMB 2
#define KEY_MMB 3
#define KEY_TOUCH0 0x180

//Forward refs to data functions.
FILE *fopenFile( String path,const char *mode );

unsigned char *loadImage( String path,int *width,int *height,int *format );
void unloadImage( unsigned char *data );

unsigned char *loadSound( String path,int *length,int *channels,int *format,int *hertz );
void unloadSound( unsigned char *data );

/*
//for reading WAV file...
const char *ReadTag( FILE *f ){
	static char buf[8];
	if( fread( buf,4,1,f )!=1 ) return "";
	buf[4]=0;
	return buf;
}

int ReadInt( FILE *f ){
	unsigned char buf[4];
	if( fread( buf,4,1,f )!=1 ) return -1;
	return (buf[3]<<24) | (buf[2]<<16) | (buf[1]<<8) | buf[0];
}

int ReadShort( FILE *f ){
	unsigned char buf[2];
	if( fread( buf,2,1,f )!=1 ) return -1;
	return (buf[1]<<8) | buf[0];
}

void SkipBytes( int n,FILE *f ){
	char *p=(char*)malloc( n );
	fread( p,n,1,f );
	free(p);
}
*/

enum{
	VKEY_BACKSPACE=8,VKEY_TAB,
	VKEY_ENTER=13,
	VKEY_SHIFT=16,
	VKEY_CONTROL=17,
	VKEY_ESC=27,
	VKEY_SPACE=32,
	VKEY_PAGEUP=33,VKEY_PAGEDOWN,VKEY_END,VKEY_HOME,
	VKEY_LEFT=37,VKEY_UP,VKEY_RIGHT,VKEY_DOWN,
	VKEY_INSERT=45,VKEY_DELETE,
	VKEY_0=48,VKEY_1,VKEY_2,VKEY_3,VKEY_4,VKEY_5,VKEY_6,VKEY_7,VKEY_8,VKEY_9,
	VKEY_A=65,VKEY_B,VKEY_C,VKEY_D,VKEY_E,VKEY_F,VKEY_G,VKEY_H,VKEY_I,VKEY_J,
	VKEY_K,VKEY_L,VKEY_M,VKEY_N,VKEY_O,VKEY_P,VKEY_Q,VKEY_R,VKEY_S,VKEY_T,
	VKEY_U,VKEY_V,VKEY_W,VKEY_X,VKEY_Y,VKEY_Z,
	
	VKEY_LSYS=91,VKEY_RSYS,
	
	VKEY_NUM0=96,VKEY_NUM1,VKEY_NUM2,VKEY_NUM3,VKEY_NUM4,
	VKEY_NUM5,VKEY_NUM6,VKEY_NUM7,VKEY_NUM8,VKEY_NUM9,
	VKEY_NUMMULTIPLY=106,VKEY_NUMADD,VKEY_NUMSLASH,
	VKEY_NUMSUBTRACT,VKEY_NUMDECIMAL,VKEY_NUMDIVIDE,

	VKEY_F1=112,VKEY_F2,VKEY_F3,VKEY_F4,VKEY_F5,VKEY_F6,
	VKEY_F7,VKEY_F8,VKEY_F9,VKEY_F10,VKEY_F11,VKEY_F12,

	VKEY_LSHIFT=160,VKEY_RSHIFT,
	VKEY_LCONTROL=162,VKEY_RCONTROL,
	VKEY_LALT=164,VKEY_RALT,

	VKEY_TILDE=192,VKEY_MINUS=189,VKEY_EQUALS=187,
	VKEY_OPENBRACKET=219,VKEY_BACKSLASH=220,VKEY_CLOSEBRACKET=221,
	VKEY_SEMICOLON=186,VKEY_QUOTES=222,
	VKEY_COMMA=188,VKEY_PERIOD=190,VKEY_SLASH=191
};

//glfw key to monkey key!
int TransKey( int key ){

	if( key>='0' && key<='9' ) return key;
	if( key>='A' && key<='Z' ) return key;

	switch( key ){

	case ' ':return VKEY_SPACE;
	case ';':return VKEY_SEMICOLON;
	case '=':return VKEY_EQUALS;
	case ',':return VKEY_COMMA;
	case '-':return VKEY_MINUS;
	case '.':return VKEY_PERIOD;
	case '/':return VKEY_SLASH;
	case '~':return VKEY_TILDE;
	case '[':return VKEY_OPENBRACKET;
	case ']':return VKEY_CLOSEBRACKET;
	case '\"':return VKEY_QUOTES;
	case '\\':return VKEY_BACKSLASH;
	
	case GLFW_KEY_LSHIFT:return VKEY_LSHIFT;
	case GLFW_KEY_RSHIFT:return VKEY_RSHIFT;
	case GLFW_KEY_LCTRL:return VKEY_LCONTROL;
	case GLFW_KEY_RCTRL:return VKEY_RCONTROL;
	
	case GLFW_KEY_BACKSPACE:return VKEY_BACKSPACE;
	case GLFW_KEY_TAB:return VKEY_TAB;
	case GLFW_KEY_ENTER:return VKEY_ENTER;
	case GLFW_KEY_ESC:return VKEY_ESC;
	case GLFW_KEY_INSERT:return VKEY_INSERT;
	case GLFW_KEY_DEL:return VKEY_DELETE;
	case GLFW_KEY_PAGEUP:return VKEY_PAGEUP;
	case GLFW_KEY_PAGEDOWN:return VKEY_PAGEDOWN;
	case GLFW_KEY_HOME:return VKEY_HOME;
	case GLFW_KEY_END:return VKEY_END;
	case GLFW_KEY_UP:return VKEY_UP;
	case GLFW_KEY_DOWN:return VKEY_DOWN;
	case GLFW_KEY_LEFT:return VKEY_LEFT;
	case GLFW_KEY_RIGHT:return VKEY_RIGHT;
	
	case GLFW_KEY_F1:return VKEY_F1;
	case GLFW_KEY_F2:return VKEY_F2;
	case GLFW_KEY_F3:return VKEY_F3;
	case GLFW_KEY_F4:return VKEY_F4;
	case GLFW_KEY_F5:return VKEY_F5;
	case GLFW_KEY_F6:return VKEY_F6;
	case GLFW_KEY_F7:return VKEY_F7;
	case GLFW_KEY_F8:return VKEY_F8;
	case GLFW_KEY_F9:return VKEY_F9;
	case GLFW_KEY_F10:return VKEY_F10;
	case GLFW_KEY_F11:return VKEY_F11;
	case GLFW_KEY_F12:return VKEY_F12;
	}
	return 0;
}

//monkey key to special monkey char
int KeyToChar( int key ){
	switch( key ){
	case VKEY_BACKSPACE:
	case VKEY_TAB:
	case VKEY_ENTER:
	case VKEY_ESC:
		return key;
	case VKEY_PAGEUP:
	case VKEY_PAGEDOWN:
	case VKEY_END:
	case VKEY_HOME:
	case VKEY_LEFT:
	case VKEY_UP:
	case VKEY_RIGHT:
	case VKEY_DOWN:
	case VKEY_INSERT:
		return key | 0x10000;
	case VKEY_DELETE:
		return 127;
	}
	return 0;
}

gxtkApp *app;

class gxtkObject : public Object{
public:
};

class gxtkApp : public gxtkObject{
public:
	gxtkGraphics *graphics;
	gxtkInput *input;
	gxtkAudio *audio;
	
	int updateRate;
	double nextUpdate;
	double updatePeriod;
	
	bool suspended;
	
	gxtkApp();
	
	void Run();
	
	static void GLFWCALL OnWindowRefresh();
	static void GLFWCALL OnWindowSize( int width,int height );
	static void GLFWCALL OnKey( int key,int action );
	static void GLFWCALL OnChar( int chr,int action );
	static void GLFWCALL OnMouseButton( int button,int action );
	
	void InvokeOnCreate();
	void InvokeOnSuspend();
	void InvokeOnResume();
	void InvokeOnUpdate();
	void InvokeOnRender();
	
	//***** GXTK API *****

	virtual gxtkGraphics *GraphicsDevice();
	virtual gxtkInput *InputDevice();
	virtual gxtkAudio *AudioDevice();
	virtual String AppTitle();
	virtual String LoadState();
	virtual int SaveState( String state );
	virtual String LoadString( String path );
	virtual int SetUpdateRate( int hertz );
	virtual int MilliSecs();
	virtual int Loading();
	
	virtual int OnCreate();
	virtual int OnSuspend();
	virtual int OnResume();
	
	virtual int OnUpdate();
	virtual int OnRender();
	virtual int OnLoading();
};

//***** START OF COMMON OPENGL CODE *****

#define MAX_VERTS 1024
#define MAX_POINTS MAX_VERTS
#define MAX_LINES (MAX_VERTS/2)
#define MAX_QUADS (MAX_VERTS/4)

class gxtkGraphics : public gxtkObject{
public:

	int mode;
	int width;
	int height;

	int colorARGB;
	float r,g,b,alpha;
	float ix,iy,jx,jy,tx,ty;
	bool tformed;

	float vertices[MAX_VERTS*5];
	unsigned short quadIndices[MAX_QUADS*6];

	int primType;
	int primCount;
	gxtkSurface *primSurf;
	
	gxtkGraphics();
	
	bool Validate();		
	void BeginRender();
	void EndRender();
	void Flush();
	
	//***** GXTK API *****
	virtual int Mode();
	virtual int Width();
	virtual int Height();

	virtual gxtkSurface *LoadSurface( String path );
	
	virtual int Cls( float r,float g,float b );
	virtual int SetAlpha( float alpha );
	virtual int SetColor( float r,float g,float b );
	virtual int SetBlend( int blend );
	virtual int SetScissor( int x,int y,int w,int h );
	virtual int SetMatrix( float ix,float iy,float jx,float jy,float tx,float ty );
	
	virtual int DrawPoint( float x,float y );
	virtual int DrawRect( float x,float y,float w,float h );
	virtual int DrawLine( float x1,float y1,float x2,float y2 );
	virtual int DrawOval( float x1,float y1,float x2,float y2 );
	virtual int DrawPoly( Array<float> verts );
	virtual int DrawSurface( gxtkSurface *surface,float x,float y );
	virtual int DrawSurface2( gxtkSurface *surface,float x,float y,int srcx,int srcy,int srcw,int srch );
};

//***** gxtkSurface *****

class gxtkSurface : public gxtkObject{
public:
	GLuint texture;
	int width;
	int height;
	float uscale;
	float vscale;
	
	gxtkSurface( GLuint texture,int width,int height,float uscale,float vscale );
	~gxtkSurface();
	
	//***** GXTK API *****
	virtual int Discard();
	virtual int Width();
	virtual int Height();
	virtual int Loaded();
};

//***** gxtkGraphics *****

gxtkGraphics::gxtkGraphics(){

	mode=width=height=0;
	
	if( CFG_OPENGL_GLES20_ENABLED ) return;
	
	mode=1;
	
	for( int i=0;i<MAX_QUADS;++i ){
		quadIndices[i*6  ]=(short)(i*4);
		quadIndices[i*6+1]=(short)(i*4+1);
		quadIndices[i*6+2]=(short)(i*4+2);
		quadIndices[i*6+3]=(short)(i*4);
		quadIndices[i*6+4]=(short)(i*4+2);
		quadIndices[i*6+5]=(short)(i*4+3);
	}
}

void gxtkGraphics::BeginRender(){
	if( !mode ) return;
	
	glViewport( 0,0,width,height );

	glMatrixMode( GL_PROJECTION );
	glLoadIdentity();
	glOrtho( 0,width,height,0,-1,1 );
	glMatrixMode( GL_MODELVIEW );
	glLoadIdentity();
	
	glEnableClientState( GL_VERTEX_ARRAY );
	glVertexPointer( 2,GL_FLOAT,20,&vertices[0] );	
	
	glEnableClientState( GL_TEXTURE_COORD_ARRAY );
	glTexCoordPointer( 2,GL_FLOAT,20,&vertices[2] );
	
	glEnableClientState( GL_COLOR_ARRAY );
	glColorPointer( 4,GL_UNSIGNED_BYTE,20,&vertices[4] );
	
	glEnable( GL_BLEND );
	glBlendFunc( GL_ONE,GL_ONE_MINUS_SRC_ALPHA );
	
	glDisable( GL_TEXTURE_2D );
	
	primCount=0;
}

void gxtkGraphics::Flush(){
	if( !primCount ) return;

	if( primSurf ){
		glEnable( GL_TEXTURE_2D );
		glBindTexture( GL_TEXTURE_2D,primSurf->texture );
	}
		
	switch( primType ){
	case 1:
		glDrawArrays( GL_POINTS,0,primCount );
		break;
	case 2:
		glDrawArrays( GL_LINES,0,primCount*2 );
		break;
	case 4:
		glDrawElements( GL_TRIANGLES,primCount*6,GL_UNSIGNED_SHORT,quadIndices );
		break;
	case 5:
		glDrawArrays( GL_TRIANGLE_FAN,0,primCount );
		break;
	}

	if( primSurf ){
		glDisable( GL_TEXTURE_2D );
	}

	primCount=0;
}

//***** GXTK API *****

int gxtkGraphics::Mode(){
	return mode;
}

int gxtkGraphics::Width(){
	return width;
}

int gxtkGraphics::Height(){
	return height;
}

int gxtkGraphics::Cls( float r,float g,float b ){
	primCount=0;

	glClearColor( r/255.0f,g/255.0f,b/255.0f,1 );
	glClear( GL_COLOR_BUFFER_BIT );

	return 0;
}

int gxtkGraphics::SetAlpha( float alpha ){
	this->alpha=alpha;
	
	int a=int(alpha*255);
	
	colorARGB=(a<<24) | (int(b*alpha)<<16) | (int(g*alpha)<<8) | int(r*alpha);
	
	return 0;
}

int gxtkGraphics::SetColor( float r,float g,float b ){
	this->r=r;
	this->g=g;
	this->b=b;

	int a=int(alpha*255);
	
	colorARGB=(a<<24) | (int(b*alpha)<<16) | (int(g*alpha)<<8) | int(r*alpha);
	
	return 0;
}

int gxtkGraphics::SetBlend( int blend ){
	Flush();
	
	switch( blend ){
	case 1:
		glBlendFunc( GL_ONE,GL_ONE );
		break;
	default:
		glBlendFunc( GL_ONE,GL_ONE_MINUS_SRC_ALPHA );
	}

	return 0;
}

int gxtkGraphics::SetScissor( int x,int y,int w,int h ){
	Flush();
	
	if( x!=0 || y!=0 || w!=Width() || h!=Height() ){
		glEnable( GL_SCISSOR_TEST );
		y=Height()-y-h;
		glScissor( x,y,w,h );
	}else{
		glDisable( GL_SCISSOR_TEST );
	}
	return 0;
}

int gxtkGraphics::SetMatrix( float ix,float iy,float jx,float jy,float tx,float ty ){

	tformed=(ix!=1 || iy!=0 || jx!=0 || jy!=1 || tx!=0 || ty!=0);

	this->ix=ix;this->iy=iy;this->jx=jx;this->jy=jy;this->tx=tx;this->ty=ty;

	return 0;
}

int gxtkGraphics::DrawLine( float x0,float y0,float x1,float y1 ){
	if( primType!=2 || primCount==MAX_LINES || primSurf ){
		Flush();
		primType=2;
		primSurf=0;
	}

	if( tformed ){
		float tx0=x0,tx1=x1;
		x0=tx0 * ix + y0 * jx + tx;y0=tx0 * iy + y0 * jy + ty;
		x1=tx1 * ix + y1 * jx + tx;y1=tx1 * iy + y1 * jy + ty;
	}
	
	float *vp=&vertices[primCount++*10];
	
	vp[0]=x0;vp[1]=y0;(int&)vp[4]=colorARGB;
	vp[5]=x1;vp[6]=y1;(int&)vp[9]=colorARGB;
	
	return 0;
}

int gxtkGraphics::DrawPoint( float x,float y ){
	if( primType!=1 || primCount==MAX_POINTS || primSurf ){
		Flush();
		primType=1;
		primSurf=0;
	}
	
	if( tformed ){
		float px=x;
		x=px * ix + y * jx + tx;
		y=px * iy + y * jy + ty;
	}
	
	float *vp=&vertices[primCount++*5];
	
	vp[0]=x;vp[1]=y;(int&)vp[4]=colorARGB;

	return 0;	
}
	
int gxtkGraphics::DrawRect( float x,float y,float w,float h ){
	if( primType!=4 || primCount==MAX_QUADS || primSurf ){
		Flush();
		primType=4;
		primSurf=0;
	}

	float x0=x,x1=x+w,x2=x+w,x3=x;
	float y0=y,y1=y,y2=y+h,y3=y+h;

	if( tformed ){
		float tx0=x0,tx1=x1,tx2=x2,tx3=x3;
		x0=tx0 * ix + y0 * jx + tx;y0=tx0 * iy + y0 * jy + ty;
		x1=tx1 * ix + y1 * jx + tx;y1=tx1 * iy + y1 * jy + ty;
		x2=tx2 * ix + y2 * jx + tx;y2=tx2 * iy + y2 * jy + ty;
		x3=tx3 * ix + y3 * jx + tx;y3=tx3 * iy + y3 * jy + ty;
	}
	
	float *vp=&vertices[primCount++*20];
	
	vp[0 ]=x0;vp[1 ]=y0;(int&)vp[4 ]=colorARGB;
	vp[5 ]=x1;vp[6 ]=y1;(int&)vp[9 ]=colorARGB;
	vp[10]=x2;vp[11]=y2;(int&)vp[14]=colorARGB;
	vp[15]=x3;vp[16]=y3;(int&)vp[19]=colorARGB;

	return 0;
}

int gxtkGraphics::DrawOval( float x,float y,float w,float h ){
	Flush();
	primType=5;
	primSurf=0;
	
	float xr=w/2.0f;
	float yr=h/2.0f;

	int segs;
	if( tformed ){
		float dx_x=xr * ix;
		float dx_y=xr * iy;
		float dx=sqrtf( dx_x*dx_x+dx_y*dx_y );
		float dy_x=yr * jx;
		float dy_y=yr * jy;
		float dy=sqrtf( dy_x*dy_x+dy_y*dy_y );
		segs=(int)( dx+dy );
	}else{
		segs=(int)( abs( xr )+abs( yr ) );
	}
	
	if( segs<12 ){
		segs=12;
	}else if( segs>MAX_VERTS ){
		segs=MAX_VERTS;
	}else{
		segs&=~3;
	}

	float x0=x+xr,y0=y+yr;
	
	float *vp=vertices;

	for( int i=0;i<segs;++i ){
	
		float th=i * 6.28318531f / segs;

		float px=x0+cosf( th ) * xr;
		float py=y0-sinf( th ) * yr;
		
		if( tformed ){
			float ppx=px;
			px=ppx * ix + py * jx + tx;
			py=ppx * iy + py * jy + ty;
		}
		
		vp[0]=px;vp[1]=py;(int&)vp[4]=colorARGB;
		vp+=5;
	}
	
	primCount=segs;

	Flush();
	
	return 0;
}

int gxtkGraphics::DrawPoly( Array<float> verts ){
	int n=verts.Length()/2;
	if( n<3 || n>MAX_VERTS ) return 0;
	
	Flush();
	primType=5;
	primSurf=0;
	
	float *vp=vertices;
	
	for( int i=0;i<n;++i ){
	
		float px=verts[i*2];
		float py=verts[i*2+1];
		
		if( tformed ){
			float ppx=px;
			px=ppx * ix + py * jx + tx;
			py=ppx * iy + py * jy + ty;
		}
		
		vp[0]=px;vp[1]=py;(int&)vp[4]=colorARGB;
		vp+=5;
	}

	primCount=n;
	
	Flush();
	
	return 0;
}


int gxtkGraphics::DrawSurface( gxtkSurface *surf,float x,float y ){
	if( primType!=4 || primCount==MAX_QUADS || surf!=primSurf ){
		Flush();
		primType=4;
		primSurf=surf;
	}
	
	float w=surf->Width();
	float h=surf->Height();
	float x0=x,x1=x+w,x2=x+w,x3=x;
	float y0=y,y1=y,y2=y+h,y3=y+h;
	float u0=0,u1=w*surf->uscale;
	float v0=0,v1=h*surf->vscale;

	if( tformed ){
		float tx0=x0,tx1=x1,tx2=x2,tx3=x3;
		x0=tx0 * ix + y0 * jx + tx;y0=tx0 * iy + y0 * jy + ty;
		x1=tx1 * ix + y1 * jx + tx;y1=tx1 * iy + y1 * jy + ty;
		x2=tx2 * ix + y2 * jx + tx;y2=tx2 * iy + y2 * jy + ty;
		x3=tx3 * ix + y3 * jx + tx;y3=tx3 * iy + y3 * jy + ty;
	}
	
	float *vp=&vertices[primCount++*20];
	
	vp[0 ]=x0;vp[1 ]=y0;vp[2 ]=u0;vp[3 ]=v0;(int&)vp[4 ]=colorARGB;
	vp[5 ]=x1;vp[6 ]=y1;vp[7 ]=u1;vp[8 ]=v0;(int&)vp[9 ]=colorARGB;
	vp[10]=x2;vp[11]=y2;vp[12]=u1;vp[13]=v1;(int&)vp[14]=colorARGB;
	vp[15]=x3;vp[16]=y3;vp[17]=u0;vp[18]=v1;(int&)vp[19]=colorARGB;
	
	return 0;
}

int gxtkGraphics::DrawSurface2( gxtkSurface *surf,float x,float y,int srcx,int srcy,int srcw,int srch ){
	if( primType!=4 || primCount==MAX_QUADS || surf!=primSurf ){
		Flush();
		primType=4;
		primSurf=surf;
	}
	
	float w=srcw;
	float h=srch;
	float x0=x,x1=x+w,x2=x+w,x3=x;
	float y0=y,y1=y,y2=y+h,y3=y+h;
	float u0=srcx*surf->uscale,u1=(srcx+srcw)*surf->uscale;
	float v0=srcy*surf->vscale,v1=(srcy+srch)*surf->vscale;

	if( tformed ){
		float tx0=x0,tx1=x1,tx2=x2,tx3=x3;
		x0=tx0 * ix + y0 * jx + tx;y0=tx0 * iy + y0 * jy + ty;
		x1=tx1 * ix + y1 * jx + tx;y1=tx1 * iy + y1 * jy + ty;
		x2=tx2 * ix + y2 * jx + tx;y2=tx2 * iy + y2 * jy + ty;
		x3=tx3 * ix + y3 * jx + tx;y3=tx3 * iy + y3 * jy + ty;
	}
	
	float *vp=&vertices[primCount++*20];
	
	vp[0 ]=x0;vp[1 ]=y0;vp[2 ]=u0;vp[3 ]=v0;(int&)vp[4 ]=colorARGB;
	vp[5 ]=x1;vp[6 ]=y1;vp[7 ]=u1;vp[8 ]=v0;(int&)vp[9 ]=colorARGB;
	vp[10]=x2;vp[11]=y2;vp[12]=u1;vp[13]=v1;(int&)vp[14]=colorARGB;
	vp[15]=x3;vp[16]=y3;vp[17]=u0;vp[18]=v1;(int&)vp[19]=colorARGB;
	
	return 0;
}

//***** gxtkSurface *****

gxtkSurface::gxtkSurface( GLuint texture,int width,int height,float uscale,float vscale ):
	texture(texture),width(width),height(height),uscale(uscale),vscale(vscale){
}

gxtkSurface::~gxtkSurface(){
	Discard();
}

int gxtkSurface::Discard(){
	if( texture ){
		glDeleteTextures( 1,&texture );
		texture=0;
	}
	return 0;
}

int gxtkSurface::Width(){
	return width;
}

int gxtkSurface::Height(){
	return height;
}

int gxtkSurface::Loaded(){
	return 1;
}

//***** END OF COMMON OPENGL CODE *****

bool gxtkGraphics::Validate(){
	width=height=0;
	glfwGetWindowSize( &width,&height );
	return width>0 && height>0;
}

void gxtkGraphics::EndRender(){
	if( mode ) Flush();
	glfwSwapBuffers();
}

#ifndef GL_CLAMP_TO_EDGE
#define GL_CLAMP_TO_EDGE 0x812f
#endif

#ifndef GL_GENERATE_MIPMAP
#define GL_GENERATE_MIPMAP 0x8191
#endif

int Pow2Size( int n ){
	int i=1;
	while( i<n ) i*=2;
	return i;
}

gxtkSurface *gxtkGraphics::LoadSurface( String path ){

	int width,height,depth;
	unsigned char *data=loadImage( path,&width,&height,&depth );
	if( !data ) return 0;
	
	unsigned char *p=data;
	int n=width*height,fmt=0;
	
	switch( depth ){
	case 1:
		fmt=GL_LUMINANCE;
		break;
	case 2:
		while( n-- ){	//premultiply alpha
			p[0]=p[0]*p[1]/255;
			p+=2;
		}
		fmt=GL_LUMINANCE_ALPHA;
		break;
	case 3:
		fmt=GL_RGB;
		break;
	case 4:
		while( n-- ){	//premultiply alpha
			p[0]=p[0]*p[3]/255;
			p[1]=p[1]*p[3]/255;
			p[2]=p[2]*p[3]/255;
			p+=4;
		}
		fmt=GL_RGBA;
		break;
	default:
		unloadImage( data );
		return 0;
	}
	
	GLuint texture;

	glGenTextures( 1,&texture );
	glBindTexture( GL_TEXTURE_2D,texture );

	if( CFG_MOJO_IMAGE_FILTERING_ENABLED ){
		glTexParameteri( GL_TEXTURE_2D,GL_TEXTURE_MAG_FILTER,GL_LINEAR );
		glTexParameteri( GL_TEXTURE_2D,GL_TEXTURE_MIN_FILTER,GL_LINEAR );
	}else{
		glTexParameteri( GL_TEXTURE_2D,GL_TEXTURE_MAG_FILTER,GL_NEAREST );
		glTexParameteri( GL_TEXTURE_2D,GL_TEXTURE_MIN_FILTER,GL_NEAREST );
	}

	glTexParameteri( GL_TEXTURE_2D,GL_TEXTURE_WRAP_S,GL_CLAMP_TO_EDGE );
	glTexParameteri( GL_TEXTURE_2D,GL_TEXTURE_WRAP_T,GL_CLAMP_TO_EDGE );

	int texwidth=width,texheight=height;
	glTexImage2D( GL_TEXTURE_2D,0,fmt,texwidth,texheight,0,fmt,GL_UNSIGNED_BYTE,0 );
	if( glGetError()!=GL_NO_ERROR ){
		texwidth=Pow2Size( width );
		texheight=Pow2Size( height );
		glTexImage2D( GL_TEXTURE_2D,0,fmt,texwidth,texheight,0,fmt,GL_UNSIGNED_BYTE,0 );
		if( glGetError()!=GL_NO_ERROR ){
			glDeleteTextures( 1,&texture );
			unloadImage( data );
			return 0;
		}
	}
	
	glPixelStorei( GL_UNPACK_ALIGNMENT,1 );
	
	glTexSubImage2D( GL_TEXTURE_2D,0,0,0,width,height,fmt,GL_UNSIGNED_BYTE,data );
	
	unloadImage( data );

	return new gxtkSurface( texture,width,height,1.0f/texwidth,1.0f/texheight );
}

// ***** End of graphics ******

class gxtkInput : public gxtkObject{
public:
	int keyStates[512];
	int charQueue[32];
	int charPut,charGet;
	float mouseX,mouseY;
	
	float joyPos[6];
	int joyButton[32];
	
	gxtkInput();
	~gxtkInput(){
//		Print( "~gxtkInput" );
	}
	
	void BeginUpdate();
	void EndUpdate();
	
	void OnKeyDown( int key );
	void OnKeyUp( int key );
	void PutChar( int chr );
	
	//***** GXTK API *****
	virtual int SetKeyboardEnabled( int enabled );
	
	virtual int KeyDown( int key );
	virtual int KeyHit( int key );
	virtual int GetChar();
	
	virtual float MouseX();
	virtual float MouseY();

	virtual float JoyX( int index );
	virtual float JoyY( int index );
	virtual float JoyZ( int index );

	virtual float TouchX( int index );
	virtual float TouchY( int index );
	
	virtual float AccelX();
	virtual float AccelY();
	virtual float AccelZ();
};

class gxtkChannel{
public:
	ALuint source;
	gxtkSample *sample;
	int flags;
	int state;
	
	int AL_Source();
};

class gxtkAudio : public gxtkObject{
public:
	gxtkChannel channels[33];

	gxtkAudio();

	void mark();
	void OnSuspend();
	void OnResume();

	//***** GXTK API *****
	virtual gxtkSample *LoadSample( String path );
	virtual int PlaySample( gxtkSample *sample,int channel,int flags );

	virtual int StopChannel( int channel );
	virtual int PauseChannel( int channel );
	virtual int ResumeChannel( int channel );
	virtual int ChannelState( int channel );
	virtual int SetVolume( int channel,float volume );
	virtual int SetPan( int channel,float pan );
	virtual int SetRate( int channel,float rate );
	
	virtual int PlayMusic( String path,int flags );
	virtual int StopMusic();
	virtual int PauseMusic();
	virtual int ResumeMusic();
	virtual int MusicState();
	virtual int SetMusicVolume( float volume );
};

class gxtkSample : public gxtkObject{
public:
	ALuint al_buffer;

	gxtkSample(){}
	gxtkSample( ALuint buf );
	~gxtkSample();
	
	//***** GXTK API *****
	virtual int Discard();
};

//***** gxtkApp *****

int RunApp(){
	app->Run();
	return 0;
}

gxtkApp::gxtkApp(){
	app=this;

	graphics=new gxtkGraphics;
	input=new gxtkInput;
	audio=new gxtkAudio;

	updateRate=0;
	suspended=false;

	runner=RunApp;
}

void gxtkApp::Run(){

	glfwEnable( GLFW_KEY_REPEAT );
	glfwDisable( GLFW_AUTO_POLL_EVENTS );

	glfwSetKeyCallback( OnKey );
	glfwSetCharCallback( OnChar );
	glfwSetWindowSizeCallback( OnWindowSize );
	glfwSetWindowRefreshCallback( OnWindowRefresh );
	glfwSetMouseButtonCallback( OnMouseButton );

	InvokeOnCreate();
	InvokeOnRender();

	while( glfwGetWindowParam( GLFW_OPENED ) ){
	
		if( glfwGetWindowParam( GLFW_ICONIFIED ) ){
			if( !suspended ){
				InvokeOnSuspend();
				continue;
			}
		}else if( glfwGetWindowParam( GLFW_ACTIVE ) ){
			if( suspended ){
				InvokeOnResume();
				continue;
			}
		}else if( CFG_MOJO_AUTO_SUSPEND_ENABLED ){
			if( !suspended ){
				InvokeOnSuspend();
				continue;
			}
		}
	
		if( !updateRate || suspended ){
			InvokeOnRender();
			glfwWaitEvents();
			continue;
		}
		
		float time=glfwGetTime();
		if( time<nextUpdate ){
			glfwSleep( nextUpdate-time );
			continue;
		}

		glfwPollEvents();
				
		int updates=0;
		for(;;){
			nextUpdate+=updatePeriod;
			
			InvokeOnUpdate();
			if( !updateRate ) break;
			
			if( nextUpdate>glfwGetTime() ){
				break;
			}
			
			if( ++updates==7 ){
				nextUpdate=glfwGetTime();
				break;
			}
		}
		InvokeOnRender();
	}
}

void gxtkApp::OnWindowSize( int width,int height ){
//	Print( "OnWindowSize!" );
//	if( width>0 && height>0 ){
//		app->InvokeOnResume();
//	}else{
//		app->InvokeOnSuspend();
//	}
}

void gxtkApp::OnWindowRefresh(){
//	Print( "OnWindowRefresh!" );
//	app->InvokeOnRender();
}

void gxtkApp::OnMouseButton( int button,int action ){
	int key;
	switch( button ){
	case GLFW_MOUSE_BUTTON_LEFT:key=KEY_LMB;break;
	case GLFW_MOUSE_BUTTON_RIGHT:key=KEY_RMB;break;
	case GLFW_MOUSE_BUTTON_MIDDLE:key=KEY_MMB;break;
	default:return;
	}
	switch( action ){
	case GLFW_PRESS:
		app->input->OnKeyDown( key );
		break;
	case GLFW_RELEASE:
		app->input->OnKeyUp( key );
		break;
	}
}

void gxtkApp::OnKey( int key,int action ){

	key=TransKey( key );
	if( !key ) return;
	
	switch( action ){
	case GLFW_PRESS:
		app->input->OnKeyDown( key );
		
		if( int chr=KeyToChar( key ) ){
			app->input->PutChar( chr );
		}
		
		break;
	case GLFW_RELEASE:
		app->input->OnKeyUp( key );
		break;
	}
}

void gxtkApp::OnChar( int chr,int action ){

	switch( action ){
	case GLFW_PRESS:
		app->input->PutChar( chr );
		break;
	}
}

void gxtkApp::InvokeOnCreate(){
	if( !graphics->Validate() ) abort();
	
	OnCreate();
	
	gc_collect();
}

void gxtkApp::InvokeOnSuspend(){
	if( suspended ) return;
	
	suspended=true;
	OnSuspend();
	audio->OnSuspend();
	if( updateRate ){
		int upr=updateRate;
		SetUpdateRate( 0 );
		updateRate=upr;
	}
	
	gc_collect();
}

void gxtkApp::InvokeOnResume(){
	if( !suspended ) return;
	
	if( updateRate ){
		int upr=updateRate;
		updateRate=0;
		SetUpdateRate( upr );
	}
	audio->OnResume();
	OnResume();
	suspended=false;
	
	gc_collect();
}

void gxtkApp::InvokeOnUpdate(){
	if( suspended || !updateRate || !graphics->Validate() ) return;
	
	input->BeginUpdate();
	OnUpdate();
	input->EndUpdate();
	
	gc_collect();
}

void gxtkApp::InvokeOnRender(){
	if( suspended || !graphics->Validate() ) return;
	
	graphics->BeginRender();
	OnRender();
	graphics->EndRender();
	
	gc_collect();
}

//***** GXTK API *****

gxtkGraphics *gxtkApp::GraphicsDevice(){
	return graphics;
}

gxtkInput *gxtkApp::InputDevice(){
	return input;
}

gxtkAudio *gxtkApp::AudioDevice(){
	return audio;
}

String gxtkApp::AppTitle(){
	return "<TODO>";
}

String gxtkApp::LoadState(){
	if( FILE *fp=fopen( ".monkeystate","rb" ) ){
		String str=String::Load( fp );
		fclose( fp );
		return str;
	}
	return "";
}

int gxtkApp::SaveState( String state ){
	if( FILE *fp=fopen( ".monkeystate","wb" ) ){
		bool ok=state.Save( fp );
		fclose( fp );
		return ok ? 0 : -2;
	}
	return -1;
}

String gxtkApp::LoadString( String path ){
	if( FILE *fp=fopenFile( path,"rb" ) ){
		String str=String::Load( fp );
		fclose( fp );
		return str;
	}
	return "";
}

int gxtkApp::SetUpdateRate( int hertz ){
	updateRate=hertz;

	if( updateRate ){
		updatePeriod=1.0/updateRate;
		nextUpdate=glfwGetTime()+updatePeriod;
	}
	return 0;
}

int gxtkApp::MilliSecs(){
	return glfwGetTime()*1000.0;
}

int gxtkApp::Loading(){
	return 0;
}

int gxtkApp::OnCreate(){
	return 0;
}

int gxtkApp::OnSuspend(){
	return 0;
}

int gxtkApp::OnResume(){
	return 0;
}

int gxtkApp::OnUpdate(){
	return 0;
}

int gxtkApp::OnRender(){
	return 0;
}

int gxtkApp::OnLoading(){
	return 0;
}

// ***** gxtkInput *****

gxtkInput::gxtkInput(){
	memset( keyStates,0,sizeof(keyStates) );
	memset( charQueue,0,sizeof(charQueue) );
	mouseX=mouseY=0;
	charPut=charGet=0;
	
}

void gxtkInput::BeginUpdate(){

	int x=0,y=0;
	glfwGetMousePos( &x,&y );
	mouseX=x;
	mouseY=y;
	
	int n_axes=glfwGetJoystickParam( GLFW_JOYSTICK_1,GLFW_AXES );
	int n_buttons=glfwGetJoystickParam( GLFW_JOYSTICK_1,GLFW_BUTTONS );

//	printf( "n_axes=%i, n_buttons=%i\n",n_axes,n_buttons );fflush( stdout );
	
	memset( joyPos,0,sizeof(joyPos) );	
	glfwGetJoystickPos( GLFW_JOYSTICK_1,joyPos,n_axes );
	
	unsigned char buttons[32];
	memset( buttons,0,sizeof(buttons) );
	glfwGetJoystickButtons( GLFW_JOYSTICK_1,buttons,n_buttons );

	float t;
	switch( n_axes ){
	case 4:	//my saitek...axes=4, buttons=14
		joyPos[4]=joyPos[2];
		joyPos[3]=joyPos[3];
		joyPos[2]=0;
		break;
	case 5:	//xbox360...axes=5, buttons=10
		t=joyPos[3];
		joyPos[3]=joyPos[4];
		joyPos[4]=t;
		break;
	}
	
	for( int i=0;i<n_buttons;++i ){
		if( buttons[i]==GLFW_PRESS ){
			OnKeyDown( 256+i );
		}else{
			OnKeyUp( 256+i );
		}
	}
}

void gxtkInput::EndUpdate(){
	for( int i=0;i<512;++i ){
		keyStates[i]&=0x100;
	}
	charGet=0;
	charPut=0;
}

void gxtkInput::OnKeyDown( int key ){
	if( keyStates[key] & 0x100 ) return;
	
	keyStates[key]|=0x100;
	++keyStates[key];
	
	switch( key ){
	case VKEY_LSHIFT:case VKEY_RSHIFT:
		if( (keyStates[VKEY_LSHIFT]&0x100) || (keyStates[VKEY_RSHIFT]&0x100) ) OnKeyDown( VKEY_SHIFT );
		break;
	case VKEY_LCONTROL:case VKEY_RCONTROL:
		if( (keyStates[VKEY_LCONTROL]&0x100) || (keyStates[VKEY_RCONTROL]&0x100) ) OnKeyDown( VKEY_CONTROL );
		break;
	}
}

void gxtkInput::OnKeyUp( int key ){
	if( !(keyStates[key] & 0x100) ) return;

	keyStates[key]&=0xff;
	
	switch( key ){
	case VKEY_LSHIFT:case VKEY_RSHIFT:
		if( !(keyStates[VKEY_LSHIFT]&0x100) && !(keyStates[VKEY_RSHIFT]&0x100) ) OnKeyUp( VKEY_SHIFT );
		break;
	case VKEY_LCONTROL:case VKEY_RCONTROL:
		if( !(keyStates[VKEY_LCONTROL]&0x100) && !(keyStates[VKEY_RCONTROL]&0x100) ) OnKeyUp( VKEY_CONTROL );
		break;
	}
}

void gxtkInput::PutChar( int chr ){
	if( charPut<32 ) charQueue[charPut++]=chr;
}

//***** GXTK API *****

int gxtkInput::SetKeyboardEnabled( int enabled ){
	return 0;
}

int gxtkInput::KeyDown( int key ){
	if( key>0 && key<512 ){
		if( key==KEY_TOUCH0 ) key=KEY_LMB;
		return keyStates[key] >> 8;
	}
	return 0;
}

int gxtkInput::KeyHit( int key ){
	if( key>0 && key<512 ){
		if( key==KEY_TOUCH0 ) key=KEY_LMB;
		return keyStates[key] & 0xff;
	}
	return 0;
}

int gxtkInput::GetChar(){
	if( charGet<charPut ){
		return charQueue[charGet++];
	}
	return 0;
}
	
float gxtkInput::MouseX(){
	return mouseX;
}

float gxtkInput::MouseY(){
	return mouseY;
}

float gxtkInput::JoyX( int index ){
	switch( index ){
	case 0:return joyPos[0];
	case 1:return joyPos[3];
	}
	return 0;
}

float gxtkInput::JoyY( int index ){
	switch( index ){
	case 0:return joyPos[1];
	case 1:return -joyPos[4];
	}
	return 0;
}

float gxtkInput::JoyZ( int index ){
	switch( index ){
	case 0:return joyPos[2];
	case 1:return joyPos[5];
	}
	return 0;
}

float gxtkInput::TouchX( int index ){
	return mouseX;
}

float gxtkInput::TouchY( int index ){
	return mouseY;
}

float gxtkInput::AccelX(){
	return 0;
}

float gxtkInput::AccelY(){
	return 0;
}

float gxtkInput::AccelZ(){
	return 0;
}

//***** gxtkAudio *****
static std::vector<ALuint> discarded;

static void FlushDiscarded( gxtkAudio *audio ){
	if( !discarded.size() ) return;
	for( int i=0;i<33;++i ){
		gxtkChannel *chan=&audio->channels[i];
		if( chan->state ){
			int state=0;
			alGetSourcei( chan->source,AL_SOURCE_STATE,&state );
			if( state==AL_STOPPED ) alSourcei( chan->source,AL_BUFFER,0 );
		}
	}
	std::vector<ALuint> out;
	for( int i=0;i<discarded.size();++i ){
		ALuint buf=discarded[i];
		alDeleteBuffers( 1,&buf );
		ALenum err=alGetError();
		if( err==AL_NO_ERROR ){
//			printf( "alDeleteBuffers OK!\n" );fflush( stdout );
		}else{
//			printf( "alDeleteBuffers failed:%i\n" );fflush( stdout );
			out.push_back( buf );
		}
	}
	discarded=out;
}

static void CheckAL(){
	ALenum err=alGetError();
	if( err!=AL_NO_ERROR ){
		printf( "AL Error:%i\n",err );
		fflush( stdout );
	}
}

int gxtkChannel::AL_Source(){
	if( !source ) alGenSources( 1,&source );
	return source;
}

gxtkAudio::gxtkAudio(){
	alDistanceModel( AL_NONE );
	memset( channels,0,sizeof(channels) );
}

void gxtkAudio::mark(){
	for( int i=0;i<33;++i ){
		gxtkChannel *chan=&channels[i];
		if( chan->state!=0 ){
			int state=0;
			alGetSourcei( chan->source,AL_SOURCE_STATE,&state );
			if( state!=AL_STOPPED ) gc_mark( chan->sample );
		}
	}
}

void gxtkAudio::OnSuspend(){
	for( int i=0;i<33;++i ){
		gxtkChannel *chan=&channels[i];
		if( chan->state==1 ){
			int state=0;
			alGetSourcei( chan->source,AL_SOURCE_STATE,&state );
			if( state==AL_PLAYING ) alSourcePause( chan->source );
		}
	}
}

void gxtkAudio::OnResume(){
	for( int i=0;i<33;++i ){
		gxtkChannel *chan=&channels[i];
		if( chan->state==1 ){
			int state=0;
			alGetSourcei( chan->source,AL_SOURCE_STATE,&state );
			if( state==AL_PAUSED ) alSourcePlay( chan->source );
		}
	}
}

gxtkSample *gxtkAudio::LoadSample( String path ){

	FlushDiscarded( this );
	
	int length=0;
	int channels=0;
	int format=0;
	int hertz=0;
	unsigned char *data=loadSound( path,&length,&channels,&format,&hertz );
	if( !data ) return 0;
	
	int al_format=0;
	if( format==1 && channels==1 ){
		al_format=AL_FORMAT_MONO8;
	}else if( format==1 && channels==2 ){
		al_format=AL_FORMAT_STEREO8;
	}else if( format==2 && channels==1 ){
		al_format=AL_FORMAT_MONO16;
	}else if( format==2 && channels==2 ){
		al_format=AL_FORMAT_STEREO16;
	}
	
	int size=length*channels*format;
	
	ALuint al_buffer;
	alGenBuffers( 1,&al_buffer );
	alBufferData( al_buffer,al_format,data,size,hertz );
	unloadSound( data );

	return new gxtkSample( al_buffer );
}

int gxtkAudio::PlaySample( gxtkSample *sample,int channel,int flags ){
	gxtkChannel *chan=&channels[channel];
	
	chan->AL_Source();
	
	alSourceStop( chan->source );
	alSourcei( chan->source,AL_BUFFER,sample->al_buffer );
	alSourcei( chan->source,AL_LOOPING,flags ? 1 : 0 );
	alSourcePlay( chan->source );
	
	gc_assign( chan->sample,sample );

	chan->flags=flags;
	chan->state=1;

	return 0;
}

int gxtkAudio::StopChannel( int channel ){
	gxtkChannel *chan=&channels[channel];

	if( chan->state!=0 ){
		alSourceStop( chan->source );
		chan->state=0;
	}
	return 0;
}

int gxtkAudio::PauseChannel( int channel ){
	gxtkChannel *chan=&channels[channel];

	if( chan->state==1 ){
		int state=0;
		alGetSourcei( chan->source,AL_SOURCE_STATE,&state );
		if( state==AL_STOPPED ){
			chan->state=0;
		}else{
			alSourcePause( chan->source );
			chan->state=2;
		}
	}
	return 0;
}

int gxtkAudio::ResumeChannel( int channel ){
	gxtkChannel *chan=&channels[channel];

	if( chan->state==2 ){
		alSourcePlay( chan->source );
		chan->state=1;
	}
	return 0;
}

int gxtkAudio::ChannelState( int channel ){
	gxtkChannel *chan=&channels[channel];
	
	if( chan->state==1 ){
		int state=0;
		alGetSourcei( chan->source,AL_SOURCE_STATE,&state );
		if( state==AL_STOPPED ) chan->state=0;
	}
	return chan->state;
}

int gxtkAudio::SetVolume( int channel,float volume ){
	gxtkChannel *chan=&channels[channel];

	alSourcef( chan->AL_Source(),AL_GAIN,volume );
	return 0;
}

int gxtkAudio::SetPan( int channel,float pan ){
	gxtkChannel *chan=&channels[channel];

	alSource3f( chan->AL_Source(),AL_POSITION,pan,0,0 );
	return 0;
}

int gxtkAudio::SetRate( int channel,float rate ){
	gxtkChannel *chan=&channels[channel];

	alSourcef( chan->AL_Source(),AL_PITCH,rate );
	return 0;
}

int gxtkAudio::PlayMusic( String path,int flags ){
	StopMusic();
	
	gxtkSample *music=LoadSample( path );
	if( !music ) return -1;
	
	PlaySample( music,32,flags );
	return 0;
}

int gxtkAudio::StopMusic(){
	StopChannel( 32 );
	return 0;
}

int gxtkAudio::PauseMusic(){
	PauseChannel( 32 );
	return 0;
}

int gxtkAudio::ResumeMusic(){
	ResumeChannel( 32 );
	return 0;
}

int gxtkAudio::MusicState(){
	return ChannelState( 32 );
}

int gxtkAudio::SetMusicVolume( float volume ){
	SetVolume( 32,volume );
	return 0;
}

//***** gxtkSample *****

gxtkSample::gxtkSample( ALuint buf ):al_buffer(buf){
}

gxtkSample::~gxtkSample(){
	Discard();
}

int gxtkSample::Discard(){
	if( al_buffer ){
		discarded.push_back( al_buffer );
		al_buffer=0;
	}
	return 0;
}
#include <ctime>

class util {
public:
    int static GetTimestamp() {
        return std::time(0);
    }
};
class bb_directorevents_DirectorEvents;
class bb_router_Router;
class bb_partial_Partial;
class bb_routerevents_RouterEvents;
class bb_scene_Scene;
class bb_introscene_IntroScene;
class bb_map_Map;
class bb_map_StringMap;
class bb_map_Node;
class bb_map_Map2;
class bb_map_StringMap2;
class bb_map_Node2;
class bb_menuscene_MenuScene;
class bb_highscorescene_HighscoreScene;
class bb_gamescene_GameScene;
class bb_gameoverscene_GameOverScene;
class bb_pausescene_PauseScene;
class bb_newhighscorescene_NewHighscoreScene;
class bb_app_App;
class bb_sizeable_Sizeable;
class bb_director_Director;
class bb_list_List;
class bb_list_Node;
class bb_list_HeadNode;
class bb_app_AppDevice;
class bb_graphics_GraphicsContext;
class bb_vector2d_Vector2D;
class bb_inputcontroller_InputController;
class bb_fanout_FanOut;
class bb_list_List2;
class bb_list_Node2;
class bb_list_HeadNode2;
class bb_list_Enumerator;
class bb_graphics_Image;
class bb_graphics_Frame;
class bb_positionable_Positionable;
class bb_baseobject_BaseObject;
class bb_sprite_Sprite;
class bb_appirater_Appirater;
class bb_angelfont2_AngelFont;
class bb_kernpair_KernPair;
class bb_map_Map3;
class bb_map_StringMap3;
class bb_map_Node3;
class bb_char_Char;
class bb_map_Map4;
class bb_map_StringMap4;
class bb_map_Node4;
class bb_persistable_Persistable;
class bb_highscore_Highscore;
class bb_highscore_IntHighscore;
class bb_gamehighscore_GameHighscore;
class bb_score_Score;
class bb_list_List3;
class bb_list_Node3;
class bb_list_HeadNode3;
class bb_list_Enumerator2;
class bb_statestore_StateStore;
class bb_chute_Chute;
class bb_severity_Severity;
class bb_slider_Slider;
class bb_font_Font;
class bb_angelfont_AngelFont;
class bb_color_Color;
class bb_map_Map5;
class bb_map_StringMap5;
class bb_map_Node5;
class bb_animation_Animation;
class bb_fader_Fader;
class bb_fader_FaderScale;
class bb_transition_Transition;
class bb_transition_TransitionInCubic;
class bb_transition_TransitionLinear;
class bb_stack_Stack;
class bb_stack_IntStack;
class bb_list_List4;
class bb_list_IntList;
class bb_list_Node4;
class bb_list_HeadNode4;
class bb_set_Set;
class bb_set_IntSet;
class bb_map_Map6;
class bb_map_IntMap;
class bb_map_Node6;
class bb_list_Enumerator3;
class bb_textinput_TextInput;
class bb_deltatimer_DeltaTimer;
class bb_touchevent_TouchEvent;
class bb_list_List5;
class bb_list_Node5;
class bb_list_HeadNode5;
class bb_keyevent_KeyEvent;
class bb_map_Map7;
class bb_map_IntMap2;
class bb_map_Node7;
class bb_map_MapValues;
class bb_map_ValueEnumerator;
class bb_shape_Shape;
class bb_stack_Stack2;
class bb_directorevents_DirectorEvents : public virtual gc_interface{
	public:
	virtual void m_OnCreate(bb_director_Director*)=0;
	virtual void m_OnLoading()=0;
	virtual void m_OnUpdate(Float,Float)=0;
	virtual void m_OnTouchDown(bb_touchevent_TouchEvent*)=0;
	virtual void m_OnTouchUp(bb_touchevent_TouchEvent*)=0;
	virtual void m_OnTouchMove(bb_touchevent_TouchEvent*)=0;
	virtual void m_OnKeyDown(bb_keyevent_KeyEvent*)=0;
	virtual void m_OnKeyUp(bb_keyevent_KeyEvent*)=0;
	virtual void m_OnKeyPress(bb_keyevent_KeyEvent*)=0;
	virtual void m_OnResume(int)=0;
	virtual void m_OnSuspend()=0;
	virtual void m_OnRender()=0;
};
class bb_router_Router : public Object,public virtual bb_directorevents_DirectorEvents{
	public:
	bb_map_StringMap* f_handlers;
	bb_map_StringMap2* f_routers;
	String f__currentName;
	bb_directorevents_DirectorEvents* f__current;
	bb_directorevents_DirectorEvents* f__previous;
	String f__previousName;
	bb_director_Director* f_director;
	bb_list_List* f_created;
	bb_router_Router();
	bb_router_Router* g_new();
	virtual void m_Add(String,bb_directorevents_DirectorEvents*);
	virtual bb_directorevents_DirectorEvents* m_Get(String);
	virtual void m_DispatchOnCreate();
	virtual void m_Goto(String);
	virtual void m_OnCreate(bb_director_Director*);
	virtual void m_OnLoading();
	virtual void m_OnUpdate(Float,Float);
	virtual void m_OnRender();
	virtual void m_OnSuspend();
	virtual void m_OnResume(int);
	virtual void m_OnKeyDown(bb_keyevent_KeyEvent*);
	virtual void m_OnKeyPress(bb_keyevent_KeyEvent*);
	virtual void m_OnKeyUp(bb_keyevent_KeyEvent*);
	virtual void m_OnTouchDown(bb_touchevent_TouchEvent*);
	virtual void m_OnTouchMove(bb_touchevent_TouchEvent*);
	virtual void m_OnTouchUp(bb_touchevent_TouchEvent*);
	virtual bb_directorevents_DirectorEvents* m_previous();
	virtual String m_previousName();
	void mark();
	String debug();
};
String dbg_type(bb_router_Router**p){return "Router";}
class bb_partial_Partial : public Object,public virtual bb_directorevents_DirectorEvents{
	public:
	bb_director_Director* f__director;
	bb_partial_Partial();
	bb_partial_Partial* g_new();
	virtual void m_OnCreate(bb_director_Director*);
	virtual bb_director_Director* m_director();
	virtual void m_OnRender();
	virtual void m_OnUpdate(Float,Float);
	virtual void m_OnKeyUp(bb_keyevent_KeyEvent*);
	virtual void m_OnLoading();
	virtual void m_OnSuspend();
	virtual void m_OnResume(int);
	virtual void m_OnKeyDown(bb_keyevent_KeyEvent*);
	virtual void m_OnKeyPress(bb_keyevent_KeyEvent*);
	virtual void m_OnTouchDown(bb_touchevent_TouchEvent*);
	virtual void m_OnTouchMove(bb_touchevent_TouchEvent*);
	virtual void m_OnTouchUp(bb_touchevent_TouchEvent*);
	void mark();
	String debug();
};
String dbg_type(bb_partial_Partial**p){return "Partial";}
class bb_routerevents_RouterEvents : public virtual gc_interface{
	public:
	virtual void m_OnLeave()=0;
	virtual void m_OnEnter()=0;
};
class bb_scene_Scene : public bb_partial_Partial,public virtual bb_routerevents_RouterEvents{
	public:
	bb_fanout_FanOut* f__layer;
	bb_router_Router* f__router;
	bb_scene_Scene();
	bb_scene_Scene* g_new();
	virtual void m_OnEnter();
	virtual void m_OnLeave();
	static bb_graphics_Image* g_blend;
	virtual void m_OnCreate(bb_director_Director*);
	virtual bb_fanout_FanOut* m_layer();
	virtual void m_OnLoading();
	virtual void m_OnUpdate(Float,Float);
	virtual void m_OnRender();
	virtual void m_OnSuspend();
	virtual void m_OnResume(int);
	virtual void m_OnKeyDown(bb_keyevent_KeyEvent*);
	virtual void m_OnKeyPress(bb_keyevent_KeyEvent*);
	virtual void m_OnKeyUp(bb_keyevent_KeyEvent*);
	virtual void m_OnTouchDown(bb_touchevent_TouchEvent*);
	virtual void m_OnTouchMove(bb_touchevent_TouchEvent*);
	virtual void m_OnTouchUp(bb_touchevent_TouchEvent*);
	virtual bb_router_Router* m_router();
	virtual void m_RenderBlend();
	void mark();
	String debug();
};
String dbg_type(bb_scene_Scene**p){return "Scene";}
class bb_introscene_IntroScene : public bb_scene_Scene{
	public:
	bb_sprite_Sprite* f_background;
	int f_timer;
	bb_introscene_IntroScene();
	bb_introscene_IntroScene* g_new();
	virtual void m_OnCreate(bb_director_Director*);
	virtual void m_OnUpdate(Float,Float);
	virtual void m_OnRender();
	void mark();
	String debug();
};
String dbg_type(bb_introscene_IntroScene**p){return "IntroScene";}
class bb_map_Map : public Object{
	public:
	bb_map_Node* f_root;
	bb_map_Map();
	bb_map_Map* g_new();
	virtual int m_Compare(String,String)=0;
	virtual bb_map_Node* m_FindNode(String);
	virtual bool m_Contains(String);
	virtual int m_RotateLeft(bb_map_Node*);
	virtual int m_RotateRight(bb_map_Node*);
	virtual int m_InsertFixup(bb_map_Node*);
	virtual bool m_Set(String,bb_directorevents_DirectorEvents*);
	virtual bb_directorevents_DirectorEvents* m_Get(String);
	void mark();
	String debug();
};
String dbg_type(bb_map_Map**p){return "Map";}
class bb_map_StringMap : public bb_map_Map{
	public:
	bb_map_StringMap();
	bb_map_StringMap* g_new();
	virtual int m_Compare(String,String);
	void mark();
	String debug();
};
String dbg_type(bb_map_StringMap**p){return "StringMap";}
class bb_map_Node : public Object{
	public:
	String f_key;
	bb_map_Node* f_right;
	bb_map_Node* f_left;
	bb_directorevents_DirectorEvents* f_value;
	int f_color;
	bb_map_Node* f_parent;
	bb_map_Node();
	bb_map_Node* g_new(String,bb_directorevents_DirectorEvents*,int,bb_map_Node*);
	bb_map_Node* g_new2();
	void mark();
	String debug();
};
String dbg_type(bb_map_Node**p){return "Node";}
class bb_map_Map2 : public Object{
	public:
	bb_map_Node2* f_root;
	bb_map_Map2();
	bb_map_Map2* g_new();
	virtual int m_Compare(String,String)=0;
	virtual int m_RotateLeft2(bb_map_Node2*);
	virtual int m_RotateRight2(bb_map_Node2*);
	virtual int m_InsertFixup2(bb_map_Node2*);
	virtual bool m_Set2(String,bb_routerevents_RouterEvents*);
	virtual bb_map_Node2* m_FindNode(String);
	virtual bb_routerevents_RouterEvents* m_Get(String);
	void mark();
	String debug();
};
String dbg_type(bb_map_Map2**p){return "Map";}
class bb_map_StringMap2 : public bb_map_Map2{
	public:
	bb_map_StringMap2();
	bb_map_StringMap2* g_new();
	virtual int m_Compare(String,String);
	void mark();
	String debug();
};
String dbg_type(bb_map_StringMap2**p){return "StringMap";}
class bb_map_Node2 : public Object{
	public:
	String f_key;
	bb_map_Node2* f_right;
	bb_map_Node2* f_left;
	bb_routerevents_RouterEvents* f_value;
	int f_color;
	bb_map_Node2* f_parent;
	bb_map_Node2();
	bb_map_Node2* g_new(String,bb_routerevents_RouterEvents*,int,bb_map_Node2*);
	bb_map_Node2* g_new2();
	void mark();
	String debug();
};
String dbg_type(bb_map_Node2**p){return "Node";}
class bb_menuscene_MenuScene : public bb_scene_Scene{
	public:
	bb_sprite_Sprite* f_easy;
	bb_sprite_Sprite* f_normal;
	bb_sprite_Sprite* f_normalActive;
	bb_sprite_Sprite* f_advanced;
	bb_sprite_Sprite* f_advancedActive;
	bb_sprite_Sprite* f_highscore;
	bb_sprite_Sprite* f_lock;
	bool f_isLocked;
	bool f_paymentProcessing;
	bb_font_Font* f_waitingText;
	bb_sprite_Sprite* f_waitingImage;
	bb_menuscene_MenuScene();
	bb_menuscene_MenuScene* g_new();
	virtual void m_ToggleLock();
	virtual void m_OnCreate(bb_director_Director*);
	virtual void m_OnResume(int);
	virtual void m_PlayEasy();
	virtual void m_InitializeWaitingImages();
	virtual void m_HandleLocked();
	virtual void m_PlayNormal();
	virtual void m_PlayAdvanced();
	virtual void m_OnTouchDown(bb_touchevent_TouchEvent*);
	virtual void m_OnKeyDown(bb_keyevent_KeyEvent*);
	virtual void m_OnUpdate(Float,Float);
	virtual void m_OnRender();
	void mark();
	String debug();
};
String dbg_type(bb_menuscene_MenuScene**p){return "MenuScene";}
class bb_highscorescene_HighscoreScene : public bb_scene_Scene,public virtual bb_routerevents_RouterEvents{
	public:
	bb_angelfont2_AngelFont* f_font;
	bb_sprite_Sprite* f_background;
	bb_gamehighscore_GameHighscore* f_highscore;
	int f_lastScoreValue;
	String f_lastScoreKey;
	bb_highscorescene_HighscoreScene();
	bb_highscorescene_HighscoreScene* g_new();
	virtual void m_OnCreate(bb_director_Director*);
	virtual void m_OnEnter();
	virtual void m_OnLeave();
	virtual void m_DrawEntries();
	virtual void m_OnRender();
	virtual void m_OnKeyDown(bb_keyevent_KeyEvent*);
	virtual void m_OnTouchDown(bb_touchevent_TouchEvent*);
	void mark();
	String debug();
};
String dbg_type(bb_highscorescene_HighscoreScene**p){return "HighscoreScene";}
class bb_gamescene_GameScene : public bb_scene_Scene,public virtual bb_routerevents_RouterEvents{
	public:
	bb_chute_Chute* f_chute;
	bb_fanout_FanOut* f_lowerShapes;
	bb_severity_Severity* f_severity;
	bb_slider_Slider* f_slider;
	bb_fanout_FanOut* f_upperShapes;
	bb_fanout_FanOut* f_errorAnimations;
	bb_sprite_Sprite* f_pauseButton;
	bb_font_Font* f_scoreFont;
	bb_font_Font* f_comboFont;
	bb_animation_Animation* f_comboAnimation;
	bb_font_Font* f_newHighscoreFont;
	bb_animation_Animation* f_newHighscoreAnimation;
	Float f_checkPosY;
	int f_pauseTime;
	bool f_ignoreFirstTouchUp;
	int f_score;
	int f_minHighscore;
	bool f_isNewHighscoreRecord;
	bool f_collisionCheckedLastUpdate;
	bb_stack_Stack2* f_falseSpriteStrack;
	Array<int > f_lastMatchTime;
	bool f_comboPending;
	int f_comboPendingSince;
	Float f_lastSlowUpdate;
	bb_gamescene_GameScene();
	bb_gamescene_GameScene* g_new();
	virtual void m_OnCreate(bb_director_Director*);
	virtual void m_OnEnterPaused();
	virtual void m_LoadHighscoreMinValue();
	virtual void m_OnEnter();
	virtual void m_OnLeave();
	virtual bool m_HandleGameOver();
	virtual void m_OnMissmatch(bb_shape_Shape*);
	virtual void m_IncrementScore(int);
	virtual void m_OnMatch(bb_shape_Shape*);
	virtual void m_CheckShapeCollisions();
	virtual void m_DetectComboTrigger();
	virtual void m_DropNewShapeIfRequested();
	virtual void m_RemoveLostShapes();
	virtual void m_RemoveFinishedErroAnimations();
	virtual void m_OnUpdate(Float,Float);
	virtual void m_StartPause();
	virtual void m_FastDropMatchingShapes();
	virtual void m_OnKeyDown(bb_keyevent_KeyEvent*);
	virtual void m_OnSuspend();
	virtual void m_OnTouchDown(bb_touchevent_TouchEvent*);
	virtual void m_HandleSliderSwipe(bb_touchevent_TouchEvent*);
	virtual void m_HandleBackgroundSwipe(bb_touchevent_TouchEvent*);
	virtual void m_OnTouchUp(bb_touchevent_TouchEvent*);
	virtual void m_OnTouchMove(bb_touchevent_TouchEvent*);
	virtual void m_OnPauseLeaveGame();
	void mark();
	String debug();
};
String dbg_type(bb_gamescene_GameScene**p){return "GameScene";}
class bb_gameoverscene_GameOverScene : public bb_scene_Scene{
	public:
	bb_sprite_Sprite* f_main;
	bb_sprite_Sprite* f_small;
	bb_gameoverscene_GameOverScene();
	bb_gameoverscene_GameOverScene* g_new();
	virtual void m_OnCreate(bb_director_Director*);
	virtual void m_OnRender();
	virtual void m_OnTouchDown(bb_touchevent_TouchEvent*);
	virtual void m_OnKeyDown(bb_keyevent_KeyEvent*);
	void mark();
	String debug();
};
String dbg_type(bb_gameoverscene_GameOverScene**p){return "GameOverScene";}
class bb_pausescene_PauseScene : public bb_scene_Scene{
	public:
	bb_sprite_Sprite* f_overlay;
	bb_sprite_Sprite* f_continueBtn;
	bb_sprite_Sprite* f_quitBtn;
	bb_pausescene_PauseScene();
	bb_pausescene_PauseScene* g_new();
	virtual void m_OnCreate(bb_director_Director*);
	virtual void m_OnEnter();
	virtual void m_OnRender();
	virtual void m_OnKeyDown(bb_keyevent_KeyEvent*);
	virtual void m_OnTouchDown(bb_touchevent_TouchEvent*);
	void mark();
	String debug();
};
String dbg_type(bb_pausescene_PauseScene**p){return "PauseScene";}
class bb_newhighscorescene_NewHighscoreScene : public bb_scene_Scene{
	public:
	bb_sprite_Sprite* f_continueBtn;
	bb_textinput_TextInput* f_input;
	int f_score;
	bb_gamehighscore_GameHighscore* f_highscore;
	bb_newhighscorescene_NewHighscoreScene();
	bb_newhighscorescene_NewHighscoreScene* g_new();
	virtual void m_OnCreate(bb_director_Director*);
	virtual void m_OnEnter();
	virtual void m_OnRender();
	virtual void m_SaveAndContinue();
	virtual void m_OnKeyDown(bb_keyevent_KeyEvent*);
	virtual void m_OnTouchDown(bb_touchevent_TouchEvent*);
	void mark();
	String debug();
};
String dbg_type(bb_newhighscorescene_NewHighscoreScene**p){return "NewHighscoreScene";}
class bb_app_App : public Object{
	public:
	bb_app_App();
	bb_app_App* g_new();
	virtual int m_OnCreate2();
	virtual int m_OnUpdate2();
	virtual int m_OnSuspend();
	virtual int m_OnResume2();
	virtual int m_OnRender();
	virtual int m_OnLoading();
	void mark();
	String debug();
};
String dbg_type(bb_app_App**p){return "App";}
class bb_sizeable_Sizeable : public virtual gc_interface{
	public:
	virtual bb_vector2d_Vector2D* m_center()=0;
};
class bb_director_Director : public bb_app_App,public virtual bb_sizeable_Sizeable{
	public:
	bb_vector2d_Vector2D* f__size;
	bb_vector2d_Vector2D* f__center;
	bb_vector2d_Vector2D* f__device;
	bb_vector2d_Vector2D* f__scale;
	bb_inputcontroller_InputController* f__inputController;
	bb_directorevents_DirectorEvents* f__handler;
	bool f_onCreateDispatched;
	bool f_appOnCreateCatched;
	bb_deltatimer_DeltaTimer* f_deltaTimer;
	bb_director_Director();
	virtual bb_vector2d_Vector2D* m_size();
	virtual void m_RecalculateScale();
	virtual void m_size2(bb_vector2d_Vector2D*);
	bb_director_Director* g_new(int,int);
	bb_director_Director* g_new2();
	virtual bb_inputcontroller_InputController* m_inputController();
	virtual void m_DispatchOnCreate();
	virtual void m_Run(bb_directorevents_DirectorEvents*);
	virtual bb_directorevents_DirectorEvents* m_handler();
	virtual bb_vector2d_Vector2D* m_center();
	virtual bb_vector2d_Vector2D* m_scale();
	virtual int m_OnCreate2();
	virtual int m_OnLoading();
	virtual int m_OnUpdate2();
	virtual int m_OnResume2();
	virtual int m_OnSuspend();
	virtual int m_OnRender();
	void mark();
	String debug();
};
String dbg_type(bb_director_Director**p){return "Director";}
class bb_list_List : public Object{
	public:
	bb_list_Node* f__head;
	bb_list_List();
	bb_list_List* g_new();
	virtual bb_list_Node* m_AddLast(String);
	bb_list_List* g_new2(Array<String >);
	virtual bool m_Equals(String,String);
	virtual bool m_Contains(String);
	void mark();
	String debug();
};
String dbg_type(bb_list_List**p){return "List";}
class bb_list_Node : public Object{
	public:
	bb_list_Node* f__succ;
	bb_list_Node* f__pred;
	String f__data;
	bb_list_Node();
	bb_list_Node* g_new(bb_list_Node*,bb_list_Node*,String);
	bb_list_Node* g_new2();
	void mark();
	String debug();
};
String dbg_type(bb_list_Node**p){return "Node";}
class bb_list_HeadNode : public bb_list_Node{
	public:
	bb_list_HeadNode();
	bb_list_HeadNode* g_new();
	void mark();
	String debug();
};
String dbg_type(bb_list_HeadNode**p){return "HeadNode";}
class bb_app_AppDevice : public gxtkApp{
	public:
	bb_app_App* f_app;
	int f_updateRate;
	bb_app_AppDevice();
	bb_app_AppDevice* g_new(bb_app_App*);
	bb_app_AppDevice* g_new2();
	virtual int OnCreate();
	virtual int OnUpdate();
	virtual int OnSuspend();
	virtual int OnResume();
	virtual int OnRender();
	virtual int OnLoading();
	virtual int SetUpdateRate(int);
	void mark();
	String debug();
};
String dbg_type(bb_app_AppDevice**p){return "AppDevice";}
class bb_graphics_GraphicsContext : public Object{
	public:
	gxtkGraphics* f_device;
	bb_graphics_Image* f_defaultFont;
	bb_graphics_Image* f_font;
	int f_firstChar;
	int f_matrixSp;
	Float f_ix;
	Float f_iy;
	Float f_jx;
	Float f_jy;
	Float f_tx;
	Float f_ty;
	int f_tformed;
	int f_matDirty;
	Float f_color_r;
	Float f_color_g;
	Float f_color_b;
	Float f_alpha;
	int f_blend;
	Float f_scissor_x;
	Float f_scissor_y;
	Float f_scissor_width;
	Float f_scissor_height;
	Array<Float > f_matrixStack;
	bb_graphics_GraphicsContext();
	bb_graphics_GraphicsContext* g_new(gxtkGraphics*);
	bb_graphics_GraphicsContext* g_new2();
	void mark();
	String debug();
};
String dbg_type(bb_graphics_GraphicsContext**p){return "GraphicsContext";}
extern bb_graphics_GraphicsContext* bb_graphics_context;
int bb_graphics_SetGraphicsContext(bb_graphics_GraphicsContext*);
extern gxtkInput* bb_input_device;
int bb_input_SetInputDevice(gxtkInput*);
extern gxtkAudio* bb_audio_device;
int bb_audio_SetAudioDevice(gxtkAudio*);
extern bb_app_AppDevice* bb_app_device;
class bb_vector2d_Vector2D : public Object{
	public:
	Float f_x;
	Float f_y;
	bb_vector2d_Vector2D();
	bb_vector2d_Vector2D* g_new(Float,Float);
	virtual bb_vector2d_Vector2D* m_Copy();
	virtual bb_vector2d_Vector2D* m_Div(bb_vector2d_Vector2D*);
	virtual bb_vector2d_Vector2D* m_Div2(Float);
	virtual bb_vector2d_Vector2D* m_Sub(bb_vector2d_Vector2D*);
	virtual bb_vector2d_Vector2D* m_Sub2(Float);
	virtual bb_vector2d_Vector2D* m_Add2(bb_vector2d_Vector2D*);
	virtual bb_vector2d_Vector2D* m_Add3(Float);
	virtual Float m_Length();
	virtual bb_vector2d_Vector2D* m_Normalize();
	virtual bb_vector2d_Vector2D* m_Mul(bb_vector2d_Vector2D*);
	virtual bb_vector2d_Vector2D* m_Mul2(Float);
	void mark();
	String debug();
};
String dbg_type(bb_vector2d_Vector2D**p){return "Vector2D";}
class bb_inputcontroller_InputController : public Object{
	public:
	bool f_trackKeys;
	bool f_trackTouch;
	int f__touchFingers;
	int f_touchRetainSize;
	bb_vector2d_Vector2D* f_scale;
	Array<bool > f_isTouchDown;
	Array<bb_touchevent_TouchEvent* > f_touchEvents;
	Array<bool > f_touchDownDispatched;
	Float f_touchMinDistance;
	bool f_keyboardEnabled;
	bb_set_IntSet* f_keysActive;
	bb_map_IntMap2* f_keyEvents;
	bb_set_IntSet* f_dispatchedKeyEvents;
	bb_inputcontroller_InputController();
	bb_inputcontroller_InputController* g_new();
	virtual void m_touchFingers(int);
	virtual void m_ReadTouch();
	virtual void m_ProcessTouch(bb_directorevents_DirectorEvents*);
	virtual void m_ReadKeys();
	virtual void m_ProcessKeys(bb_directorevents_DirectorEvents*);
	virtual void m_OnUpdate3(bb_directorevents_DirectorEvents*);
	void mark();
	String debug();
};
String dbg_type(bb_inputcontroller_InputController**p){return "InputController";}
int bbMain();
class bb_fanout_FanOut : public Object,public virtual bb_directorevents_DirectorEvents{
	public:
	bb_list_List2* f_objects;
	bb_fanout_FanOut();
	bb_fanout_FanOut* g_new();
	virtual void m_OnCreate(bb_director_Director*);
	virtual void m_Add4(bb_directorevents_DirectorEvents*);
	virtual void m_Remove(bb_directorevents_DirectorEvents*);
	virtual void m_Clear();
	virtual void m_OnLoading();
	virtual void m_OnUpdate(Float,Float);
	virtual void m_OnRender();
	virtual void m_OnSuspend();
	virtual void m_OnResume(int);
	virtual void m_OnKeyDown(bb_keyevent_KeyEvent*);
	virtual void m_OnKeyPress(bb_keyevent_KeyEvent*);
	virtual void m_OnKeyUp(bb_keyevent_KeyEvent*);
	virtual void m_OnTouchDown(bb_touchevent_TouchEvent*);
	virtual void m_OnTouchMove(bb_touchevent_TouchEvent*);
	virtual void m_OnTouchUp(bb_touchevent_TouchEvent*);
	virtual int m_Count();
	virtual bb_list_Enumerator* m_ObjectEnumerator();
	void mark();
	String debug();
};
String dbg_type(bb_fanout_FanOut**p){return "FanOut";}
class bb_list_List2 : public Object{
	public:
	bb_list_Node2* f__head;
	bb_list_List2();
	bb_list_List2* g_new();
	virtual bb_list_Node2* m_AddLast2(bb_directorevents_DirectorEvents*);
	bb_list_List2* g_new2(Array<bb_directorevents_DirectorEvents* >);
	virtual bb_list_Enumerator* m_ObjectEnumerator();
	virtual bool m_Equals2(bb_directorevents_DirectorEvents*,bb_directorevents_DirectorEvents*);
	virtual int m_RemoveEach(bb_directorevents_DirectorEvents*);
	virtual int m_Clear();
	virtual int m_Count();
	void mark();
	String debug();
};
String dbg_type(bb_list_List2**p){return "List";}
class bb_list_Node2 : public Object{
	public:
	bb_list_Node2* f__succ;
	bb_list_Node2* f__pred;
	bb_directorevents_DirectorEvents* f__data;
	bb_list_Node2();
	bb_list_Node2* g_new(bb_list_Node2*,bb_list_Node2*,bb_directorevents_DirectorEvents*);
	bb_list_Node2* g_new2();
	virtual int m_Remove2();
	void mark();
	String debug();
};
String dbg_type(bb_list_Node2**p){return "Node";}
class bb_list_HeadNode2 : public bb_list_Node2{
	public:
	bb_list_HeadNode2();
	bb_list_HeadNode2* g_new();
	void mark();
	String debug();
};
String dbg_type(bb_list_HeadNode2**p){return "HeadNode";}
class bb_list_Enumerator : public Object{
	public:
	bb_list_List2* f__list;
	bb_list_Node2* f__curr;
	bb_list_Enumerator();
	bb_list_Enumerator* g_new(bb_list_List2*);
	bb_list_Enumerator* g_new2();
	virtual bool m_HasNext();
	virtual bb_directorevents_DirectorEvents* m_NextObject();
	void mark();
	String debug();
};
String dbg_type(bb_list_Enumerator**p){return "Enumerator";}
class bb_graphics_Image : public Object{
	public:
	gxtkSurface* f_surface;
	int f_width;
	int f_height;
	Array<bb_graphics_Frame* > f_frames;
	int f_flags;
	Float f_tx;
	Float f_ty;
	bb_graphics_Image* f_source;
	bb_graphics_Image();
	static int g_DefaultFlags;
	bb_graphics_Image* g_new();
	virtual int m_SetHandle(Float,Float);
	virtual int m_ApplyFlags(int);
	virtual bb_graphics_Image* m_Load(String,int,int);
	virtual bb_graphics_Image* m_Grab(int,int,int,int,int,int,bb_graphics_Image*);
	virtual bb_graphics_Image* m_GrabImage(int,int,int,int,int,int);
	virtual int m_Width();
	virtual int m_Height();
	void mark();
	String debug();
};
String dbg_type(bb_graphics_Image**p){return "Image";}
class bb_graphics_Frame : public Object{
	public:
	int f_x;
	int f_y;
	bb_graphics_Frame();
	bb_graphics_Frame* g_new(int,int);
	bb_graphics_Frame* g_new2();
	void mark();
	String debug();
};
String dbg_type(bb_graphics_Frame**p){return "Frame";}
bb_graphics_Image* bb_graphics_LoadImage(String,int,int);
bb_graphics_Image* bb_graphics_LoadImage2(String,int,int,int,int);
class bb_positionable_Positionable : public virtual gc_interface{
	public:
	virtual bb_vector2d_Vector2D* m_pos()=0;
	virtual void m_pos2(bb_vector2d_Vector2D*)=0;
};
class bb_baseobject_BaseObject : public bb_partial_Partial,public virtual bb_positionable_Positionable,public virtual bb_sizeable_Sizeable{
	public:
	bb_vector2d_Vector2D* f__pos;
	bb_vector2d_Vector2D* f__size;
	bb_vector2d_Vector2D* f__center;
	bb_baseobject_BaseObject();
	bb_baseobject_BaseObject* g_new();
	virtual bb_vector2d_Vector2D* m_pos();
	virtual void m_pos2(bb_vector2d_Vector2D*);
	virtual bb_vector2d_Vector2D* m_size();
	virtual void m_size2(bb_vector2d_Vector2D*);
	virtual bb_vector2d_Vector2D* m_center();
	virtual void m_Center(bb_sizeable_Sizeable*);
	virtual void m_CenterX(bb_sizeable_Sizeable*);
	void mark();
	String debug();
};
String dbg_type(bb_baseobject_BaseObject**p){return "BaseObject";}
class bb_sprite_Sprite : public bb_baseobject_BaseObject{
	public:
	bb_graphics_Image* f_image;
	int f_frameCount;
	int f_frameSpeed;
	Float f_rotation;
	bb_vector2d_Vector2D* f_scale;
	int f_currentFrame;
	bool f_loopAnimation;
	int f_frameTimer;
	bb_sprite_Sprite();
	virtual void m_InitVectors(int,int,bb_vector2d_Vector2D*);
	bb_sprite_Sprite* g_new(String,bb_vector2d_Vector2D*);
	bb_sprite_Sprite* g_new2(String,int,int,int,int,bb_vector2d_Vector2D*);
	bb_sprite_Sprite* g_new3();
	virtual void m_OnRender();
	virtual bool m_animationIsDone();
	virtual void m_OnUpdate(Float,Float);
	virtual bool m_Collide(bb_vector2d_Vector2D*);
	virtual void m_Restart();
	void mark();
	String debug();
};
String dbg_type(bb_sprite_Sprite**p){return "Sprite";}
int bb_iap_InitInAppPurchases(String,Array<String >);
int bb_iap_isProductPurchased(String);
class bb_appirater_Appirater : public Object{
	public:
	bb_appirater_Appirater();
	static void g_Launched();
	void mark();
	String debug();
};
String dbg_type(bb_appirater_Appirater**p){return "Appirater";}
class bb_angelfont2_AngelFont : public Object{
	public:
	String f_iniText;
	bb_map_StringMap3* f_kernPairs;
	Array<bb_char_Char* > f_chars;
	int f_height;
	int f_heightOffset;
	bb_graphics_Image* f_image;
	String f_name;
	int f_xOffset;
	bool f_useKerning;
	bb_angelfont2_AngelFont();
	static String g_error;
	static bb_angelfont2_AngelFont* g_current;
	virtual void m_LoadFont(String);
	static bb_map_StringMap4* g__list;
	bb_angelfont2_AngelFont* g_new(String);
	virtual void m_DrawText(String,int,int);
	virtual int m_TextWidth(String);
	virtual void m_DrawText2(String,int,int,int);
	void mark();
	String debug();
};
String dbg_type(bb_angelfont2_AngelFont**p){return "AngelFont";}
String bb_app_LoadString(String);
class bb_kernpair_KernPair : public Object{
	public:
	String f_first;
	String f_second;
	int f_amount;
	bb_kernpair_KernPair();
	bb_kernpair_KernPair* g_new(int,int,int);
	bb_kernpair_KernPair* g_new2();
	void mark();
	String debug();
};
String dbg_type(bb_kernpair_KernPair**p){return "KernPair";}
class bb_map_Map3 : public Object{
	public:
	bb_map_Node3* f_root;
	bb_map_Map3();
	bb_map_Map3* g_new();
	virtual int m_Compare(String,String)=0;
	virtual int m_RotateLeft3(bb_map_Node3*);
	virtual int m_RotateRight3(bb_map_Node3*);
	virtual int m_InsertFixup3(bb_map_Node3*);
	virtual bool m_Set3(String,bb_kernpair_KernPair*);
	virtual bool m_Insert(String,bb_kernpair_KernPair*);
	virtual bb_map_Node3* m_FindNode(String);
	virtual bool m_Contains(String);
	virtual bb_kernpair_KernPair* m_Get(String);
	void mark();
	String debug();
};
String dbg_type(bb_map_Map3**p){return "Map";}
class bb_map_StringMap3 : public bb_map_Map3{
	public:
	bb_map_StringMap3();
	bb_map_StringMap3* g_new();
	virtual int m_Compare(String,String);
	void mark();
	String debug();
};
String dbg_type(bb_map_StringMap3**p){return "StringMap";}
class bb_map_Node3 : public Object{
	public:
	String f_key;
	bb_map_Node3* f_right;
	bb_map_Node3* f_left;
	bb_kernpair_KernPair* f_value;
	int f_color;
	bb_map_Node3* f_parent;
	bb_map_Node3();
	bb_map_Node3* g_new(String,bb_kernpair_KernPair*,int,bb_map_Node3*);
	bb_map_Node3* g_new2();
	void mark();
	String debug();
};
String dbg_type(bb_map_Node3**p){return "Node";}
class bb_char_Char : public Object{
	public:
	int f_x;
	int f_y;
	int f_width;
	int f_height;
	int f_xOffset;
	int f_yOffset;
	int f_xAdvance;
	bb_char_Char();
	bb_char_Char* g_new(int,int,int,int,int,int,int);
	bb_char_Char* g_new2();
	virtual int m_Draw(bb_graphics_Image*,int,int);
	void mark();
	String debug();
};
String dbg_type(bb_char_Char**p){return "Char";}
class bb_map_Map4 : public Object{
	public:
	bb_map_Node4* f_root;
	bb_map_Map4();
	bb_map_Map4* g_new();
	virtual int m_Compare(String,String)=0;
	virtual int m_RotateLeft4(bb_map_Node4*);
	virtual int m_RotateRight4(bb_map_Node4*);
	virtual int m_InsertFixup4(bb_map_Node4*);
	virtual bool m_Set4(String,bb_angelfont2_AngelFont*);
	virtual bool m_Insert2(String,bb_angelfont2_AngelFont*);
	void mark();
	String debug();
};
String dbg_type(bb_map_Map4**p){return "Map";}
class bb_map_StringMap4 : public bb_map_Map4{
	public:
	bb_map_StringMap4();
	bb_map_StringMap4* g_new();
	virtual int m_Compare(String,String);
	void mark();
	String debug();
};
String dbg_type(bb_map_StringMap4**p){return "StringMap";}
class bb_map_Node4 : public Object{
	public:
	String f_key;
	bb_map_Node4* f_right;
	bb_map_Node4* f_left;
	bb_angelfont2_AngelFont* f_value;
	int f_color;
	bb_map_Node4* f_parent;
	bb_map_Node4();
	bb_map_Node4* g_new(String,bb_angelfont2_AngelFont*,int,bb_map_Node4*);
	bb_map_Node4* g_new2();
	void mark();
	String debug();
};
String dbg_type(bb_map_Node4**p){return "Node";}
class bb_persistable_Persistable : public virtual gc_interface{
	public:
	virtual void m_FromString(String)=0;
	virtual String m_ToString()=0;
};
class bb_highscore_Highscore : public Object,public virtual bb_persistable_Persistable{
	public:
	int f__maxCount;
	bb_list_List3* f_objects;
	bb_highscore_Highscore();
	bb_highscore_Highscore* g_new(int);
	bb_highscore_Highscore* g_new2();
	virtual int m_Count();
	virtual int m_maxCount();
	virtual void m_Sort();
	virtual void m_SizeTrim();
	virtual void m_Add5(String,int);
	virtual bb_score_Score* m_Last();
	virtual void m_FromString(String);
	virtual bb_list_Enumerator2* m_ObjectEnumerator();
	virtual String m_ToString();
	void mark();
	String debug();
};
String dbg_type(bb_highscore_Highscore**p){return "Highscore";}
class bb_highscore_IntHighscore : public bb_highscore_Highscore{
	public:
	bb_highscore_IntHighscore();
	bb_highscore_IntHighscore* g_new(int);
	bb_highscore_IntHighscore* g_new2();
	void mark();
	String debug();
};
String dbg_type(bb_highscore_IntHighscore**p){return "IntHighscore";}
class bb_gamehighscore_GameHighscore : public bb_highscore_IntHighscore{
	public:
	bb_gamehighscore_GameHighscore();
	static Array<int > g_scores;
	virtual void m_LoadNamesAndScores();
	static Array<String > g_names;
	virtual void m_PrefillMissing();
	bb_gamehighscore_GameHighscore* g_new();
	virtual void m_FromString(String);
	void mark();
	String debug();
};
String dbg_type(bb_gamehighscore_GameHighscore**p){return "GameHighscore";}
class bb_score_Score : public Object{
	public:
	String f_key;
	int f_value;
	bb_score_Score();
	bb_score_Score* g_new(String,int);
	bb_score_Score* g_new2();
	void mark();
	String debug();
};
String dbg_type(bb_score_Score**p){return "Score";}
class bb_list_List3 : public Object{
	public:
	bb_list_Node3* f__head;
	bb_list_List3();
	bb_list_List3* g_new();
	virtual bb_list_Node3* m_AddLast3(bb_score_Score*);
	bb_list_List3* g_new2(Array<bb_score_Score* >);
	virtual int m_Count();
	virtual bool m_IsEmpty();
	virtual bb_score_Score* m_First();
	virtual bb_list_Enumerator2* m_ObjectEnumerator();
	virtual bb_list_Node3* m_AddFirst(bb_score_Score*);
	virtual bool m_Equals3(bb_score_Score*,bb_score_Score*);
	virtual int m_RemoveEach2(bb_score_Score*);
	virtual int m_Remove3(bb_score_Score*);
	virtual int m_Clear();
	virtual bb_score_Score* m_RemoveLast();
	virtual bb_score_Score* m_Last();
	void mark();
	String debug();
};
String dbg_type(bb_list_List3**p){return "List";}
class bb_list_Node3 : public Object{
	public:
	bb_list_Node3* f__succ;
	bb_list_Node3* f__pred;
	bb_score_Score* f__data;
	bb_list_Node3();
	bb_list_Node3* g_new(bb_list_Node3*,bb_list_Node3*,bb_score_Score*);
	bb_list_Node3* g_new2();
	virtual bb_list_Node3* m_GetNode();
	virtual bb_list_Node3* m_NextNode();
	virtual int m_Remove2();
	virtual bb_list_Node3* m_PrevNode();
	void mark();
	String debug();
};
String dbg_type(bb_list_Node3**p){return "Node";}
class bb_list_HeadNode3 : public bb_list_Node3{
	public:
	bb_list_HeadNode3();
	bb_list_HeadNode3* g_new();
	virtual bb_list_Node3* m_GetNode();
	void mark();
	String debug();
};
String dbg_type(bb_list_HeadNode3**p){return "HeadNode";}
class bb_list_Enumerator2 : public Object{
	public:
	bb_list_List3* f__list;
	bb_list_Node3* f__curr;
	bb_list_Enumerator2();
	bb_list_Enumerator2* g_new(bb_list_List3*);
	bb_list_Enumerator2* g_new2();
	virtual bool m_HasNext();
	virtual bb_score_Score* m_NextObject();
	void mark();
	String debug();
};
String dbg_type(bb_list_Enumerator2**p){return "Enumerator";}
class bb_statestore_StateStore : public Object{
	public:
	bb_statestore_StateStore();
	static void g_Load(bb_persistable_Persistable*);
	static void g_Save(bb_persistable_Persistable*);
	void mark();
	String debug();
};
String dbg_type(bb_statestore_StateStore**p){return "StateStore";}
String bb_app_LoadState();
class bb_chute_Chute : public bb_baseobject_BaseObject{
	public:
	int f_height;
	bb_graphics_Image* f_bg;
	int f_width;
	bb_graphics_Image* f_bottom;
	bb_severity_Severity* f_severity;
	bb_chute_Chute();
	bb_chute_Chute* g_new();
	virtual void m_Restart();
	virtual void m_OnCreate(bb_director_Director*);
	virtual void m_OnUpdate(Float,Float);
	virtual void m_OnRender();
	virtual int m_Height();
	void mark();
	String debug();
};
String dbg_type(bb_chute_Chute**p){return "Chute";}
class bb_severity_Severity : public Object{
	public:
	int f_nextChuteAdvanceTime;
	int f_nextShapeDropTime;
	int f_lastTime;
	int f_level;
	int f_activatedShapes;
	int f_slowDownDuration;
	bb_stack_IntStack* f_lastTypes;
	Float f_progress;
	Array<int > f_shapeTypes;
	int f_startTime;
	Array<int > f_laneTimes;
	bb_severity_Severity();
	bb_severity_Severity* g_new();
	virtual void m_WarpTime(int);
	virtual void m_ChuteMarkAsAdvanced();
	virtual void m_ShapeDropped();
	virtual void m_RandomizeShapeTypes();
	virtual void m_Restart();
	virtual int m_MinSliderTypes();
	virtual void m_ConfigureSlider(bb_list_IntList*);
	virtual bool m_ChuteShouldAdvance();
	virtual int m_ChuteAdvanceHeight();
	virtual void m_Set5(int);
	virtual void m_OnUpdate(Float,Float);
	virtual bool m_ShapeShouldBeDropped();
	virtual int m_RandomType();
	virtual int m_RandomLane();
	virtual String m_ToString();
	void mark();
	String debug();
};
String dbg_type(bb_severity_Severity**p){return "Severity";}
extern bb_severity_Severity* bb_severity_globalSeverityInstance;
bb_severity_Severity* bb_severity_CurrentSeverity();
class bb_slider_Slider : public bb_baseobject_BaseObject{
	public:
	Array<bb_graphics_Image* > f_images;
	bb_list_IntList* f_config;
	Array<int > f_configArray;
	bool f_movementActive;
	int f_movementStart;
	bb_sprite_Sprite* f_arrowLeft;
	bb_sprite_Sprite* f_arrowRight;
	Float f_posY;
	int f_direction;
	bb_slider_Slider();
	bb_slider_Slider* g_new();
	virtual void m_InitializeConfig();
	virtual void m_Restart();
	virtual void m_OnCreate(bb_director_Director*);
	virtual bb_vector2d_Vector2D* m_pos();
	virtual Float m_GetMovementOffset();
	virtual void m_OnRender();
	virtual bool m_Match(bb_shape_Shape*);
	virtual void m_SlideLeft();
	virtual void m_SlideRight();
	void mark();
	String debug();
};
String dbg_type(bb_slider_Slider**p){return "Slider";}
class bb_font_Font : public bb_baseobject_BaseObject{
	public:
	String f_name;
	int f__align;
	bb_color_Color* f_color;
	String f__text;
	bb_map_StringMap5* f_fontStore;
	bool f_recalculateSize;
	bb_font_Font();
	bb_font_Font* g_new(String,bb_vector2d_Vector2D*);
	bb_font_Font* g_new2();
	virtual void m_align(int);
	virtual int m_align2();
	virtual bb_angelfont_AngelFont* m_font();
	virtual void m_text(String);
	virtual String m_text2();
	virtual void m_OnCreate(bb_director_Director*);
	virtual void m_OnRender();
	void mark();
	String debug();
};
String dbg_type(bb_font_Font**p){return "Font";}
class bb_angelfont_AngelFont : public Object{
	public:
	Array<bb_char_Char* > f_chars;
	bool f_useKerning;
	bb_map_StringMap3* f_kernPairs;
	String f_iniText;
	int f_height;
	int f_heightOffset;
	bb_graphics_Image* f_image;
	String f_name;
	int f_xOffset;
	bb_angelfont_AngelFont();
	virtual int m_TextWidth(String);
	virtual int m_TextHeight(String);
	static String g_error;
	static bb_angelfont_AngelFont* g_current;
	virtual void m_LoadFont(String);
	static bb_map_StringMap5* g__list;
	bb_angelfont_AngelFont* g_new(String);
	virtual void m_DrawText(String,int,int);
	virtual void m_DrawText2(String,int,int,int);
	void mark();
	String debug();
};
String dbg_type(bb_angelfont_AngelFont**p){return "AngelFont";}
class bb_color_Color : public Object{
	public:
	Float f_red;
	Float f_green;
	Float f_blue;
	Float f_alpha;
	bb_color_Color* f_oldColor;
	bb_color_Color();
	bb_color_Color* g_new(Float,Float,Float,Float);
	bb_color_Color* g_new2();
	virtual void m_Set6(bb_color_Color*);
	virtual void m_Activate();
	virtual void m_Deactivate();
	void mark();
	String debug();
};
String dbg_type(bb_color_Color**p){return "Color";}
class bb_map_Map5 : public Object{
	public:
	bb_map_Node5* f_root;
	bb_map_Map5();
	bb_map_Map5* g_new();
	virtual int m_Compare(String,String)=0;
	virtual bb_map_Node5* m_FindNode(String);
	virtual bb_angelfont_AngelFont* m_Get(String);
	virtual bool m_Contains(String);
	virtual int m_RotateLeft5(bb_map_Node5*);
	virtual int m_RotateRight5(bb_map_Node5*);
	virtual int m_InsertFixup5(bb_map_Node5*);
	virtual bool m_Set7(String,bb_angelfont_AngelFont*);
	virtual bool m_Insert3(String,bb_angelfont_AngelFont*);
	void mark();
	String debug();
};
String dbg_type(bb_map_Map5**p){return "Map";}
class bb_map_StringMap5 : public bb_map_Map5{
	public:
	bb_map_StringMap5();
	bb_map_StringMap5* g_new();
	virtual int m_Compare(String,String);
	void mark();
	String debug();
};
String dbg_type(bb_map_StringMap5**p){return "StringMap";}
class bb_map_Node5 : public Object{
	public:
	String f_key;
	bb_map_Node5* f_right;
	bb_map_Node5* f_left;
	bb_angelfont_AngelFont* f_value;
	int f_color;
	bb_map_Node5* f_parent;
	bb_map_Node5();
	bb_map_Node5* g_new(String,bb_angelfont_AngelFont*,int,bb_map_Node5*);
	bb_map_Node5* g_new2();
	void mark();
	String debug();
};
String dbg_type(bb_map_Node5**p){return "Node";}
class bb_animation_Animation : public bb_fanout_FanOut{
	public:
	Float f_startValue;
	Float f_endValue;
	Float f_duration;
	bb_fader_Fader* f_effect;
	bb_transition_Transition* f_transition;
	bool f_finished;
	Float f_animationTime;
	Float f__value;
	bb_animation_Animation();
	bb_animation_Animation* g_new(Float,Float,Float);
	bb_animation_Animation* g_new2();
	virtual void m_Pause();
	virtual void m_OnUpdate(Float,Float);
	virtual void m_OnRender();
	virtual void m_Play();
	virtual void m_Restart();
	virtual bool m_IsPlaying();
	void mark();
	String debug();
};
String dbg_type(bb_animation_Animation**p){return "Animation";}
class bb_fader_Fader : public virtual gc_interface{
	public:
	virtual void m_PreRender(Float)=0;
	virtual void m_PreNode(Float,bb_directorevents_DirectorEvents*)=0;
	virtual void m_PostNode(Float,bb_directorevents_DirectorEvents*)=0;
	virtual void m_PostRender(Float)=0;
};
class bb_fader_FaderScale : public Object,public virtual bb_fader_Fader{
	public:
	bb_sizeable_Sizeable* f_sizeNode;
	Float f_offsetX;
	Float f_offsetY;
	bb_positionable_Positionable* f_posNode;
	bb_fader_FaderScale();
	bb_fader_FaderScale* g_new();
	virtual void m_PreRender(Float);
	virtual void m_PostRender(Float);
	virtual void m_PreNode(Float,bb_directorevents_DirectorEvents*);
	virtual void m_PostNode(Float,bb_directorevents_DirectorEvents*);
	void mark();
	String debug();
};
String dbg_type(bb_fader_FaderScale**p){return "FaderScale";}
class bb_transition_Transition : public virtual gc_interface{
	public:
	virtual Float m_Calculate(Float)=0;
};
class bb_transition_TransitionInCubic : public Object,public virtual bb_transition_Transition{
	public:
	bb_transition_TransitionInCubic();
	bb_transition_TransitionInCubic* g_new();
	virtual Float m_Calculate(Float);
	void mark();
	String debug();
};
String dbg_type(bb_transition_TransitionInCubic**p){return "TransitionInCubic";}
class bb_transition_TransitionLinear : public Object,public virtual bb_transition_Transition{
	public:
	bb_transition_TransitionLinear();
	bb_transition_TransitionLinear* g_new();
	virtual Float m_Calculate(Float);
	void mark();
	String debug();
};
String dbg_type(bb_transition_TransitionLinear**p){return "TransitionLinear";}
int bb_app_Millisecs();
class bb_stack_Stack : public Object{
	public:
	Array<int > f_data;
	int f_length;
	bb_stack_Stack();
	bb_stack_Stack* g_new();
	bb_stack_Stack* g_new2(Array<int >);
	virtual int m_Clear();
	virtual int m_Length();
	virtual int m_Get2(int);
	virtual int m_Remove4(int);
	virtual int m_Push(int);
	void mark();
	String debug();
};
String dbg_type(bb_stack_Stack**p){return "Stack";}
class bb_stack_IntStack : public bb_stack_Stack{
	public:
	bb_stack_IntStack();
	bb_stack_IntStack* g_new();
	void mark();
	String debug();
};
String dbg_type(bb_stack_IntStack**p){return "IntStack";}
extern int bb_random_Seed;
Float bb_random_Rnd();
Float bb_random_Rnd2(Float,Float);
Float bb_random_Rnd3(Float);
class bb_list_List4 : public Object{
	public:
	bb_list_Node4* f__head;
	bb_list_List4();
	bb_list_List4* g_new();
	virtual bb_list_Node4* m_AddLast4(int);
	bb_list_List4* g_new2(Array<int >);
	virtual int m_Clear();
	virtual int m_Count();
	virtual bb_list_Enumerator3* m_ObjectEnumerator();
	virtual Array<int > m_ToArray();
	virtual bool m_IsEmpty();
	virtual int m_First();
	virtual int m_RemoveFirst();
	virtual int m_Last();
	virtual int m_RemoveLast();
	virtual bb_list_Node4* m_AddFirst2(int);
	void mark();
	String debug();
};
String dbg_type(bb_list_List4**p){return "List";}
class bb_list_IntList : public bb_list_List4{
	public:
	bb_list_IntList();
	bb_list_IntList* g_new();
	void mark();
	String debug();
};
String dbg_type(bb_list_IntList**p){return "IntList";}
class bb_list_Node4 : public Object{
	public:
	bb_list_Node4* f__succ;
	bb_list_Node4* f__pred;
	int f__data;
	bb_list_Node4();
	bb_list_Node4* g_new(bb_list_Node4*,bb_list_Node4*,int);
	bb_list_Node4* g_new2();
	virtual bb_list_Node4* m_GetNode();
	virtual bb_list_Node4* m_NextNode();
	virtual int m_Remove2();
	virtual bb_list_Node4* m_PrevNode();
	void mark();
	String debug();
};
String dbg_type(bb_list_Node4**p){return "Node";}
class bb_list_HeadNode4 : public bb_list_Node4{
	public:
	bb_list_HeadNode4();
	bb_list_HeadNode4* g_new();
	virtual bb_list_Node4* m_GetNode();
	void mark();
	String debug();
};
String dbg_type(bb_list_HeadNode4**p){return "HeadNode";}
class bb_set_Set : public Object{
	public:
	bb_map_Map6* f_map;
	bb_set_Set();
	bb_set_Set* g_new(bb_map_Map6*);
	bb_set_Set* g_new2();
	virtual int m_Insert4(int);
	virtual int m_Count();
	virtual int m_Clear();
	virtual int m_Remove4(int);
	virtual bool m_Contains2(int);
	void mark();
	String debug();
};
String dbg_type(bb_set_Set**p){return "Set";}
class bb_set_IntSet : public bb_set_Set{
	public:
	bb_set_IntSet();
	bb_set_IntSet* g_new();
	void mark();
	String debug();
};
String dbg_type(bb_set_IntSet**p){return "IntSet";}
class bb_map_Map6 : public Object{
	public:
	bb_map_Node6* f_root;
	bb_map_Map6();
	bb_map_Map6* g_new();
	virtual int m_Compare2(int,int)=0;
	virtual int m_RotateLeft6(bb_map_Node6*);
	virtual int m_RotateRight6(bb_map_Node6*);
	virtual int m_InsertFixup6(bb_map_Node6*);
	virtual bool m_Set8(int,Object*);
	virtual bool m_Insert5(int,Object*);
	virtual int m_Count();
	virtual int m_Clear();
	virtual bb_map_Node6* m_FindNode2(int);
	virtual int m_DeleteFixup(bb_map_Node6*,bb_map_Node6*);
	virtual int m_RemoveNode(bb_map_Node6*);
	virtual int m_Remove4(int);
	virtual bool m_Contains2(int);
	void mark();
	String debug();
};
String dbg_type(bb_map_Map6**p){return "Map";}
class bb_map_IntMap : public bb_map_Map6{
	public:
	bb_map_IntMap();
	bb_map_IntMap* g_new();
	virtual int m_Compare2(int,int);
	void mark();
	String debug();
};
String dbg_type(bb_map_IntMap**p){return "IntMap";}
class bb_map_Node6 : public Object{
	public:
	int f_key;
	bb_map_Node6* f_right;
	bb_map_Node6* f_left;
	Object* f_value;
	int f_color;
	bb_map_Node6* f_parent;
	bb_map_Node6();
	bb_map_Node6* g_new(int,Object*,int,bb_map_Node6*);
	bb_map_Node6* g_new2();
	virtual int m_Count2(int);
	void mark();
	String debug();
};
String dbg_type(bb_map_Node6**p){return "Node";}
class bb_list_Enumerator3 : public Object{
	public:
	bb_list_List4* f__list;
	bb_list_Node4* f__curr;
	bb_list_Enumerator3();
	bb_list_Enumerator3* g_new(bb_list_List4*);
	bb_list_Enumerator3* g_new2();
	virtual bool m_HasNext();
	virtual int m_NextObject();
	void mark();
	String debug();
};
String dbg_type(bb_list_Enumerator3**p){return "Enumerator";}
class bb_textinput_TextInput : public bb_font_Font{
	public:
	int f_cursorPos;
	bb_textinput_TextInput();
	bb_textinput_TextInput* g_new(String,bb_vector2d_Vector2D*);
	bb_textinput_TextInput* g_new2();
	virtual void m_MoveCursorRight();
	virtual void m_InsertChar(String);
	virtual void m_MoveCursorLeft();
	virtual void m_RemoveChar();
	virtual void m_OnKeyUp(bb_keyevent_KeyEvent*);
	void mark();
	String debug();
};
String dbg_type(bb_textinput_TextInput**p){return "TextInput";}
int bb_graphics_SetFont(bb_graphics_Image*,int);
extern gxtkGraphics* bb_graphics_renderDevice;
int bb_graphics_SetMatrix(Float,Float,Float,Float,Float,Float);
int bb_graphics_SetMatrix2(Array<Float >);
int bb_graphics_SetColor(Float,Float,Float);
int bb_graphics_SetAlpha(Float);
int bb_graphics_SetBlend(int);
int bb_graphics_DeviceWidth();
int bb_graphics_DeviceHeight();
int bb_graphics_SetScissor(Float,Float,Float,Float);
int bb_graphics_BeginRender();
int bb_graphics_EndRender();
class bb_deltatimer_DeltaTimer : public Object{
	public:
	Float f_targetFps;
	Float f_lastTicks;
	Float f_currentTicks;
	Float f__frameTime;
	Float f__delta;
	bb_deltatimer_DeltaTimer();
	bb_deltatimer_DeltaTimer* g_new(Float);
	bb_deltatimer_DeltaTimer* g_new2();
	virtual Float m_frameTime();
	virtual void m_OnUpdate2();
	virtual Float m_delta();
	void mark();
	String debug();
};
String dbg_type(bb_deltatimer_DeltaTimer**p){return "DeltaTimer";}
int bb_app_SetUpdateRate(int);
int bb_input_TouchDown(int);
class bb_touchevent_TouchEvent : public Object{
	public:
	int f__finger;
	int f__startTime;
	bb_list_List5* f_positions;
	int f__endTime;
	bb_touchevent_TouchEvent();
	bb_touchevent_TouchEvent* g_new(int);
	bb_touchevent_TouchEvent* g_new2();
	virtual bb_vector2d_Vector2D* m_startPos();
	virtual bb_vector2d_Vector2D* m_prevPos();
	virtual void m_Add2(bb_vector2d_Vector2D*);
	virtual void m_Trim(int);
	virtual bb_vector2d_Vector2D* m_pos();
	virtual bb_touchevent_TouchEvent* m_Copy();
	virtual bb_vector2d_Vector2D* m_startDelta();
	void mark();
	String debug();
};
String dbg_type(bb_touchevent_TouchEvent**p){return "TouchEvent";}
Float bb_input_TouchX(int);
Float bb_input_TouchY(int);
class bb_list_List5 : public Object{
	public:
	bb_list_Node5* f__head;
	bb_list_List5();
	bb_list_List5* g_new();
	virtual bb_list_Node5* m_AddLast5(bb_vector2d_Vector2D*);
	bb_list_List5* g_new2(Array<bb_vector2d_Vector2D* >);
	virtual int m_Count();
	virtual bool m_IsEmpty();
	virtual bb_vector2d_Vector2D* m_First();
	virtual bb_list_Node5* m_LastNode();
	virtual int m_Clear();
	virtual bb_vector2d_Vector2D* m_RemoveFirst();
	virtual bb_vector2d_Vector2D* m_Last();
	void mark();
	String debug();
};
String dbg_type(bb_list_List5**p){return "List";}
class bb_list_Node5 : public Object{
	public:
	bb_list_Node5* f__succ;
	bb_list_Node5* f__pred;
	bb_vector2d_Vector2D* f__data;
	bb_list_Node5();
	bb_list_Node5* g_new(bb_list_Node5*,bb_list_Node5*,bb_vector2d_Vector2D*);
	bb_list_Node5* g_new2();
	virtual bb_list_Node5* m_GetNode();
	virtual bb_list_Node5* m_NextNode();
	virtual bb_list_Node5* m_PrevNode();
	virtual bb_vector2d_Vector2D* m_Value();
	virtual int m_Remove2();
	void mark();
	String debug();
};
String dbg_type(bb_list_Node5**p){return "Node";}
class bb_list_HeadNode5 : public bb_list_Node5{
	public:
	bb_list_HeadNode5();
	bb_list_HeadNode5* g_new();
	virtual bb_list_Node5* m_GetNode();
	void mark();
	String debug();
};
String dbg_type(bb_list_HeadNode5**p){return "HeadNode";}
int bb_input_EnableKeyboard();
int bb_input_GetChar();
class bb_keyevent_KeyEvent : public Object{
	public:
	int f__code;
	String f__char;
	bb_keyevent_KeyEvent();
	bb_keyevent_KeyEvent* g_new(int);
	bb_keyevent_KeyEvent* g_new2();
	virtual int m_code();
	virtual String m_char();
	void mark();
	String debug();
};
String dbg_type(bb_keyevent_KeyEvent**p){return "KeyEvent";}
class bb_map_Map7 : public Object{
	public:
	bb_map_Node7* f_root;
	bb_map_Map7();
	bb_map_Map7* g_new();
	virtual int m_Compare2(int,int)=0;
	virtual bb_map_Node7* m_FindNode2(int);
	virtual bool m_Contains2(int);
	virtual int m_RotateLeft7(bb_map_Node7*);
	virtual int m_RotateRight7(bb_map_Node7*);
	virtual int m_InsertFixup7(bb_map_Node7*);
	virtual bool m_Add6(int,bb_keyevent_KeyEvent*);
	virtual bb_map_MapValues* m_Values();
	virtual bb_map_Node7* m_FirstNode();
	virtual int m_DeleteFixup2(bb_map_Node7*,bb_map_Node7*);
	virtual int m_RemoveNode2(bb_map_Node7*);
	virtual int m_Remove4(int);
	virtual int m_Clear();
	void mark();
	String debug();
};
String dbg_type(bb_map_Map7**p){return "Map";}
class bb_map_IntMap2 : public bb_map_Map7{
	public:
	bb_map_IntMap2();
	bb_map_IntMap2* g_new();
	virtual int m_Compare2(int,int);
	void mark();
	String debug();
};
String dbg_type(bb_map_IntMap2**p){return "IntMap";}
class bb_map_Node7 : public Object{
	public:
	int f_key;
	bb_map_Node7* f_right;
	bb_map_Node7* f_left;
	bb_keyevent_KeyEvent* f_value;
	int f_color;
	bb_map_Node7* f_parent;
	bb_map_Node7();
	bb_map_Node7* g_new(int,bb_keyevent_KeyEvent*,int,bb_map_Node7*);
	bb_map_Node7* g_new2();
	virtual bb_map_Node7* m_NextNode();
	void mark();
	String debug();
};
String dbg_type(bb_map_Node7**p){return "Node";}
class bb_map_MapValues : public Object{
	public:
	bb_map_Map7* f_map;
	bb_map_MapValues();
	bb_map_MapValues* g_new(bb_map_Map7*);
	bb_map_MapValues* g_new2();
	virtual bb_map_ValueEnumerator* m_ObjectEnumerator();
	void mark();
	String debug();
};
String dbg_type(bb_map_MapValues**p){return "MapValues";}
class bb_map_ValueEnumerator : public Object{
	public:
	bb_map_Node7* f_node;
	bb_map_ValueEnumerator();
	bb_map_ValueEnumerator* g_new(bb_map_Node7*);
	bb_map_ValueEnumerator* g_new2();
	virtual bool m_HasNext();
	virtual bb_keyevent_KeyEvent* m_NextObject();
	void mark();
	String debug();
};
String dbg_type(bb_map_ValueEnumerator**p){return "ValueEnumerator";}
int bb_input_DisableKeyboard();
int bb_graphics_PushMatrix();
int bb_graphics_Transform(Float,Float,Float,Float,Float,Float);
int bb_graphics_Transform2(Array<Float >);
int bb_graphics_Scale(Float,Float);
int bb_graphics_DebugRenderDevice();
int bb_graphics_Cls(Float,Float,Float);
int bb_graphics_PopMatrix();
int bb_graphics_Translate(Float,Float);
int bb_graphics_ValidateMatrix();
int bb_graphics_DrawImage(bb_graphics_Image*,Float,Float,int);
int bb_graphics_Rotate(Float);
int bb_graphics_DrawImage2(bb_graphics_Image*,Float,Float,Float,Float,Float,int);
int bb_graphics_DrawRect(Float,Float,Float,Float);
Array<Float > bb_graphics_GetColor();
Float bb_graphics_GetAlpha();
int bb_graphics_DrawImageRect(bb_graphics_Image*,Float,Float,int,int,int,int,int);
int bb_graphics_DrawImageRect2(bb_graphics_Image*,Float,Float,int,int,int,int,Float,Float,Float,int);
int bb_math_Min(int,int);
Float bb_math_Min2(Float,Float);
extern bool bb_iap_iapPurchaseInProgress;
extern int bb_iap_iapCount;
int bb_iap_buyProduct(String);
bool bb_iap_isPurchaseInProgress();
class bb_shape_Shape : public bb_baseobject_BaseObject{
	public:
	int f_type;
	int f_lane;
	bb_chute_Chute* f_chute;
	bool f_isFast;
	bool f_isReadyForFast;
	Float f_readyTime;
	bb_shape_Shape();
	static Array<bb_graphics_Image* > g_images;
	static bb_vector2d_Vector2D* g_SPEED_SLOW;
	static bb_vector2d_Vector2D* g_SPEED_FAST;
	bb_shape_Shape* g_new(int,int,bb_chute_Chute*);
	bb_shape_Shape* g_new2();
	virtual void m_OnUpdate(Float,Float);
	virtual void m_OnRender();
	void mark();
	String debug();
};
String dbg_type(bb_shape_Shape**p){return "Shape";}
class bb_stack_Stack2 : public Object{
	public:
	Array<bb_sprite_Sprite* > f_data;
	int f_length;
	bb_stack_Stack2();
	bb_stack_Stack2* g_new();
	bb_stack_Stack2* g_new2(Array<bb_sprite_Sprite* >);
	virtual int m_Length();
	virtual bb_sprite_Sprite* m_Pop();
	virtual int m_Push2(bb_sprite_Sprite*);
	void mark();
	String debug();
};
String dbg_type(bb_stack_Stack2**p){return "Stack";}
int bb_math_Max(int,int);
Float bb_math_Max2(Float,Float);
int bb_math_Abs(int);
Float bb_math_Abs2(Float);
int bb_app_SaveState(String);
bb_router_Router::bb_router_Router(){
	f_handlers=(new bb_map_StringMap)->g_new();
	f_routers=(new bb_map_StringMap2)->g_new();
	f__currentName=String();
	f__current=0;
	f__previous=0;
	f__previousName=String();
	f_director=0;
	f_created=(new bb_list_List)->g_new();
}
bb_router_Router* bb_router_Router::g_new(){
	DBG_ENTER("Router.new")
	bb_router_Router *self=this;
	DBG_LOCAL(self,"Self")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/router.monkey<13>");
	return this;
}
void bb_router_Router::m_Add(String t_name,bb_directorevents_DirectorEvents* t_handler){
	DBG_ENTER("Router.Add")
	bb_router_Router *self=this;
	DBG_LOCAL(self,"Self")
	DBG_LOCAL(t_name,"name")
	DBG_LOCAL(t_handler,"handler")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/router.monkey<28>");
	if(f_handlers->m_Contains(t_name)){
		DBG_BLOCK();
		DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/router.monkey<29>");
		Error(String(L"Router already contains a handler named ")+t_name);
	}
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/router.monkey<32>");
	f_handlers->m_Set(t_name,t_handler);
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/router.monkey<33>");
	f_routers->m_Set2(t_name,dynamic_cast<bb_routerevents_RouterEvents*>(t_handler));
}
bb_directorevents_DirectorEvents* bb_router_Router::m_Get(String t_name){
	DBG_ENTER("Router.Get")
	bb_router_Router *self=this;
	DBG_LOCAL(self,"Self")
	DBG_LOCAL(t_name,"name")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/router.monkey<37>");
	if(!f_handlers->m_Contains(t_name)){
		DBG_BLOCK();
		DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/router.monkey<38>");
		Error(String(L"Router has no handler named ")+t_name);
	}
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/router.monkey<41>");
	bb_directorevents_DirectorEvents* t_=f_handlers->m_Get(t_name);
	return t_;
}
void bb_router_Router::m_DispatchOnCreate(){
	DBG_ENTER("Router.DispatchOnCreate")
	bb_router_Router *self=this;
	DBG_LOCAL(self,"Self")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/router.monkey<129>");
	if(!((f_director)!=0)){
		DBG_BLOCK();
		return;
	}
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/router.monkey<130>");
	if(!((f__current)!=0)){
		DBG_BLOCK();
		return;
	}
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/router.monkey<131>");
	if(f_created->m_Contains(f__currentName)){
		DBG_BLOCK();
		return;
	}
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/router.monkey<133>");
	f__current->m_OnCreate(f_director);
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/router.monkey<134>");
	f_created->m_AddLast(f__currentName);
}
void bb_router_Router::m_Goto(String t_name){
	DBG_ENTER("Router.Goto")
	bb_router_Router *self=this;
	DBG_LOCAL(self,"Self")
	DBG_LOCAL(t_name,"name")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/router.monkey<45>");
	if(t_name==f__currentName){
		DBG_BLOCK();
		return;
	}
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/router.monkey<47>");
	gc_assign(f__previous,f__current);
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/router.monkey<48>");
	f__previousName=f__currentName;
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/router.monkey<50>");
	gc_assign(f__current,m_Get(t_name));
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/router.monkey<51>");
	f__currentName=t_name;
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/router.monkey<52>");
	m_DispatchOnCreate();
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/router.monkey<54>");
	bb_routerevents_RouterEvents* t_tmpRouter=f_routers->m_Get(f__previousName);
	DBG_LOCAL(t_tmpRouter,"tmpRouter")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/router.monkey<55>");
	if((t_tmpRouter)!=0){
		DBG_BLOCK();
		t_tmpRouter->m_OnLeave();
	}
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/router.monkey<57>");
	t_tmpRouter=f_routers->m_Get(f__currentName);
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/router.monkey<58>");
	if((t_tmpRouter)!=0){
		DBG_BLOCK();
		t_tmpRouter->m_OnEnter();
	}
}
void bb_router_Router::m_OnCreate(bb_director_Director* t_director){
	DBG_ENTER("Router.OnCreate")
	bb_router_Router *self=this;
	DBG_LOCAL(self,"Self")
	DBG_LOCAL(t_director,"director")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/router.monkey<62>");
	gc_assign(this->f_director,t_director);
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/router.monkey<63>");
	m_DispatchOnCreate();
}
void bb_router_Router::m_OnLoading(){
	DBG_ENTER("Router.OnLoading")
	bb_router_Router *self=this;
	DBG_LOCAL(self,"Self")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/router.monkey<67>");
	if((f__current)!=0){
		DBG_BLOCK();
		f__current->m_OnLoading();
	}
}
void bb_router_Router::m_OnUpdate(Float t_delta,Float t_frameTime){
	DBG_ENTER("Router.OnUpdate")
	bb_router_Router *self=this;
	DBG_LOCAL(self,"Self")
	DBG_LOCAL(t_delta,"delta")
	DBG_LOCAL(t_frameTime,"frameTime")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/router.monkey<71>");
	if((f__current)!=0){
		DBG_BLOCK();
		f__current->m_OnUpdate(t_delta,t_frameTime);
	}
}
void bb_router_Router::m_OnRender(){
	DBG_ENTER("Router.OnRender")
	bb_router_Router *self=this;
	DBG_LOCAL(self,"Self")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/router.monkey<75>");
	if((f__current)!=0){
		DBG_BLOCK();
		f__current->m_OnRender();
	}
}
void bb_router_Router::m_OnSuspend(){
	DBG_ENTER("Router.OnSuspend")
	bb_router_Router *self=this;
	DBG_LOCAL(self,"Self")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/router.monkey<79>");
	if((f__current)!=0){
		DBG_BLOCK();
		f__current->m_OnSuspend();
	}
}
void bb_router_Router::m_OnResume(int t_delta){
	DBG_ENTER("Router.OnResume")
	bb_router_Router *self=this;
	DBG_LOCAL(self,"Self")
	DBG_LOCAL(t_delta,"delta")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/router.monkey<83>");
	if((f__current)!=0){
		DBG_BLOCK();
		f__current->m_OnResume(t_delta);
	}
}
void bb_router_Router::m_OnKeyDown(bb_keyevent_KeyEvent* t_event){
	DBG_ENTER("Router.OnKeyDown")
	bb_router_Router *self=this;
	DBG_LOCAL(self,"Self")
	DBG_LOCAL(t_event,"event")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/router.monkey<87>");
	if((f__current)!=0){
		DBG_BLOCK();
		f__current->m_OnKeyDown(t_event);
	}
}
void bb_router_Router::m_OnKeyPress(bb_keyevent_KeyEvent* t_event){
	DBG_ENTER("Router.OnKeyPress")
	bb_router_Router *self=this;
	DBG_LOCAL(self,"Self")
	DBG_LOCAL(t_event,"event")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/router.monkey<91>");
	if((f__current)!=0){
		DBG_BLOCK();
		f__current->m_OnKeyPress(t_event);
	}
}
void bb_router_Router::m_OnKeyUp(bb_keyevent_KeyEvent* t_event){
	DBG_ENTER("Router.OnKeyUp")
	bb_router_Router *self=this;
	DBG_LOCAL(self,"Self")
	DBG_LOCAL(t_event,"event")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/router.monkey<95>");
	if((f__current)!=0){
		DBG_BLOCK();
		f__current->m_OnKeyUp(t_event);
	}
}
void bb_router_Router::m_OnTouchDown(bb_touchevent_TouchEvent* t_event){
	DBG_ENTER("Router.OnTouchDown")
	bb_router_Router *self=this;
	DBG_LOCAL(self,"Self")
	DBG_LOCAL(t_event,"event")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/router.monkey<99>");
	if((f__current)!=0){
		DBG_BLOCK();
		f__current->m_OnTouchDown(t_event);
	}
}
void bb_router_Router::m_OnTouchMove(bb_touchevent_TouchEvent* t_event){
	DBG_ENTER("Router.OnTouchMove")
	bb_router_Router *self=this;
	DBG_LOCAL(self,"Self")
	DBG_LOCAL(t_event,"event")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/router.monkey<103>");
	if((f__current)!=0){
		DBG_BLOCK();
		f__current->m_OnTouchMove(t_event);
	}
}
void bb_router_Router::m_OnTouchUp(bb_touchevent_TouchEvent* t_event){
	DBG_ENTER("Router.OnTouchUp")
	bb_router_Router *self=this;
	DBG_LOCAL(self,"Self")
	DBG_LOCAL(t_event,"event")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/router.monkey<107>");
	if((f__current)!=0){
		DBG_BLOCK();
		f__current->m_OnTouchUp(t_event);
	}
}
bb_directorevents_DirectorEvents* bb_router_Router::m_previous(){
	DBG_ENTER("Router.previous")
	bb_router_Router *self=this;
	DBG_LOCAL(self,"Self")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/router.monkey<119>");
	return f__previous;
}
String bb_router_Router::m_previousName(){
	DBG_ENTER("Router.previousName")
	bb_router_Router *self=this;
	DBG_LOCAL(self,"Self")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/router.monkey<123>");
	return f__previousName;
}
void bb_router_Router::mark(){
	Object::mark();
	gc_mark_q(f_handlers);
	gc_mark_q(f_routers);
	gc_mark_q(f__current);
	gc_mark_q(f__previous);
	gc_mark_q(f_director);
	gc_mark_q(f_created);
}
String bb_router_Router::debug(){
	String t="(Router)\n";
	t+=dbg_decl("handlers",&f_handlers);
	t+=dbg_decl("routers",&f_routers);
	t+=dbg_decl("created",&f_created);
	t+=dbg_decl("_current",&f__current);
	t+=dbg_decl("_currentName",&f__currentName);
	t+=dbg_decl("_previous",&f__previous);
	t+=dbg_decl("_previousName",&f__previousName);
	t+=dbg_decl("director",&f_director);
	return t;
}
bb_partial_Partial::bb_partial_Partial(){
	f__director=0;
}
bb_partial_Partial* bb_partial_Partial::g_new(){
	DBG_ENTER("Partial.new")
	bb_partial_Partial *self=this;
	DBG_LOCAL(self,"Self")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/partial.monkey<12>");
	return this;
}
void bb_partial_Partial::m_OnCreate(bb_director_Director* t_director){
	DBG_ENTER("Partial.OnCreate")
	bb_partial_Partial *self=this;
	DBG_LOCAL(self,"Self")
	DBG_LOCAL(t_director,"director")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/partial.monkey<20>");
	gc_assign(f__director,t_director);
}
bb_director_Director* bb_partial_Partial::m_director(){
	DBG_ENTER("Partial.director")
	bb_partial_Partial *self=this;
	DBG_LOCAL(self,"Self")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/partial.monkey<57>");
	return f__director;
}
void bb_partial_Partial::m_OnRender(){
	DBG_ENTER("Partial.OnRender")
	bb_partial_Partial *self=this;
	DBG_LOCAL(self,"Self")
}
void bb_partial_Partial::m_OnUpdate(Float t_delta,Float t_frameTime){
	DBG_ENTER("Partial.OnUpdate")
	bb_partial_Partial *self=this;
	DBG_LOCAL(self,"Self")
}
void bb_partial_Partial::m_OnKeyUp(bb_keyevent_KeyEvent* t_event){
	DBG_ENTER("Partial.OnKeyUp")
	bb_partial_Partial *self=this;
	DBG_LOCAL(self,"Self")
}
void bb_partial_Partial::m_OnLoading(){
	DBG_ENTER("Partial.OnLoading")
	bb_partial_Partial *self=this;
	DBG_LOCAL(self,"Self")
}
void bb_partial_Partial::m_OnSuspend(){
	DBG_ENTER("Partial.OnSuspend")
	bb_partial_Partial *self=this;
	DBG_LOCAL(self,"Self")
}
void bb_partial_Partial::m_OnResume(int t_delta){
	DBG_ENTER("Partial.OnResume")
	bb_partial_Partial *self=this;
	DBG_LOCAL(self,"Self")
}
void bb_partial_Partial::m_OnKeyDown(bb_keyevent_KeyEvent* t_event){
	DBG_ENTER("Partial.OnKeyDown")
	bb_partial_Partial *self=this;
	DBG_LOCAL(self,"Self")
}
void bb_partial_Partial::m_OnKeyPress(bb_keyevent_KeyEvent* t_event){
	DBG_ENTER("Partial.OnKeyPress")
	bb_partial_Partial *self=this;
	DBG_LOCAL(self,"Self")
}
void bb_partial_Partial::m_OnTouchDown(bb_touchevent_TouchEvent* t_event){
	DBG_ENTER("Partial.OnTouchDown")
	bb_partial_Partial *self=this;
	DBG_LOCAL(self,"Self")
}
void bb_partial_Partial::m_OnTouchMove(bb_touchevent_TouchEvent* t_event){
	DBG_ENTER("Partial.OnTouchMove")
	bb_partial_Partial *self=this;
	DBG_LOCAL(self,"Self")
}
void bb_partial_Partial::m_OnTouchUp(bb_touchevent_TouchEvent* t_event){
	DBG_ENTER("Partial.OnTouchUp")
	bb_partial_Partial *self=this;
	DBG_LOCAL(self,"Self")
}
void bb_partial_Partial::mark(){
	Object::mark();
	gc_mark_q(f__director);
}
String bb_partial_Partial::debug(){
	String t="(Partial)\n";
	t+=dbg_decl("_director",&f__director);
	return t;
}
bb_scene_Scene::bb_scene_Scene(){
	f__layer=(new bb_fanout_FanOut)->g_new();
	f__router=0;
}
bb_scene_Scene* bb_scene_Scene::g_new(){
	DBG_ENTER("Scene.new")
	bb_scene_Scene *self=this;
	DBG_LOCAL(self,"Self")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/scene.monkey<10>");
	bb_partial_Partial::g_new();
	return this;
}
void bb_scene_Scene::m_OnEnter(){
	DBG_ENTER("Scene.OnEnter")
	bb_scene_Scene *self=this;
	DBG_LOCAL(self,"Self")
}
void bb_scene_Scene::m_OnLeave(){
	DBG_ENTER("Scene.OnLeave")
	bb_scene_Scene *self=this;
	DBG_LOCAL(self,"Self")
}
bb_graphics_Image* bb_scene_Scene::g_blend;
void bb_scene_Scene::m_OnCreate(bb_director_Director* t_director){
	DBG_ENTER("Scene.OnCreate")
	bb_scene_Scene *self=this;
	DBG_LOCAL(self,"Self")
	DBG_LOCAL(t_director,"director")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/scene.monkey<32>");
	bb_partial_Partial::m_OnCreate(t_director);
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/scene.monkey<33>");
	f__layer->m_OnCreate(t_director);
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/scene.monkey<34>");
	gc_assign(f__router,dynamic_cast<bb_router_Router*>(t_director->m_handler()));
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/scene.monkey<36>");
	if(!((g_blend)!=0)){
		DBG_BLOCK();
		gc_assign(g_blend,bb_graphics_LoadImage(String(L"blend.png"),1,bb_graphics_Image::g_DefaultFlags));
	}
}
bb_fanout_FanOut* bb_scene_Scene::m_layer(){
	DBG_ENTER("Scene.layer")
	bb_scene_Scene *self=this;
	DBG_LOCAL(self,"Self")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/scene.monkey<84>");
	return f__layer;
}
void bb_scene_Scene::m_OnLoading(){
	DBG_ENTER("Scene.OnLoading")
	bb_scene_Scene *self=this;
	DBG_LOCAL(self,"Self")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/scene.monkey<40>");
	f__layer->m_OnLoading();
}
void bb_scene_Scene::m_OnUpdate(Float t_delta,Float t_frameTime){
	DBG_ENTER("Scene.OnUpdate")
	bb_scene_Scene *self=this;
	DBG_LOCAL(self,"Self")
	DBG_LOCAL(t_delta,"delta")
	DBG_LOCAL(t_frameTime,"frameTime")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/scene.monkey<44>");
	f__layer->m_OnUpdate(t_delta,t_frameTime);
}
void bb_scene_Scene::m_OnRender(){
	DBG_ENTER("Scene.OnRender")
	bb_scene_Scene *self=this;
	DBG_LOCAL(self,"Self")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/scene.monkey<48>");
	f__layer->m_OnRender();
}
void bb_scene_Scene::m_OnSuspend(){
	DBG_ENTER("Scene.OnSuspend")
	bb_scene_Scene *self=this;
	DBG_LOCAL(self,"Self")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/scene.monkey<52>");
	f__layer->m_OnSuspend();
}
void bb_scene_Scene::m_OnResume(int t_delta){
	DBG_ENTER("Scene.OnResume")
	bb_scene_Scene *self=this;
	DBG_LOCAL(self,"Self")
	DBG_LOCAL(t_delta,"delta")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/scene.monkey<56>");
	f__layer->m_OnResume(t_delta);
}
void bb_scene_Scene::m_OnKeyDown(bb_keyevent_KeyEvent* t_event){
	DBG_ENTER("Scene.OnKeyDown")
	bb_scene_Scene *self=this;
	DBG_LOCAL(self,"Self")
	DBG_LOCAL(t_event,"event")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/scene.monkey<60>");
	f__layer->m_OnKeyDown(t_event);
}
void bb_scene_Scene::m_OnKeyPress(bb_keyevent_KeyEvent* t_event){
	DBG_ENTER("Scene.OnKeyPress")
	bb_scene_Scene *self=this;
	DBG_LOCAL(self,"Self")
	DBG_LOCAL(t_event,"event")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/scene.monkey<64>");
	f__layer->m_OnKeyPress(t_event);
}
void bb_scene_Scene::m_OnKeyUp(bb_keyevent_KeyEvent* t_event){
	DBG_ENTER("Scene.OnKeyUp")
	bb_scene_Scene *self=this;
	DBG_LOCAL(self,"Self")
	DBG_LOCAL(t_event,"event")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/scene.monkey<68>");
	f__layer->m_OnKeyUp(t_event);
}
void bb_scene_Scene::m_OnTouchDown(bb_touchevent_TouchEvent* t_event){
	DBG_ENTER("Scene.OnTouchDown")
	bb_scene_Scene *self=this;
	DBG_LOCAL(self,"Self")
	DBG_LOCAL(t_event,"event")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/scene.monkey<72>");
	f__layer->m_OnTouchDown(t_event);
}
void bb_scene_Scene::m_OnTouchMove(bb_touchevent_TouchEvent* t_event){
	DBG_ENTER("Scene.OnTouchMove")
	bb_scene_Scene *self=this;
	DBG_LOCAL(self,"Self")
	DBG_LOCAL(t_event,"event")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/scene.monkey<76>");
	f__layer->m_OnTouchMove(t_event);
}
void bb_scene_Scene::m_OnTouchUp(bb_touchevent_TouchEvent* t_event){
	DBG_ENTER("Scene.OnTouchUp")
	bb_scene_Scene *self=this;
	DBG_LOCAL(self,"Self")
	DBG_LOCAL(t_event,"event")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/scene.monkey<80>");
	f__layer->m_OnTouchUp(t_event);
}
bb_router_Router* bb_scene_Scene::m_router(){
	DBG_ENTER("Scene.router")
	bb_scene_Scene *self=this;
	DBG_LOCAL(self,"Self")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/scene.monkey<88>");
	return f__router;
}
void bb_scene_Scene::m_RenderBlend(){
	DBG_ENTER("Scene.RenderBlend")
	bb_scene_Scene *self=this;
	DBG_LOCAL(self,"Self")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/scene.monkey<20>");
	for(int t_posY=0;Float(t_posY)<m_director()->m_size()->f_y;t_posY=t_posY+8){
		DBG_BLOCK();
		DBG_LOCAL(t_posY,"posY")
		DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/scene.monkey<21>");
		bb_graphics_DrawImage(g_blend,FLOAT(0.0),Float(t_posY),0);
	}
}
void bb_scene_Scene::mark(){
	bb_partial_Partial::mark();
	gc_mark_q(f__layer);
	gc_mark_q(f__router);
}
String bb_scene_Scene::debug(){
	String t="(Scene)\n";
	t=bb_partial_Partial::debug()+t;
	t+=dbg_decl("_layer",&f__layer);
	t+=dbg_decl("_router",&f__router);
	t+=dbg_decl("blend",&bb_scene_Scene::g_blend);
	return t;
}
bb_introscene_IntroScene::bb_introscene_IntroScene(){
	f_background=0;
	f_timer=0;
}
bb_introscene_IntroScene* bb_introscene_IntroScene::g_new(){
	DBG_ENTER("IntroScene.new")
	bb_introscene_IntroScene *self=this;
	DBG_LOCAL(self,"Self")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/introscene.monkey<11>");
	bb_scene_Scene::g_new();
	return this;
}
void bb_introscene_IntroScene::m_OnCreate(bb_director_Director* t_director){
	DBG_ENTER("IntroScene.OnCreate")
	bb_introscene_IntroScene *self=this;
	DBG_LOCAL(self,"Self")
	DBG_LOCAL(t_director,"director")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/introscene.monkey<22>");
	gc_assign(f_background,(new bb_sprite_Sprite)->g_new(String(L"logo.jpg"),0));
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/introscene.monkey<23>");
	m_layer()->m_Add4(f_background);
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/introscene.monkey<26>");
	bb_scene_Scene::m_OnCreate(t_director);
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/introscene.monkey<29>");
	f_background->m_Center(t_director);
}
void bb_introscene_IntroScene::m_OnUpdate(Float t_delta,Float t_frameTime){
	DBG_ENTER("IntroScene.OnUpdate")
	bb_introscene_IntroScene *self=this;
	DBG_LOCAL(self,"Self")
	DBG_LOCAL(t_delta,"delta")
	DBG_LOCAL(t_frameTime,"frameTime")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/introscene.monkey<37>");
	if(f_timer>=1500){
		DBG_BLOCK();
		m_router()->m_Goto(String(L"menu"));
	}
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/introscene.monkey<38>");
	f_timer=int(Float(f_timer)+t_frameTime);
}
void bb_introscene_IntroScene::m_OnRender(){
	DBG_ENTER("IntroScene.OnRender")
	bb_introscene_IntroScene *self=this;
	DBG_LOCAL(self,"Self")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/introscene.monkey<43>");
	bb_graphics_Cls(FLOAT(255.0),FLOAT(255.0),FLOAT(255.0));
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/introscene.monkey<44>");
	bb_scene_Scene::m_OnRender();
}
void bb_introscene_IntroScene::mark(){
	bb_scene_Scene::mark();
	gc_mark_q(f_background);
}
String bb_introscene_IntroScene::debug(){
	String t="(IntroScene)\n";
	t=bb_scene_Scene::debug()+t;
	t+=dbg_decl("background",&f_background);
	t+=dbg_decl("timer",&f_timer);
	return t;
}
bb_map_Map::bb_map_Map(){
	f_root=0;
}
bb_map_Map* bb_map_Map::g_new(){
	DBG_ENTER("Map.new")
	bb_map_Map *self=this;
	DBG_LOCAL(self,"Self")
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<7>");
	return this;
}
bb_map_Node* bb_map_Map::m_FindNode(String t_key){
	DBG_ENTER("Map.FindNode")
	bb_map_Map *self=this;
	DBG_LOCAL(self,"Self")
	DBG_LOCAL(t_key,"key")
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<157>");
	bb_map_Node* t_node=f_root;
	DBG_LOCAL(t_node,"node")
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<159>");
	while((t_node)!=0){
		DBG_BLOCK();
		DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<160>");
		int t_cmp=m_Compare(t_key,t_node->f_key);
		DBG_LOCAL(t_cmp,"cmp")
		DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<161>");
		if(t_cmp>0){
			DBG_BLOCK();
			DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<162>");
			t_node=t_node->f_right;
		}else{
			DBG_BLOCK();
			DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<163>");
			if(t_cmp<0){
				DBG_BLOCK();
				DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<164>");
				t_node=t_node->f_left;
			}else{
				DBG_BLOCK();
				DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<166>");
				return t_node;
			}
		}
	}
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<169>");
	return t_node;
}
bool bb_map_Map::m_Contains(String t_key){
	DBG_ENTER("Map.Contains")
	bb_map_Map *self=this;
	DBG_LOCAL(self,"Self")
	DBG_LOCAL(t_key,"key")
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<25>");
	bool t_=m_FindNode(t_key)!=0;
	return t_;
}
int bb_map_Map::m_RotateLeft(bb_map_Node* t_node){
	DBG_ENTER("Map.RotateLeft")
	bb_map_Map *self=this;
	DBG_LOCAL(self,"Self")
	DBG_LOCAL(t_node,"node")
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<251>");
	bb_map_Node* t_child=t_node->f_right;
	DBG_LOCAL(t_child,"child")
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<252>");
	gc_assign(t_node->f_right,t_child->f_left);
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<253>");
	if((t_child->f_left)!=0){
		DBG_BLOCK();
		DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<254>");
		gc_assign(t_child->f_left->f_parent,t_node);
	}
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<256>");
	gc_assign(t_child->f_parent,t_node->f_parent);
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<257>");
	if((t_node->f_parent)!=0){
		DBG_BLOCK();
		DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<258>");
		if(t_node==t_node->f_parent->f_left){
			DBG_BLOCK();
			DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<259>");
			gc_assign(t_node->f_parent->f_left,t_child);
		}else{
			DBG_BLOCK();
			DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<261>");
			gc_assign(t_node->f_parent->f_right,t_child);
		}
	}else{
		DBG_BLOCK();
		DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<264>");
		gc_assign(f_root,t_child);
	}
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<266>");
	gc_assign(t_child->f_left,t_node);
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<267>");
	gc_assign(t_node->f_parent,t_child);
	return 0;
}
int bb_map_Map::m_RotateRight(bb_map_Node* t_node){
	DBG_ENTER("Map.RotateRight")
	bb_map_Map *self=this;
	DBG_LOCAL(self,"Self")
	DBG_LOCAL(t_node,"node")
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<271>");
	bb_map_Node* t_child=t_node->f_left;
	DBG_LOCAL(t_child,"child")
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<272>");
	gc_assign(t_node->f_left,t_child->f_right);
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<273>");
	if((t_child->f_right)!=0){
		DBG_BLOCK();
		DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<274>");
		gc_assign(t_child->f_right->f_parent,t_node);
	}
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<276>");
	gc_assign(t_child->f_parent,t_node->f_parent);
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<277>");
	if((t_node->f_parent)!=0){
		DBG_BLOCK();
		DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<278>");
		if(t_node==t_node->f_parent->f_right){
			DBG_BLOCK();
			DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<279>");
			gc_assign(t_node->f_parent->f_right,t_child);
		}else{
			DBG_BLOCK();
			DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<281>");
			gc_assign(t_node->f_parent->f_left,t_child);
		}
	}else{
		DBG_BLOCK();
		DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<284>");
		gc_assign(f_root,t_child);
	}
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<286>");
	gc_assign(t_child->f_right,t_node);
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<287>");
	gc_assign(t_node->f_parent,t_child);
	return 0;
}
int bb_map_Map::m_InsertFixup(bb_map_Node* t_node){
	DBG_ENTER("Map.InsertFixup")
	bb_map_Map *self=this;
	DBG_LOCAL(self,"Self")
	DBG_LOCAL(t_node,"node")
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<212>");
	while(((t_node->f_parent)!=0) && t_node->f_parent->f_color==-1 && ((t_node->f_parent->f_parent)!=0)){
		DBG_BLOCK();
		DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<213>");
		if(t_node->f_parent==t_node->f_parent->f_parent->f_left){
			DBG_BLOCK();
			DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<214>");
			bb_map_Node* t_uncle=t_node->f_parent->f_parent->f_right;
			DBG_LOCAL(t_uncle,"uncle")
			DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<215>");
			if(((t_uncle)!=0) && t_uncle->f_color==-1){
				DBG_BLOCK();
				DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<216>");
				t_node->f_parent->f_color=1;
				DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<217>");
				t_uncle->f_color=1;
				DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<218>");
				t_uncle->f_parent->f_color=-1;
				DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<219>");
				t_node=t_uncle->f_parent;
			}else{
				DBG_BLOCK();
				DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<221>");
				if(t_node==t_node->f_parent->f_right){
					DBG_BLOCK();
					DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<222>");
					t_node=t_node->f_parent;
					DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<223>");
					m_RotateLeft(t_node);
				}
				DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<225>");
				t_node->f_parent->f_color=1;
				DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<226>");
				t_node->f_parent->f_parent->f_color=-1;
				DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<227>");
				m_RotateRight(t_node->f_parent->f_parent);
			}
		}else{
			DBG_BLOCK();
			DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<230>");
			bb_map_Node* t_uncle2=t_node->f_parent->f_parent->f_left;
			DBG_LOCAL(t_uncle2,"uncle")
			DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<231>");
			if(((t_uncle2)!=0) && t_uncle2->f_color==-1){
				DBG_BLOCK();
				DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<232>");
				t_node->f_parent->f_color=1;
				DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<233>");
				t_uncle2->f_color=1;
				DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<234>");
				t_uncle2->f_parent->f_color=-1;
				DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<235>");
				t_node=t_uncle2->f_parent;
			}else{
				DBG_BLOCK();
				DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<237>");
				if(t_node==t_node->f_parent->f_left){
					DBG_BLOCK();
					DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<238>");
					t_node=t_node->f_parent;
					DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<239>");
					m_RotateRight(t_node);
				}
				DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<241>");
				t_node->f_parent->f_color=1;
				DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<242>");
				t_node->f_parent->f_parent->f_color=-1;
				DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<243>");
				m_RotateLeft(t_node->f_parent->f_parent);
			}
		}
	}
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<247>");
	f_root->f_color=1;
	return 0;
}
bool bb_map_Map::m_Set(String t_key,bb_directorevents_DirectorEvents* t_value){
	DBG_ENTER("Map.Set")
	bb_map_Map *self=this;
	DBG_LOCAL(self,"Self")
	DBG_LOCAL(t_key,"key")
	DBG_LOCAL(t_value,"value")
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<29>");
	bb_map_Node* t_node=f_root;
	DBG_LOCAL(t_node,"node")
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<30>");
	bb_map_Node* t_parent=0;
	int t_cmp=0;
	DBG_LOCAL(t_parent,"parent")
	DBG_LOCAL(t_cmp,"cmp")
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<32>");
	while((t_node)!=0){
		DBG_BLOCK();
		DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<33>");
		t_parent=t_node;
		DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<34>");
		t_cmp=m_Compare(t_key,t_node->f_key);
		DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<35>");
		if(t_cmp>0){
			DBG_BLOCK();
			DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<36>");
			t_node=t_node->f_right;
		}else{
			DBG_BLOCK();
			DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<37>");
			if(t_cmp<0){
				DBG_BLOCK();
				DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<38>");
				t_node=t_node->f_left;
			}else{
				DBG_BLOCK();
				DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<40>");
				gc_assign(t_node->f_value,t_value);
				DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<41>");
				return false;
			}
		}
	}
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<45>");
	t_node=(new bb_map_Node)->g_new(t_key,t_value,-1,t_parent);
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<47>");
	if((t_parent)!=0){
		DBG_BLOCK();
		DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<48>");
		if(t_cmp>0){
			DBG_BLOCK();
			DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<49>");
			gc_assign(t_parent->f_right,t_node);
		}else{
			DBG_BLOCK();
			DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<51>");
			gc_assign(t_parent->f_left,t_node);
		}
		DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<53>");
		m_InsertFixup(t_node);
	}else{
		DBG_BLOCK();
		DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<55>");
		gc_assign(f_root,t_node);
	}
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<57>");
	return true;
}
bb_directorevents_DirectorEvents* bb_map_Map::m_Get(String t_key){
	DBG_ENTER("Map.Get")
	bb_map_Map *self=this;
	DBG_LOCAL(self,"Self")
	DBG_LOCAL(t_key,"key")
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<101>");
	bb_map_Node* t_node=m_FindNode(t_key);
	DBG_LOCAL(t_node,"node")
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<102>");
	if((t_node)!=0){
		DBG_BLOCK();
		return t_node->f_value;
	}
	return 0;
}
void bb_map_Map::mark(){
	Object::mark();
	gc_mark_q(f_root);
}
String bb_map_Map::debug(){
	String t="(Map)\n";
	t+=dbg_decl("root",&f_root);
	return t;
}
bb_map_StringMap::bb_map_StringMap(){
}
bb_map_StringMap* bb_map_StringMap::g_new(){
	DBG_ENTER("StringMap.new")
	bb_map_StringMap *self=this;
	DBG_LOCAL(self,"Self")
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<551>");
	bb_map_Map::g_new();
	return this;
}
int bb_map_StringMap::m_Compare(String t_lhs,String t_rhs){
	DBG_ENTER("StringMap.Compare")
	bb_map_StringMap *self=this;
	DBG_LOCAL(self,"Self")
	DBG_LOCAL(t_lhs,"lhs")
	DBG_LOCAL(t_rhs,"rhs")
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<554>");
	int t_=t_lhs.Compare(t_rhs);
	return t_;
}
void bb_map_StringMap::mark(){
	bb_map_Map::mark();
}
String bb_map_StringMap::debug(){
	String t="(StringMap)\n";
	t=bb_map_Map::debug()+t;
	return t;
}
bb_map_Node::bb_map_Node(){
	f_key=String();
	f_right=0;
	f_left=0;
	f_value=0;
	f_color=0;
	f_parent=0;
}
bb_map_Node* bb_map_Node::g_new(String t_key,bb_directorevents_DirectorEvents* t_value,int t_color,bb_map_Node* t_parent){
	DBG_ENTER("Node.new")
	bb_map_Node *self=this;
	DBG_LOCAL(self,"Self")
	DBG_LOCAL(t_key,"key")
	DBG_LOCAL(t_value,"value")
	DBG_LOCAL(t_color,"color")
	DBG_LOCAL(t_parent,"parent")
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<364>");
	this->f_key=t_key;
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<365>");
	gc_assign(this->f_value,t_value);
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<366>");
	this->f_color=t_color;
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<367>");
	gc_assign(this->f_parent,t_parent);
	return this;
}
bb_map_Node* bb_map_Node::g_new2(){
	DBG_ENTER("Node.new")
	bb_map_Node *self=this;
	DBG_LOCAL(self,"Self")
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<361>");
	return this;
}
void bb_map_Node::mark(){
	Object::mark();
	gc_mark_q(f_right);
	gc_mark_q(f_left);
	gc_mark_q(f_value);
	gc_mark_q(f_parent);
}
String bb_map_Node::debug(){
	String t="(Node)\n";
	t+=dbg_decl("key",&f_key);
	t+=dbg_decl("value",&f_value);
	t+=dbg_decl("color",&f_color);
	t+=dbg_decl("parent",&f_parent);
	t+=dbg_decl("left",&f_left);
	t+=dbg_decl("right",&f_right);
	return t;
}
bb_map_Map2::bb_map_Map2(){
	f_root=0;
}
bb_map_Map2* bb_map_Map2::g_new(){
	DBG_ENTER("Map.new")
	bb_map_Map2 *self=this;
	DBG_LOCAL(self,"Self")
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<7>");
	return this;
}
int bb_map_Map2::m_RotateLeft2(bb_map_Node2* t_node){
	DBG_ENTER("Map.RotateLeft")
	bb_map_Map2 *self=this;
	DBG_LOCAL(self,"Self")
	DBG_LOCAL(t_node,"node")
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<251>");
	bb_map_Node2* t_child=t_node->f_right;
	DBG_LOCAL(t_child,"child")
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<252>");
	gc_assign(t_node->f_right,t_child->f_left);
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<253>");
	if((t_child->f_left)!=0){
		DBG_BLOCK();
		DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<254>");
		gc_assign(t_child->f_left->f_parent,t_node);
	}
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<256>");
	gc_assign(t_child->f_parent,t_node->f_parent);
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<257>");
	if((t_node->f_parent)!=0){
		DBG_BLOCK();
		DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<258>");
		if(t_node==t_node->f_parent->f_left){
			DBG_BLOCK();
			DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<259>");
			gc_assign(t_node->f_parent->f_left,t_child);
		}else{
			DBG_BLOCK();
			DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<261>");
			gc_assign(t_node->f_parent->f_right,t_child);
		}
	}else{
		DBG_BLOCK();
		DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<264>");
		gc_assign(f_root,t_child);
	}
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<266>");
	gc_assign(t_child->f_left,t_node);
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<267>");
	gc_assign(t_node->f_parent,t_child);
	return 0;
}
int bb_map_Map2::m_RotateRight2(bb_map_Node2* t_node){
	DBG_ENTER("Map.RotateRight")
	bb_map_Map2 *self=this;
	DBG_LOCAL(self,"Self")
	DBG_LOCAL(t_node,"node")
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<271>");
	bb_map_Node2* t_child=t_node->f_left;
	DBG_LOCAL(t_child,"child")
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<272>");
	gc_assign(t_node->f_left,t_child->f_right);
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<273>");
	if((t_child->f_right)!=0){
		DBG_BLOCK();
		DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<274>");
		gc_assign(t_child->f_right->f_parent,t_node);
	}
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<276>");
	gc_assign(t_child->f_parent,t_node->f_parent);
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<277>");
	if((t_node->f_parent)!=0){
		DBG_BLOCK();
		DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<278>");
		if(t_node==t_node->f_parent->f_right){
			DBG_BLOCK();
			DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<279>");
			gc_assign(t_node->f_parent->f_right,t_child);
		}else{
			DBG_BLOCK();
			DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<281>");
			gc_assign(t_node->f_parent->f_left,t_child);
		}
	}else{
		DBG_BLOCK();
		DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<284>");
		gc_assign(f_root,t_child);
	}
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<286>");
	gc_assign(t_child->f_right,t_node);
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<287>");
	gc_assign(t_node->f_parent,t_child);
	return 0;
}
int bb_map_Map2::m_InsertFixup2(bb_map_Node2* t_node){
	DBG_ENTER("Map.InsertFixup")
	bb_map_Map2 *self=this;
	DBG_LOCAL(self,"Self")
	DBG_LOCAL(t_node,"node")
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<212>");
	while(((t_node->f_parent)!=0) && t_node->f_parent->f_color==-1 && ((t_node->f_parent->f_parent)!=0)){
		DBG_BLOCK();
		DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<213>");
		if(t_node->f_parent==t_node->f_parent->f_parent->f_left){
			DBG_BLOCK();
			DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<214>");
			bb_map_Node2* t_uncle=t_node->f_parent->f_parent->f_right;
			DBG_LOCAL(t_uncle,"uncle")
			DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<215>");
			if(((t_uncle)!=0) && t_uncle->f_color==-1){
				DBG_BLOCK();
				DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<216>");
				t_node->f_parent->f_color=1;
				DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<217>");
				t_uncle->f_color=1;
				DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<218>");
				t_uncle->f_parent->f_color=-1;
				DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<219>");
				t_node=t_uncle->f_parent;
			}else{
				DBG_BLOCK();
				DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<221>");
				if(t_node==t_node->f_parent->f_right){
					DBG_BLOCK();
					DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<222>");
					t_node=t_node->f_parent;
					DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<223>");
					m_RotateLeft2(t_node);
				}
				DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<225>");
				t_node->f_parent->f_color=1;
				DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<226>");
				t_node->f_parent->f_parent->f_color=-1;
				DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<227>");
				m_RotateRight2(t_node->f_parent->f_parent);
			}
		}else{
			DBG_BLOCK();
			DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<230>");
			bb_map_Node2* t_uncle2=t_node->f_parent->f_parent->f_left;
			DBG_LOCAL(t_uncle2,"uncle")
			DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<231>");
			if(((t_uncle2)!=0) && t_uncle2->f_color==-1){
				DBG_BLOCK();
				DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<232>");
				t_node->f_parent->f_color=1;
				DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<233>");
				t_uncle2->f_color=1;
				DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<234>");
				t_uncle2->f_parent->f_color=-1;
				DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<235>");
				t_node=t_uncle2->f_parent;
			}else{
				DBG_BLOCK();
				DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<237>");
				if(t_node==t_node->f_parent->f_left){
					DBG_BLOCK();
					DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<238>");
					t_node=t_node->f_parent;
					DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<239>");
					m_RotateRight2(t_node);
				}
				DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<241>");
				t_node->f_parent->f_color=1;
				DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<242>");
				t_node->f_parent->f_parent->f_color=-1;
				DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<243>");
				m_RotateLeft2(t_node->f_parent->f_parent);
			}
		}
	}
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<247>");
	f_root->f_color=1;
	return 0;
}
bool bb_map_Map2::m_Set2(String t_key,bb_routerevents_RouterEvents* t_value){
	DBG_ENTER("Map.Set")
	bb_map_Map2 *self=this;
	DBG_LOCAL(self,"Self")
	DBG_LOCAL(t_key,"key")
	DBG_LOCAL(t_value,"value")
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<29>");
	bb_map_Node2* t_node=f_root;
	DBG_LOCAL(t_node,"node")
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<30>");
	bb_map_Node2* t_parent=0;
	int t_cmp=0;
	DBG_LOCAL(t_parent,"parent")
	DBG_LOCAL(t_cmp,"cmp")
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<32>");
	while((t_node)!=0){
		DBG_BLOCK();
		DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<33>");
		t_parent=t_node;
		DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<34>");
		t_cmp=m_Compare(t_key,t_node->f_key);
		DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<35>");
		if(t_cmp>0){
			DBG_BLOCK();
			DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<36>");
			t_node=t_node->f_right;
		}else{
			DBG_BLOCK();
			DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<37>");
			if(t_cmp<0){
				DBG_BLOCK();
				DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<38>");
				t_node=t_node->f_left;
			}else{
				DBG_BLOCK();
				DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<40>");
				gc_assign(t_node->f_value,t_value);
				DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<41>");
				return false;
			}
		}
	}
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<45>");
	t_node=(new bb_map_Node2)->g_new(t_key,t_value,-1,t_parent);
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<47>");
	if((t_parent)!=0){
		DBG_BLOCK();
		DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<48>");
		if(t_cmp>0){
			DBG_BLOCK();
			DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<49>");
			gc_assign(t_parent->f_right,t_node);
		}else{
			DBG_BLOCK();
			DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<51>");
			gc_assign(t_parent->f_left,t_node);
		}
		DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<53>");
		m_InsertFixup2(t_node);
	}else{
		DBG_BLOCK();
		DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<55>");
		gc_assign(f_root,t_node);
	}
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<57>");
	return true;
}
bb_map_Node2* bb_map_Map2::m_FindNode(String t_key){
	DBG_ENTER("Map.FindNode")
	bb_map_Map2 *self=this;
	DBG_LOCAL(self,"Self")
	DBG_LOCAL(t_key,"key")
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<157>");
	bb_map_Node2* t_node=f_root;
	DBG_LOCAL(t_node,"node")
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<159>");
	while((t_node)!=0){
		DBG_BLOCK();
		DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<160>");
		int t_cmp=m_Compare(t_key,t_node->f_key);
		DBG_LOCAL(t_cmp,"cmp")
		DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<161>");
		if(t_cmp>0){
			DBG_BLOCK();
			DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<162>");
			t_node=t_node->f_right;
		}else{
			DBG_BLOCK();
			DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<163>");
			if(t_cmp<0){
				DBG_BLOCK();
				DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<164>");
				t_node=t_node->f_left;
			}else{
				DBG_BLOCK();
				DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<166>");
				return t_node;
			}
		}
	}
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<169>");
	return t_node;
}
bb_routerevents_RouterEvents* bb_map_Map2::m_Get(String t_key){
	DBG_ENTER("Map.Get")
	bb_map_Map2 *self=this;
	DBG_LOCAL(self,"Self")
	DBG_LOCAL(t_key,"key")
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<101>");
	bb_map_Node2* t_node=m_FindNode(t_key);
	DBG_LOCAL(t_node,"node")
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<102>");
	if((t_node)!=0){
		DBG_BLOCK();
		return t_node->f_value;
	}
	return 0;
}
void bb_map_Map2::mark(){
	Object::mark();
	gc_mark_q(f_root);
}
String bb_map_Map2::debug(){
	String t="(Map)\n";
	t+=dbg_decl("root",&f_root);
	return t;
}
bb_map_StringMap2::bb_map_StringMap2(){
}
bb_map_StringMap2* bb_map_StringMap2::g_new(){
	DBG_ENTER("StringMap.new")
	bb_map_StringMap2 *self=this;
	DBG_LOCAL(self,"Self")
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<551>");
	bb_map_Map2::g_new();
	return this;
}
int bb_map_StringMap2::m_Compare(String t_lhs,String t_rhs){
	DBG_ENTER("StringMap.Compare")
	bb_map_StringMap2 *self=this;
	DBG_LOCAL(self,"Self")
	DBG_LOCAL(t_lhs,"lhs")
	DBG_LOCAL(t_rhs,"rhs")
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<554>");
	int t_=t_lhs.Compare(t_rhs);
	return t_;
}
void bb_map_StringMap2::mark(){
	bb_map_Map2::mark();
}
String bb_map_StringMap2::debug(){
	String t="(StringMap)\n";
	t=bb_map_Map2::debug()+t;
	return t;
}
bb_map_Node2::bb_map_Node2(){
	f_key=String();
	f_right=0;
	f_left=0;
	f_value=0;
	f_color=0;
	f_parent=0;
}
bb_map_Node2* bb_map_Node2::g_new(String t_key,bb_routerevents_RouterEvents* t_value,int t_color,bb_map_Node2* t_parent){
	DBG_ENTER("Node.new")
	bb_map_Node2 *self=this;
	DBG_LOCAL(self,"Self")
	DBG_LOCAL(t_key,"key")
	DBG_LOCAL(t_value,"value")
	DBG_LOCAL(t_color,"color")
	DBG_LOCAL(t_parent,"parent")
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<364>");
	this->f_key=t_key;
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<365>");
	gc_assign(this->f_value,t_value);
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<366>");
	this->f_color=t_color;
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<367>");
	gc_assign(this->f_parent,t_parent);
	return this;
}
bb_map_Node2* bb_map_Node2::g_new2(){
	DBG_ENTER("Node.new")
	bb_map_Node2 *self=this;
	DBG_LOCAL(self,"Self")
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<361>");
	return this;
}
void bb_map_Node2::mark(){
	Object::mark();
	gc_mark_q(f_right);
	gc_mark_q(f_left);
	gc_mark_q(f_value);
	gc_mark_q(f_parent);
}
String bb_map_Node2::debug(){
	String t="(Node)\n";
	t+=dbg_decl("key",&f_key);
	t+=dbg_decl("value",&f_value);
	t+=dbg_decl("color",&f_color);
	t+=dbg_decl("parent",&f_parent);
	t+=dbg_decl("left",&f_left);
	t+=dbg_decl("right",&f_right);
	return t;
}
bb_menuscene_MenuScene::bb_menuscene_MenuScene(){
	f_easy=0;
	f_normal=0;
	f_normalActive=0;
	f_advanced=0;
	f_advancedActive=0;
	f_highscore=0;
	f_lock=0;
	f_isLocked=true;
	f_paymentProcessing=false;
	f_waitingText=0;
	f_waitingImage=0;
}
bb_menuscene_MenuScene* bb_menuscene_MenuScene::g_new(){
	DBG_ENTER("MenuScene.new")
	bb_menuscene_MenuScene *self=this;
	DBG_LOCAL(self,"Self")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/menuscene.monkey<14>");
	bb_scene_Scene::g_new();
	return this;
}
void bb_menuscene_MenuScene::m_ToggleLock(){
	DBG_ENTER("MenuScene.ToggleLock")
	bb_menuscene_MenuScene *self=this;
	DBG_LOCAL(self,"Self")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/menuscene.monkey<148>");
	if(f_isLocked){
		DBG_BLOCK();
		DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/menuscene.monkey<149>");
		f_isLocked=false;
		DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/menuscene.monkey<150>");
		m_layer()->m_Remove(f_lock);
		DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/menuscene.monkey<151>");
		m_layer()->m_Remove(f_normal);
		DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/menuscene.monkey<152>");
		m_layer()->m_Remove(f_advanced);
		DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/menuscene.monkey<153>");
		m_layer()->m_Add4(f_normalActive);
		DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/menuscene.monkey<154>");
		m_layer()->m_Add4(f_advancedActive);
	}else{
		DBG_BLOCK();
		DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/menuscene.monkey<156>");
		f_isLocked=true;
		DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/menuscene.monkey<157>");
		m_layer()->m_Remove(f_normalActive);
		DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/menuscene.monkey<158>");
		m_layer()->m_Remove(f_advancedActive);
		DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/menuscene.monkey<159>");
		m_layer()->m_Add4(f_normal);
		DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/menuscene.monkey<160>");
		m_layer()->m_Add4(f_advanced);
		DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/menuscene.monkey<161>");
		m_layer()->m_Add4(f_lock);
	}
}
void bb_menuscene_MenuScene::m_OnCreate(bb_director_Director* t_director){
	DBG_ENTER("MenuScene.OnCreate")
	bb_menuscene_MenuScene *self=this;
	DBG_LOCAL(self,"Self")
	DBG_LOCAL(t_director,"director")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/menuscene.monkey<32>");
	bb_vector2d_Vector2D* t_offset=(new bb_vector2d_Vector2D)->g_new(FLOAT(0.0),FLOAT(150.0));
	DBG_LOCAL(t_offset,"offset")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/menuscene.monkey<33>");
	gc_assign(f_easy,(new bb_sprite_Sprite)->g_new(String(L"01_02-easy.png"),(new bb_vector2d_Vector2D)->g_new(FLOAT(0.0),FLOAT(290.0))));
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/menuscene.monkey<34>");
	gc_assign(f_normal,(new bb_sprite_Sprite)->g_new(String(L"01_02-normal.png"),f_easy->m_pos()->m_Copy()->m_Add2(t_offset)));
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/menuscene.monkey<35>");
	gc_assign(f_normalActive,(new bb_sprite_Sprite)->g_new(String(L"01_02-normal_active.png"),f_normal->m_pos()));
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/menuscene.monkey<36>");
	gc_assign(f_advanced,(new bb_sprite_Sprite)->g_new(String(L"01_02-advanced.png"),f_normal->m_pos()->m_Copy()->m_Add2(t_offset)));
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/menuscene.monkey<37>");
	gc_assign(f_advancedActive,(new bb_sprite_Sprite)->g_new(String(L"01_02-advanced_active.png"),f_advanced->m_pos()));
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/menuscene.monkey<38>");
	gc_assign(f_highscore,(new bb_sprite_Sprite)->g_new(String(L"01_04button-highscore.png"),f_advanced->m_pos()->m_Copy()->m_Add2(t_offset)));
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/menuscene.monkey<41>");
	bb_vector2d_Vector2D* t_pos=f_advanced->m_pos()->m_Copy()->m_Add2(f_advanced->m_size())->m_Sub(f_normal->m_pos())->m_Div2(FLOAT(2.0));
	DBG_LOCAL(t_pos,"pos")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/menuscene.monkey<42>");
	t_pos->f_y+=f_normal->m_pos()->f_y;
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/menuscene.monkey<43>");
	gc_assign(f_lock,(new bb_sprite_Sprite)->g_new(String(L"locked.png"),t_pos));
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/menuscene.monkey<44>");
	f_lock->m_pos()->f_y-=f_lock->m_center()->f_y;
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/menuscene.monkey<46>");
	m_layer()->m_Add4((new bb_sprite_Sprite)->g_new(String(L"01_main.jpg"),0));
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/menuscene.monkey<47>");
	m_layer()->m_Add4(f_easy);
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/menuscene.monkey<48>");
	m_layer()->m_Add4(f_normal);
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/menuscene.monkey<49>");
	m_layer()->m_Add4(f_advanced);
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/menuscene.monkey<50>");
	m_layer()->m_Add4(f_highscore);
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/menuscene.monkey<51>");
	m_layer()->m_Add4(f_lock);
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/menuscene.monkey<53>");
	bb_scene_Scene::m_OnCreate(t_director);
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/menuscene.monkey<55>");
	f_easy->m_CenterX(t_director);
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/menuscene.monkey<56>");
	f_normal->m_CenterX(t_director);
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/menuscene.monkey<57>");
	f_advanced->m_CenterX(t_director);
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/menuscene.monkey<58>");
	f_highscore->m_CenterX(t_director);
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/menuscene.monkey<60>");
	String t_[]={String(L"com.coragames.daffydrop.fullversion")};
	bb_iap_InitInAppPurchases(String(L"com.coragames.daffydrop"),Array<String >(t_,1));
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/menuscene.monkey<61>");
	if((bb_iap_isProductPurchased(String(L"com.coragames.daffydrop.fullversion")))!=0){
		DBG_BLOCK();
		DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/menuscene.monkey<62>");
		m_ToggleLock();
	}
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/menuscene.monkey<65>");
	bb_appirater_Appirater::g_Launched();
}
void bb_menuscene_MenuScene::m_OnResume(int t_delta){
	DBG_ENTER("MenuScene.OnResume")
	bb_menuscene_MenuScene *self=this;
	DBG_LOCAL(self,"Self")
	DBG_LOCAL(t_delta,"delta")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/menuscene.monkey<69>");
	bb_appirater_Appirater::g_Launched();
}
void bb_menuscene_MenuScene::m_PlayEasy(){
	DBG_ENTER("MenuScene.PlayEasy")
	bb_menuscene_MenuScene *self=this;
	DBG_LOCAL(self,"Self")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/menuscene.monkey<166>");
	bb_severity_CurrentSeverity()->m_Set5(0);
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/menuscene.monkey<167>");
	m_router()->m_Goto(String(L"game"));
}
void bb_menuscene_MenuScene::m_InitializeWaitingImages(){
	DBG_ENTER("MenuScene.InitializeWaitingImages")
	bb_menuscene_MenuScene *self=this;
	DBG_LOCAL(self,"Self")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/menuscene.monkey<135>");
	gc_assign(f_waitingText,(new bb_font_Font)->g_new(String(L"CoRa"),0));
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/menuscene.monkey<136>");
	f_waitingText->m_OnCreate(m_director());
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/menuscene.monkey<137>");
	f_waitingText->m_text(String(L"Loading"));
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/menuscene.monkey<138>");
	f_waitingText->m_align(1);
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/menuscene.monkey<139>");
	f_waitingText->m_pos2(m_director()->m_center()->m_Copy());
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/menuscene.monkey<141>");
	gc_assign(f_waitingImage,(new bb_sprite_Sprite)->g_new(String(L"star_inside.png"),0));
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/menuscene.monkey<142>");
	f_waitingImage->m_OnCreate(m_director());
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/menuscene.monkey<143>");
	f_waitingImage->m_Center(m_director());
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/menuscene.monkey<144>");
	bb_vector2d_Vector2D* t_=f_waitingImage->m_pos();
	t_->f_y=t_->f_y-FLOAT(50.0);
}
void bb_menuscene_MenuScene::m_HandleLocked(){
	DBG_ENTER("MenuScene.HandleLocked")
	bb_menuscene_MenuScene *self=this;
	DBG_LOCAL(self,"Self")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/menuscene.monkey<189>");
	if(f_paymentProcessing){
		DBG_BLOCK();
		return;
	}
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/menuscene.monkey<190>");
	if(!f_isLocked){
		DBG_BLOCK();
		return;
	}
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/menuscene.monkey<192>");
	m_InitializeWaitingImages();
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/menuscene.monkey<193>");
	f_paymentProcessing=true;
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/menuscene.monkey<194>");
	bb_iap_buyProduct(String(L"com.coragames.daffydrop.fullversion"));
}
void bb_menuscene_MenuScene::m_PlayNormal(){
	DBG_ENTER("MenuScene.PlayNormal")
	bb_menuscene_MenuScene *self=this;
	DBG_LOCAL(self,"Self")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/menuscene.monkey<171>");
	if(f_isLocked){
		DBG_BLOCK();
		DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/menuscene.monkey<172>");
		m_HandleLocked();
		return;
	}
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/menuscene.monkey<175>");
	bb_severity_CurrentSeverity()->m_Set5(1);
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/menuscene.monkey<176>");
	m_router()->m_Goto(String(L"game"));
}
void bb_menuscene_MenuScene::m_PlayAdvanced(){
	DBG_ENTER("MenuScene.PlayAdvanced")
	bb_menuscene_MenuScene *self=this;
	DBG_LOCAL(self,"Self")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/menuscene.monkey<180>");
	if(f_isLocked){
		DBG_BLOCK();
		DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/menuscene.monkey<181>");
		m_HandleLocked();
		return;
	}
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/menuscene.monkey<184>");
	bb_severity_CurrentSeverity()->m_Set5(2);
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/menuscene.monkey<185>");
	m_router()->m_Goto(String(L"game"));
}
void bb_menuscene_MenuScene::m_OnTouchDown(bb_touchevent_TouchEvent* t_event){
	DBG_ENTER("MenuScene.OnTouchDown")
	bb_menuscene_MenuScene *self=this;
	DBG_LOCAL(self,"Self")
	DBG_LOCAL(t_event,"event")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/menuscene.monkey<73>");
	if(f_paymentProcessing){
		DBG_BLOCK();
		return;
	}
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/menuscene.monkey<74>");
	if(f_easy->m_Collide(t_event->m_pos())){
		DBG_BLOCK();
		m_PlayEasy();
	}
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/menuscene.monkey<75>");
	if(f_normal->m_Collide(t_event->m_pos())){
		DBG_BLOCK();
		m_PlayNormal();
	}
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/menuscene.monkey<76>");
	if(f_advanced->m_Collide(t_event->m_pos())){
		DBG_BLOCK();
		m_PlayAdvanced();
	}
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/menuscene.monkey<77>");
	if(f_highscore->m_Collide(t_event->m_pos())){
		DBG_BLOCK();
		m_router()->m_Goto(String(L"highscore"));
	}
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/menuscene.monkey<78>");
	if(f_lock->m_Collide(t_event->m_pos())){
		DBG_BLOCK();
		m_HandleLocked();
	}
}
void bb_menuscene_MenuScene::m_OnKeyDown(bb_keyevent_KeyEvent* t_event){
	DBG_ENTER("MenuScene.OnKeyDown")
	bb_menuscene_MenuScene *self=this;
	DBG_LOCAL(self,"Self")
	DBG_LOCAL(t_event,"event")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/menuscene.monkey<82>");
	if(f_paymentProcessing){
		DBG_BLOCK();
		return;
	}
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/menuscene.monkey<83>");
	int t_1=t_event->m_code();
	DBG_LOCAL(t_1,"1")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/menuscene.monkey<84>");
	if(t_1==69){
		DBG_BLOCK();
		DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/menuscene.monkey<85>");
		m_PlayEasy();
	}else{
		DBG_BLOCK();
		DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/menuscene.monkey<86>");
		if(t_1==78){
			DBG_BLOCK();
			DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/menuscene.monkey<87>");
			m_PlayNormal();
		}else{
			DBG_BLOCK();
			DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/menuscene.monkey<88>");
			if(t_1==65){
				DBG_BLOCK();
				DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/menuscene.monkey<89>");
				m_PlayAdvanced();
			}else{
				DBG_BLOCK();
				DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/menuscene.monkey<90>");
				if(t_1==72){
					DBG_BLOCK();
					DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/menuscene.monkey<91>");
					m_router()->m_Goto(String(L"highscore"));
				}
			}
		}
	}
}
void bb_menuscene_MenuScene::m_OnUpdate(Float t_delta,Float t_frameTime){
	DBG_ENTER("MenuScene.OnUpdate")
	bb_menuscene_MenuScene *self=this;
	DBG_LOCAL(self,"Self")
	DBG_LOCAL(t_delta,"delta")
	DBG_LOCAL(t_frameTime,"frameTime")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/menuscene.monkey<96>");
	bb_scene_Scene::m_OnUpdate(t_delta,t_frameTime);
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/menuscene.monkey<98>");
	if(!f_isLocked){
		DBG_BLOCK();
		return;
	}
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/menuscene.monkey<99>");
	if(!f_paymentProcessing){
		DBG_BLOCK();
		return;
	}
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/menuscene.monkey<100>");
	if(bb_iap_isPurchaseInProgress()){
		DBG_BLOCK();
		return;
	}
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/menuscene.monkey<101>");
	f_paymentProcessing=false;
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/menuscene.monkey<103>");
	if(!((bb_iap_isProductPurchased(String(L"com.coragames.daffydrop.fullversion")))!=0)){
		DBG_BLOCK();
		return;
	}
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/menuscene.monkey<104>");
	m_ToggleLock();
}
void bb_menuscene_MenuScene::m_OnRender(){
	DBG_ENTER("MenuScene.OnRender")
	bb_menuscene_MenuScene *self=this;
	DBG_LOCAL(self,"Self")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/menuscene.monkey<108>");
	bb_scene_Scene::m_OnRender();
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/menuscene.monkey<110>");
	if(f_paymentProcessing){
		DBG_BLOCK();
		DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/menuscene.monkey<111>");
		m_RenderBlend();
		DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/menuscene.monkey<112>");
		bb_graphics_PushMatrix();
		DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/menuscene.monkey<113>");
		bb_graphics_Translate(-m_director()->m_center()->f_x,-m_director()->m_center()->f_y);
		DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/menuscene.monkey<114>");
		bb_graphics_Scale(FLOAT(2.0),FLOAT(2.0));
		DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/menuscene.monkey<116>");
		f_waitingImage->m_OnRender();
		DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/menuscene.monkey<118>");
		bb_graphics_PushMatrix();
		DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/menuscene.monkey<119>");
		bb_graphics_Translate(FLOAT(-2.0),FLOAT(1.0));
		DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/menuscene.monkey<120>");
		bb_graphics_SetColor(FLOAT(47.0),FLOAT(85.0),FLOAT(98.0));
		DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/menuscene.monkey<121>");
		f_waitingText->m_OnRender();
		DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/menuscene.monkey<122>");
		bb_graphics_PopMatrix();
		DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/menuscene.monkey<124>");
		bb_graphics_PushMatrix();
		DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/menuscene.monkey<125>");
		bb_graphics_SetColor(FLOAT(255.0),FLOAT(255.0),FLOAT(255.0));
		DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/menuscene.monkey<126>");
		f_waitingText->m_OnRender();
		DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/menuscene.monkey<127>");
		bb_graphics_PopMatrix();
		DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/menuscene.monkey<128>");
		bb_graphics_PopMatrix();
	}
}
void bb_menuscene_MenuScene::mark(){
	bb_scene_Scene::mark();
	gc_mark_q(f_easy);
	gc_mark_q(f_normal);
	gc_mark_q(f_normalActive);
	gc_mark_q(f_advanced);
	gc_mark_q(f_advancedActive);
	gc_mark_q(f_highscore);
	gc_mark_q(f_lock);
	gc_mark_q(f_waitingText);
	gc_mark_q(f_waitingImage);
}
String bb_menuscene_MenuScene::debug(){
	String t="(MenuScene)\n";
	t=bb_scene_Scene::debug()+t;
	t+=dbg_decl("easy",&f_easy);
	t+=dbg_decl("normal",&f_normal);
	t+=dbg_decl("normalActive",&f_normalActive);
	t+=dbg_decl("advanced",&f_advanced);
	t+=dbg_decl("advancedActive",&f_advancedActive);
	t+=dbg_decl("highscore",&f_highscore);
	t+=dbg_decl("isLocked",&f_isLocked);
	t+=dbg_decl("lock",&f_lock);
	t+=dbg_decl("paymentProcessing",&f_paymentProcessing);
	t+=dbg_decl("waitingText",&f_waitingText);
	t+=dbg_decl("waitingImage",&f_waitingImage);
	return t;
}
bb_highscorescene_HighscoreScene::bb_highscorescene_HighscoreScene(){
	f_font=0;
	f_background=0;
	f_highscore=(new bb_gamehighscore_GameHighscore)->g_new();
	f_lastScoreValue=0;
	f_lastScoreKey=String();
}
bb_highscorescene_HighscoreScene* bb_highscorescene_HighscoreScene::g_new(){
	DBG_ENTER("HighscoreScene.new")
	bb_highscorescene_HighscoreScene *self=this;
	DBG_LOCAL(self,"Self")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/highscorescene.monkey<12>");
	bb_scene_Scene::g_new();
	return this;
}
void bb_highscorescene_HighscoreScene::m_OnCreate(bb_director_Director* t_director){
	DBG_ENTER("HighscoreScene.OnCreate")
	bb_highscorescene_HighscoreScene *self=this;
	DBG_LOCAL(self,"Self")
	DBG_LOCAL(t_director,"director")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/highscorescene.monkey<25>");
	gc_assign(f_font,(new bb_angelfont2_AngelFont)->g_new(String(L"CoRa")));
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/highscorescene.monkey<27>");
	gc_assign(f_background,(new bb_sprite_Sprite)->g_new(String(L"highscore_bg.jpg"),0));
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/highscorescene.monkey<28>");
	f_background->m_OnCreate(t_director);
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/highscorescene.monkey<30>");
	bb_scene_Scene::m_OnCreate(t_director);
}
void bb_highscorescene_HighscoreScene::m_OnEnter(){
	DBG_ENTER("HighscoreScene.OnEnter")
	bb_highscorescene_HighscoreScene *self=this;
	DBG_LOCAL(self,"Self")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/highscorescene.monkey<34>");
	bb_statestore_StateStore::g_Load(f_highscore);
}
void bb_highscorescene_HighscoreScene::m_OnLeave(){
	DBG_ENTER("HighscoreScene.OnLeave")
	bb_highscorescene_HighscoreScene *self=this;
	DBG_LOCAL(self,"Self")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/highscorescene.monkey<38>");
	f_lastScoreValue=0;
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/highscorescene.monkey<39>");
	f_lastScoreKey=String();
}
void bb_highscorescene_HighscoreScene::m_DrawEntries(){
	DBG_ENTER("HighscoreScene.DrawEntries")
	bb_highscorescene_HighscoreScene *self=this;
	DBG_LOCAL(self,"Self")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/highscorescene.monkey<69>");
	int t_posY=290;
	DBG_LOCAL(t_posY,"posY")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/highscorescene.monkey<70>");
	bool t_found=false;
	DBG_LOCAL(t_found,"found")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/highscorescene.monkey<72>");
	bb_list_Enumerator2* t_=f_highscore->m_ObjectEnumerator();
	while(t_->m_HasNext()){
		DBG_BLOCK();
		bb_score_Score* t_score=t_->m_NextObject();
		DBG_LOCAL(t_score,"score")
		DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/highscorescene.monkey<73>");
		if(!t_found && t_score->f_value==f_lastScoreValue && t_score->f_key==f_lastScoreKey){
			DBG_BLOCK();
			DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/highscorescene.monkey<74>");
			bb_graphics_SetColor(FLOAT(3.0),FLOAT(105.0),FLOAT(187.0));
		}
		DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/highscorescene.monkey<77>");
		f_font->m_DrawText2(String(t_score->f_value),150,t_posY,2);
		DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/highscorescene.monkey<78>");
		f_font->m_DrawText(t_score->f_key,160,t_posY);
		DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/highscorescene.monkey<79>");
		t_posY+=55;
		DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/highscorescene.monkey<81>");
		if(!t_found && t_score->f_value==f_lastScoreValue && t_score->f_key==f_lastScoreKey){
			DBG_BLOCK();
			DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/highscorescene.monkey<82>");
			bb_graphics_SetColor(FLOAT(95.0),FLOAT(85.0),FLOAT(83.0));
			DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/highscorescene.monkey<83>");
			t_found=true;
		}
	}
}
void bb_highscorescene_HighscoreScene::m_OnRender(){
	DBG_ENTER("HighscoreScene.OnRender")
	bb_highscorescene_HighscoreScene *self=this;
	DBG_LOCAL(self,"Self")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/highscorescene.monkey<51>");
	f_background->m_OnRender();
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/highscorescene.monkey<52>");
	bb_graphics_PushMatrix();
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/highscorescene.monkey<53>");
	bb_graphics_SetColor(FLOAT(95.0),FLOAT(85.0),FLOAT(83.0));
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/highscorescene.monkey<54>");
	m_DrawEntries();
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/highscorescene.monkey<55>");
	bb_graphics_PopMatrix();
}
void bb_highscorescene_HighscoreScene::m_OnKeyDown(bb_keyevent_KeyEvent* t_event){
	DBG_ENTER("HighscoreScene.OnKeyDown")
	bb_highscorescene_HighscoreScene *self=this;
	DBG_LOCAL(self,"Self")
	DBG_LOCAL(t_event,"event")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/highscorescene.monkey<59>");
	m_router()->m_Goto(String(L"menu"));
}
void bb_highscorescene_HighscoreScene::m_OnTouchDown(bb_touchevent_TouchEvent* t_event){
	DBG_ENTER("HighscoreScene.OnTouchDown")
	bb_highscorescene_HighscoreScene *self=this;
	DBG_LOCAL(self,"Self")
	DBG_LOCAL(t_event,"event")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/highscorescene.monkey<63>");
	m_router()->m_Goto(String(L"menu"));
}
void bb_highscorescene_HighscoreScene::mark(){
	bb_scene_Scene::mark();
	gc_mark_q(f_font);
	gc_mark_q(f_background);
	gc_mark_q(f_highscore);
}
String bb_highscorescene_HighscoreScene::debug(){
	String t="(HighscoreScene)\n";
	t=bb_scene_Scene::debug()+t;
	t+=dbg_decl("background",&f_background);
	t+=dbg_decl("highscore",&f_highscore);
	t+=dbg_decl("font",&f_font);
	t+=dbg_decl("lastScoreKey",&f_lastScoreKey);
	t+=dbg_decl("lastScoreValue",&f_lastScoreValue);
	return t;
}
bb_gamescene_GameScene::bb_gamescene_GameScene(){
	f_chute=0;
	f_lowerShapes=0;
	f_severity=0;
	f_slider=0;
	f_upperShapes=0;
	f_errorAnimations=0;
	f_pauseButton=0;
	f_scoreFont=0;
	f_comboFont=0;
	f_comboAnimation=0;
	f_newHighscoreFont=0;
	f_newHighscoreAnimation=0;
	f_checkPosY=FLOAT(.0);
	f_pauseTime=0;
	f_ignoreFirstTouchUp=false;
	f_score=0;
	f_minHighscore=0;
	f_isNewHighscoreRecord=false;
	f_collisionCheckedLastUpdate=false;
	f_falseSpriteStrack=(new bb_stack_Stack2)->g_new();
	int t_[]={0,0,0,0};
	f_lastMatchTime=Array<int >(t_,4);
	f_comboPending=false;
	f_comboPendingSince=0;
	f_lastSlowUpdate=FLOAT(.0);
}
bb_gamescene_GameScene* bb_gamescene_GameScene::g_new(){
	DBG_ENTER("GameScene.new")
	bb_gamescene_GameScene *self=this;
	DBG_LOCAL(self,"Self")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/gamescene.monkey<18>");
	bb_scene_Scene::g_new();
	return this;
}
void bb_gamescene_GameScene::m_OnCreate(bb_director_Director* t_director){
	DBG_ENTER("GameScene.OnCreate")
	bb_gamescene_GameScene *self=this;
	DBG_LOCAL(self,"Self")
	DBG_LOCAL(t_director,"director")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/gamescene.monkey<53>");
	gc_assign(f_chute,(new bb_chute_Chute)->g_new());
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/gamescene.monkey<54>");
	gc_assign(f_lowerShapes,(new bb_fanout_FanOut)->g_new());
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/gamescene.monkey<55>");
	gc_assign(f_severity,bb_severity_CurrentSeverity());
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/gamescene.monkey<56>");
	gc_assign(f_slider,(new bb_slider_Slider)->g_new());
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/gamescene.monkey<57>");
	gc_assign(f_upperShapes,(new bb_fanout_FanOut)->g_new());
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/gamescene.monkey<58>");
	gc_assign(f_errorAnimations,(new bb_fanout_FanOut)->g_new());
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/gamescene.monkey<60>");
	gc_assign(f_pauseButton,(new bb_sprite_Sprite)->g_new(String(L"pause-button.png"),0));
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/gamescene.monkey<61>");
	f_pauseButton->m_pos2(t_director->m_size()->m_Copy()->m_Sub(f_pauseButton->m_size()));
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/gamescene.monkey<62>");
	f_pauseButton->m_pos()->f_y=FLOAT(0.0);
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/gamescene.monkey<64>");
	gc_assign(f_scoreFont,(new bb_font_Font)->g_new(String(L"CoRa"),0));
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/gamescene.monkey<65>");
	f_scoreFont->m_pos2((new bb_vector2d_Vector2D)->g_new(t_director->m_center()->f_x,t_director->m_size()->f_y-FLOAT(65.0)));
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/gamescene.monkey<66>");
	f_scoreFont->m_align(1);
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/gamescene.monkey<67>");
	gc_assign(f_scoreFont->f_color,(new bb_color_Color)->g_new(FLOAT(3.0),FLOAT(105.0),FLOAT(187.0),FLOAT(1.0)));
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/gamescene.monkey<69>");
	gc_assign(f_comboFont,(new bb_font_Font)->g_new(String(L"CoRa"),t_director->m_center()->m_Copy()));
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/gamescene.monkey<70>");
	gc_assign(f_comboFont->f_color,(new bb_color_Color)->g_new(FLOAT(3.0),FLOAT(105.0),FLOAT(187.0),FLOAT(1.0)));
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/gamescene.monkey<71>");
	f_comboFont->m_text(String(L"COMBO x 2"));
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/gamescene.monkey<72>");
	bb_vector2d_Vector2D* t_=f_comboFont->m_pos();
	t_->f_y=t_->f_y-FLOAT(150.0);
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/gamescene.monkey<74>");
	bb_vector2d_Vector2D* t_2=f_comboFont->m_pos();
	t_2->f_x=t_2->f_x-FLOAT(130.0);
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/gamescene.monkey<77>");
	gc_assign(f_comboAnimation,(new bb_animation_Animation)->g_new(FLOAT(1.8),FLOAT(0.0),FLOAT(850.0)));
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/gamescene.monkey<78>");
	gc_assign(f_comboAnimation->f_effect,((new bb_fader_FaderScale)->g_new()));
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/gamescene.monkey<79>");
	gc_assign(f_comboAnimation->f_transition,((new bb_transition_TransitionInCubic)->g_new()));
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/gamescene.monkey<80>");
	f_comboAnimation->m_Add4(f_comboFont);
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/gamescene.monkey<81>");
	f_comboAnimation->m_Pause();
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/gamescene.monkey<83>");
	gc_assign(f_newHighscoreFont,(new bb_font_Font)->g_new(String(L"CoRa"),t_director->m_center()->m_Copy()));
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/gamescene.monkey<84>");
	gc_assign(f_newHighscoreFont->f_color,(new bb_color_Color)->g_new(FLOAT(209.0),FLOAT(146.0),FLOAT(31.0),FLOAT(1.0)));
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/gamescene.monkey<85>");
	f_newHighscoreFont->m_text(String(L"NEW HIGHSCORE"));
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/gamescene.monkey<86>");
	bb_vector2d_Vector2D* t_3=f_newHighscoreFont->m_pos();
	t_3->f_y=t_3->f_y/FLOAT(2.0);
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/gamescene.monkey<88>");
	bb_vector2d_Vector2D* t_4=f_newHighscoreFont->m_pos();
	t_4->f_x=t_4->f_x-FLOAT(200.0);
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/gamescene.monkey<91>");
	gc_assign(f_newHighscoreAnimation,(new bb_animation_Animation)->g_new(FLOAT(1.5),FLOAT(0.0),FLOAT(2500.0)));
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/gamescene.monkey<92>");
	gc_assign(f_newHighscoreAnimation->f_effect,((new bb_fader_FaderScale)->g_new()));
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/gamescene.monkey<93>");
	gc_assign(f_newHighscoreAnimation->f_transition,((new bb_transition_TransitionInCubic)->g_new()));
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/gamescene.monkey<94>");
	f_newHighscoreAnimation->m_Add4(f_newHighscoreFont);
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/gamescene.monkey<95>");
	f_newHighscoreAnimation->m_Pause();
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/gamescene.monkey<97>");
	m_layer()->m_Add4((new bb_sprite_Sprite)->g_new(String(L"bg_960x640.jpg"),0));
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/gamescene.monkey<98>");
	m_layer()->m_Add4(f_lowerShapes);
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/gamescene.monkey<99>");
	m_layer()->m_Add4(f_slider);
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/gamescene.monkey<100>");
	m_layer()->m_Add4(f_upperShapes);
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/gamescene.monkey<101>");
	m_layer()->m_Add4(f_errorAnimations);
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/gamescene.monkey<102>");
	m_layer()->m_Add4(f_newHighscoreAnimation);
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/gamescene.monkey<103>");
	m_layer()->m_Add4(f_comboAnimation);
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/gamescene.monkey<104>");
	m_layer()->m_Add4(f_chute);
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/gamescene.monkey<105>");
	m_layer()->m_Add4(f_scoreFont);
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/gamescene.monkey<106>");
	m_layer()->m_Add4(f_pauseButton);
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/gamescene.monkey<108>");
	bb_scene_Scene::m_OnCreate(t_director);
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/gamescene.monkey<110>");
	f_checkPosY=t_director->m_size()->f_y-Float(f_slider->f_images.At(0)->m_Height()/2)-FLOAT(5.0);
}
void bb_gamescene_GameScene::m_OnEnterPaused(){
	DBG_ENTER("GameScene.OnEnterPaused")
	bb_gamescene_GameScene *self=this;
	DBG_LOCAL(self,"Self")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/gamescene.monkey<218>");
	int t_diff=bb_app_Millisecs()-f_pauseTime;
	DBG_LOCAL(t_diff,"diff")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/gamescene.monkey<219>");
	f_pauseTime=0;
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/gamescene.monkey<221>");
	f_severity->m_WarpTime(t_diff);
}
void bb_gamescene_GameScene::m_LoadHighscoreMinValue(){
	DBG_ENTER("GameScene.LoadHighscoreMinValue")
	bb_gamescene_GameScene *self=this;
	DBG_LOCAL(self,"Self")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/gamescene.monkey<385>");
	bb_gamehighscore_GameHighscore* t_highscore=(new bb_gamehighscore_GameHighscore)->g_new();
	DBG_LOCAL(t_highscore,"highscore")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/gamescene.monkey<386>");
	bb_statestore_StateStore::g_Load(t_highscore);
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/gamescene.monkey<387>");
	f_minHighscore=t_highscore->m_Last()->f_value;
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/gamescene.monkey<388>");
	f_isNewHighscoreRecord=!(t_highscore->m_Count()==t_highscore->m_maxCount());
}
void bb_gamescene_GameScene::m_OnEnter(){
	DBG_ENTER("GameScene.OnEnter")
	bb_gamescene_GameScene *self=this;
	DBG_LOCAL(self,"Self")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/gamescene.monkey<114>");
	if(f_pauseTime>0){
		DBG_BLOCK();
		DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/gamescene.monkey<115>");
		m_OnEnterPaused();
		return;
	}
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/gamescene.monkey<119>");
	f_ignoreFirstTouchUp=true;
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/gamescene.monkey<120>");
	f_score=0;
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/gamescene.monkey<121>");
	f_scoreFont->m_text(String(L"Score: 0"));
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/gamescene.monkey<122>");
	f_lowerShapes->m_Clear();
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/gamescene.monkey<123>");
	f_upperShapes->m_Clear();
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/gamescene.monkey<124>");
	f_errorAnimations->m_Clear();
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/gamescene.monkey<125>");
	f_severity->m_Restart();
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/gamescene.monkey<126>");
	f_chute->m_Restart();
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/gamescene.monkey<127>");
	f_slider->m_Restart();
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/gamescene.monkey<128>");
	m_LoadHighscoreMinValue();
}
void bb_gamescene_GameScene::m_OnLeave(){
	DBG_ENTER("GameScene.OnLeave")
	bb_gamescene_GameScene *self=this;
	DBG_LOCAL(self,"Self")
}
bool bb_gamescene_GameScene::m_HandleGameOver(){
	DBG_ENTER("GameScene.HandleGameOver")
	bb_gamescene_GameScene *self=this;
	DBG_LOCAL(self,"Self")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/gamescene.monkey<241>");
	if(Float(f_chute->m_Height())<f_slider->f_arrowLeft->m_pos()->f_y+FLOAT(50.0)){
		DBG_BLOCK();
		return false;
	}
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/gamescene.monkey<243>");
	if(f_isNewHighscoreRecord){
		DBG_BLOCK();
		DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/gamescene.monkey<247>");
		dynamic_cast<bb_newhighscorescene_NewHighscoreScene*>(m_router()->m_Get(String(L"newhighscore")))->f_score=f_score;
		DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/gamescene.monkey<248>");
		m_router()->m_Goto(String(L"newhighscore"));
	}else{
		DBG_BLOCK();
		DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/gamescene.monkey<250>");
		m_router()->m_Goto(String(L"gameover"));
	}
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/gamescene.monkey<253>");
	return true;
}
void bb_gamescene_GameScene::m_OnMissmatch(bb_shape_Shape* t_shape){
	DBG_ENTER("GameScene.OnMissmatch")
	bb_gamescene_GameScene *self=this;
	DBG_LOCAL(self,"Self")
	DBG_LOCAL(t_shape,"shape")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/gamescene.monkey<368>");
	bb_sprite_Sprite* t_sprite=0;
	DBG_LOCAL(t_sprite,"sprite")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/gamescene.monkey<369>");
	if(f_falseSpriteStrack->m_Length()>0){
		DBG_BLOCK();
		DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/gamescene.monkey<370>");
		t_sprite=f_falseSpriteStrack->m_Pop();
	}else{
		DBG_BLOCK();
		DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/gamescene.monkey<372>");
		t_sprite=(new bb_sprite_Sprite)->g_new2(String(L"false.png"),140,88,6,100,0);
	}
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/gamescene.monkey<374>");
	t_sprite->m_pos2(t_shape->m_pos());
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/gamescene.monkey<375>");
	t_sprite->m_Restart();
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/gamescene.monkey<376>");
	f_chute->f_height+=15;
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/gamescene.monkey<378>");
	int t_[]={0,0,0,0};
	gc_assign(f_lastMatchTime,Array<int >(t_,4));
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/gamescene.monkey<379>");
	f_comboPending=false;
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/gamescene.monkey<380>");
	f_comboPendingSince=0;
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/gamescene.monkey<381>");
	f_errorAnimations->m_Add4(t_sprite);
}
void bb_gamescene_GameScene::m_IncrementScore(int t_value){
	DBG_ENTER("GameScene.IncrementScore")
	bb_gamescene_GameScene *self=this;
	DBG_LOCAL(self,"Self")
	DBG_LOCAL(t_value,"value")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/gamescene.monkey<357>");
	f_score+=t_value;
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/gamescene.monkey<358>");
	f_scoreFont->m_text(String(L"Score: ")+String(f_score));
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/gamescene.monkey<360>");
	if(!f_isNewHighscoreRecord && f_score>=f_minHighscore){
		DBG_BLOCK();
		DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/gamescene.monkey<361>");
		f_isNewHighscoreRecord=true;
		DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/gamescene.monkey<362>");
		f_newHighscoreAnimation->m_Restart();
		DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/gamescene.monkey<363>");
		m_layer()->m_Add4(f_newHighscoreAnimation);
	}
}
void bb_gamescene_GameScene::m_OnMatch(bb_shape_Shape* t_shape){
	DBG_ENTER("GameScene.OnMatch")
	bb_gamescene_GameScene *self=this;
	DBG_LOCAL(self,"Self")
	DBG_LOCAL(t_shape,"shape")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/gamescene.monkey<352>");
	f_lastMatchTime.At(t_shape->f_lane)=bb_app_Millisecs();
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/gamescene.monkey<353>");
	m_IncrementScore(10);
}
void bb_gamescene_GameScene::m_CheckShapeCollisions(){
	DBG_ENTER("GameScene.CheckShapeCollisions")
	bb_gamescene_GameScene *self=this;
	DBG_LOCAL(self,"Self")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/gamescene.monkey<294>");
	bb_shape_Shape* t_shape=0;
	DBG_LOCAL(t_shape,"shape")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/gamescene.monkey<296>");
	bb_list_Enumerator* t_=f_upperShapes->m_ObjectEnumerator();
	while(t_->m_HasNext()){
		DBG_BLOCK();
		bb_directorevents_DirectorEvents* t_obj=t_->m_NextObject();
		DBG_LOCAL(t_obj,"obj")
		DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/gamescene.monkey<297>");
		t_shape=dynamic_cast<bb_shape_Shape*>(t_obj);
		DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/gamescene.monkey<298>");
		if(t_shape->m_pos()->f_y+Float(bb_shape_Shape::g_images.At(0)->m_Height())<f_checkPosY){
			DBG_BLOCK();
			continue;
		}
		DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/gamescene.monkey<300>");
		f_upperShapes->m_Remove(t_shape);
		DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/gamescene.monkey<301>");
		if(!f_slider->m_Match(t_shape)){
			DBG_BLOCK();
			DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/gamescene.monkey<302>");
			m_OnMissmatch(t_shape);
		}else{
			DBG_BLOCK();
			DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/gamescene.monkey<304>");
			f_lowerShapes->m_Add4(t_shape);
			DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/gamescene.monkey<305>");
			m_OnMatch(t_shape);
		}
	}
}
void bb_gamescene_GameScene::m_DetectComboTrigger(){
	DBG_ENTER("GameScene.DetectComboTrigger")
	bb_gamescene_GameScene *self=this;
	DBG_LOCAL(self,"Self")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/gamescene.monkey<311>");
	int t_lanesNotZero=0;
	DBG_LOCAL(t_lanesNotZero,"lanesNotZero")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/gamescene.monkey<312>");
	int t_hotLanes=0;
	DBG_LOCAL(t_hotLanes,"hotLanes")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/gamescene.monkey<313>");
	int t_now=bb_app_Millisecs();
	DBG_LOCAL(t_now,"now")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/gamescene.monkey<315>");
	for(int t_lane=0;t_lane<f_lastMatchTime.Length();t_lane=t_lane+1){
		DBG_BLOCK();
		DBG_LOCAL(t_lane,"lane")
		DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/gamescene.monkey<316>");
		if(f_lastMatchTime.At(t_lane)==0){
			DBG_BLOCK();
			continue;
		}
		DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/gamescene.monkey<318>");
		t_lanesNotZero+=1;
		DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/gamescene.monkey<319>");
		if(f_lastMatchTime.At(t_lane)+325>=t_now){
			DBG_BLOCK();
			DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/gamescene.monkey<320>");
			t_hotLanes+=1;
			DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/gamescene.monkey<322>");
			if(t_hotLanes>=2 && !f_comboPending){
				DBG_BLOCK();
				DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/gamescene.monkey<323>");
				f_comboPending=true;
				DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/gamescene.monkey<324>");
				f_comboPendingSince=t_now;
			}
		}else{
			DBG_BLOCK();
			DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/gamescene.monkey<328>");
			if(!f_comboPending){
				DBG_BLOCK();
				f_lastMatchTime.At(t_lane)=0;
			}
		}
	}
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/gamescene.monkey<332>");
	if(!f_comboPending){
		DBG_BLOCK();
		return;
	}
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/gamescene.monkey<333>");
	if(f_comboPendingSince+325>t_now){
		DBG_BLOCK();
		return;
	}
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/gamescene.monkey<335>");
	int t_[]={0,0,0,0};
	gc_assign(f_lastMatchTime,Array<int >(t_,4));
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/gamescene.monkey<336>");
	f_comboPending=false;
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/gamescene.monkey<338>");
	f_chute->f_height=bb_math_Max(75,f_chute->f_height-18*t_lanesNotZero);
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/gamescene.monkey<339>");
	m_IncrementScore(15*t_lanesNotZero);
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/gamescene.monkey<340>");
	f_comboFont->m_text(String(L"COMBO x ")+String(t_lanesNotZero));
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/gamescene.monkey<342>");
	f_comboAnimation->m_Restart();
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/gamescene.monkey<343>");
	m_layer()->m_Add4(f_comboAnimation);
}
void bb_gamescene_GameScene::m_DropNewShapeIfRequested(){
	DBG_ENTER("GameScene.DropNewShapeIfRequested")
	bb_gamescene_GameScene *self=this;
	DBG_LOCAL(self,"Self")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/gamescene.monkey<278>");
	if(!f_severity->m_ShapeShouldBeDropped()){
		DBG_BLOCK();
		return;
	}
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/gamescene.monkey<279>");
	f_upperShapes->m_Add4((new bb_shape_Shape)->g_new(f_severity->m_RandomType(),f_severity->m_RandomLane(),f_chute));
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/gamescene.monkey<280>");
	f_severity->m_ShapeDropped();
}
void bb_gamescene_GameScene::m_RemoveLostShapes(){
	DBG_ENTER("GameScene.RemoveLostShapes")
	bb_gamescene_GameScene *self=this;
	DBG_LOCAL(self,"Self")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/gamescene.monkey<257>");
	Float t_directoySizeY=m_director()->m_size()->f_y;
	DBG_LOCAL(t_directoySizeY,"directoySizeY")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/gamescene.monkey<258>");
	bb_shape_Shape* t_shape=0;
	DBG_LOCAL(t_shape,"shape")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/gamescene.monkey<260>");
	bb_list_Enumerator* t_=f_lowerShapes->m_ObjectEnumerator();
	while(t_->m_HasNext()){
		DBG_BLOCK();
		bb_directorevents_DirectorEvents* t_obj=t_->m_NextObject();
		DBG_LOCAL(t_obj,"obj")
		DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/gamescene.monkey<261>");
		t_shape=dynamic_cast<bb_shape_Shape*>(t_obj);
		DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/gamescene.monkey<262>");
		if(t_shape->m_pos()->f_y>t_directoySizeY){
			DBG_BLOCK();
			f_lowerShapes->m_Remove(t_shape);
		}
	}
}
void bb_gamescene_GameScene::m_RemoveFinishedErroAnimations(){
	DBG_ENTER("GameScene.RemoveFinishedErroAnimations")
	bb_gamescene_GameScene *self=this;
	DBG_LOCAL(self,"Self")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/gamescene.monkey<267>");
	bb_sprite_Sprite* t_sprite=0;
	DBG_LOCAL(t_sprite,"sprite")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/gamescene.monkey<268>");
	bb_list_Enumerator* t_=f_errorAnimations->m_ObjectEnumerator();
	while(t_->m_HasNext()){
		DBG_BLOCK();
		bb_directorevents_DirectorEvents* t_obj=t_->m_NextObject();
		DBG_LOCAL(t_obj,"obj")
		DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/gamescene.monkey<269>");
		t_sprite=dynamic_cast<bb_sprite_Sprite*>(t_obj);
		DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/gamescene.monkey<270>");
		if(t_sprite->m_animationIsDone()){
			DBG_BLOCK();
			DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/gamescene.monkey<271>");
			f_errorAnimations->m_Remove(t_sprite);
			DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/gamescene.monkey<272>");
			f_falseSpriteStrack->m_Push2(t_sprite);
		}
	}
}
void bb_gamescene_GameScene::m_OnUpdate(Float t_delta,Float t_frameTime){
	DBG_ENTER("GameScene.OnUpdate")
	bb_gamescene_GameScene *self=this;
	DBG_LOCAL(self,"Self")
	DBG_LOCAL(t_delta,"delta")
	DBG_LOCAL(t_frameTime,"frameTime")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/gamescene.monkey<139>");
	bb_scene_Scene::m_OnUpdate(t_delta,t_frameTime);
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/gamescene.monkey<141>");
	if(m_HandleGameOver()){
		DBG_BLOCK();
		return;
	}
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/gamescene.monkey<143>");
	if(f_collisionCheckedLastUpdate){
		DBG_BLOCK();
		DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/gamescene.monkey<144>");
		f_collisionCheckedLastUpdate=false;
	}else{
		DBG_BLOCK();
		DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/gamescene.monkey<146>");
		f_collisionCheckedLastUpdate=true;
		DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/gamescene.monkey<147>");
		m_CheckShapeCollisions();
	}
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/gamescene.monkey<150>");
	m_DetectComboTrigger();
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/gamescene.monkey<151>");
	f_severity->m_OnUpdate(t_delta,t_frameTime);
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/gamescene.monkey<152>");
	m_DropNewShapeIfRequested();
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/gamescene.monkey<154>");
	f_lastSlowUpdate+=t_frameTime;
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/gamescene.monkey<155>");
	if(f_lastSlowUpdate>=FLOAT(1000.0)){
		DBG_BLOCK();
		DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/gamescene.monkey<156>");
		f_lastSlowUpdate=FLOAT(0.0);
		DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/gamescene.monkey<157>");
		m_RemoveLostShapes();
		DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/gamescene.monkey<158>");
		m_RemoveFinishedErroAnimations();
		DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/gamescene.monkey<160>");
		if(!f_comboAnimation->m_IsPlaying()){
			DBG_BLOCK();
			DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/gamescene.monkey<161>");
			m_layer()->m_Remove(f_comboAnimation);
		}
		DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/gamescene.monkey<163>");
		if(!f_newHighscoreAnimation->m_IsPlaying()){
			DBG_BLOCK();
			DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/gamescene.monkey<164>");
			m_layer()->m_Remove(f_newHighscoreAnimation);
		}
	}
}
void bb_gamescene_GameScene::m_StartPause(){
	DBG_ENTER("GameScene.StartPause")
	bb_gamescene_GameScene *self=this;
	DBG_LOCAL(self,"Self")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/gamescene.monkey<213>");
	f_pauseTime=bb_app_Millisecs();
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/gamescene.monkey<214>");
	m_router()->m_Goto(String(L"pause"));
}
void bb_gamescene_GameScene::m_FastDropMatchingShapes(){
	DBG_ENTER("GameScene.FastDropMatchingShapes")
	bb_gamescene_GameScene *self=this;
	DBG_LOCAL(self,"Self")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/gamescene.monkey<284>");
	bb_shape_Shape* t_shape=0;
	DBG_LOCAL(t_shape,"shape")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/gamescene.monkey<286>");
	bb_list_Enumerator* t_=f_upperShapes->m_ObjectEnumerator();
	while(t_->m_HasNext()){
		DBG_BLOCK();
		bb_directorevents_DirectorEvents* t_obj=t_->m_NextObject();
		DBG_LOCAL(t_obj,"obj")
		DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/gamescene.monkey<287>");
		t_shape=dynamic_cast<bb_shape_Shape*>(t_obj);
		DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/gamescene.monkey<288>");
		if(t_shape->f_isFast){
			DBG_BLOCK();
			continue;
		}
		DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/gamescene.monkey<289>");
		if(f_slider->m_Match(t_shape)){
			DBG_BLOCK();
			t_shape->f_isFast=true;
		}
	}
}
void bb_gamescene_GameScene::m_OnKeyDown(bb_keyevent_KeyEvent* t_event){
	DBG_ENTER("GameScene.OnKeyDown")
	bb_gamescene_GameScene *self=this;
	DBG_LOCAL(self,"Self")
	DBG_LOCAL(t_event,"event")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/gamescene.monkey<170>");
	int t_1=t_event->m_code();
	DBG_LOCAL(t_1,"1")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/gamescene.monkey<171>");
	if(t_1==80){
		DBG_BLOCK();
		DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/gamescene.monkey<172>");
		m_StartPause();
	}else{
		DBG_BLOCK();
		DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/gamescene.monkey<173>");
		if(t_1==40 || t_1==65576){
			DBG_BLOCK();
			DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/gamescene.monkey<174>");
			m_FastDropMatchingShapes();
		}else{
			DBG_BLOCK();
			DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/gamescene.monkey<175>");
			if(t_1==37 || t_1==65573){
				DBG_BLOCK();
				DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/gamescene.monkey<176>");
				f_slider->m_SlideLeft();
			}else{
				DBG_BLOCK();
				DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/gamescene.monkey<177>");
				if(t_1==39 || t_1==65575){
					DBG_BLOCK();
					DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/gamescene.monkey<178>");
					f_slider->m_SlideRight();
				}
			}
		}
	}
}
void bb_gamescene_GameScene::m_OnSuspend(){
	DBG_ENTER("GameScene.OnSuspend")
	bb_gamescene_GameScene *self=this;
	DBG_LOCAL(self,"Self")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/gamescene.monkey<183>");
	m_StartPause();
}
void bb_gamescene_GameScene::m_OnTouchDown(bb_touchevent_TouchEvent* t_event){
	DBG_ENTER("GameScene.OnTouchDown")
	bb_gamescene_GameScene *self=this;
	DBG_LOCAL(self,"Self")
	DBG_LOCAL(t_event,"event")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/gamescene.monkey<187>");
	if(f_pauseButton->m_Collide(t_event->m_pos())){
		DBG_BLOCK();
		m_StartPause();
	}
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/gamescene.monkey<188>");
	if(f_slider->f_arrowRight->m_Collide(t_event->m_pos())){
		DBG_BLOCK();
		f_slider->m_SlideRight();
	}
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/gamescene.monkey<189>");
	if(f_slider->f_arrowLeft->m_Collide(t_event->m_pos())){
		DBG_BLOCK();
		f_slider->m_SlideLeft();
	}
}
void bb_gamescene_GameScene::m_HandleSliderSwipe(bb_touchevent_TouchEvent* t_event){
	DBG_ENTER("GameScene.HandleSliderSwipe")
	bb_gamescene_GameScene *self=this;
	DBG_LOCAL(self,"Self")
	DBG_LOCAL(t_event,"event")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/gamescene.monkey<230>");
	bb_vector2d_Vector2D* t_swipe=t_event->m_startDelta()->m_Normalize();
	DBG_LOCAL(t_swipe,"swipe")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/gamescene.monkey<231>");
	if(bb_math_Abs2(t_swipe->f_x)<=FLOAT(0.4)){
		DBG_BLOCK();
		return;
	}
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/gamescene.monkey<233>");
	if(t_swipe->f_x<FLOAT(0.0)){
		DBG_BLOCK();
		DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/gamescene.monkey<234>");
		f_slider->m_SlideLeft();
	}else{
		DBG_BLOCK();
		DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/gamescene.monkey<236>");
		f_slider->m_SlideRight();
	}
}
void bb_gamescene_GameScene::m_HandleBackgroundSwipe(bb_touchevent_TouchEvent* t_event){
	DBG_ENTER("GameScene.HandleBackgroundSwipe")
	bb_gamescene_GameScene *self=this;
	DBG_LOCAL(self,"Self")
	DBG_LOCAL(t_event,"event")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/gamescene.monkey<225>");
	bb_vector2d_Vector2D* t_swipe=t_event->m_startDelta()->m_Normalize();
	DBG_LOCAL(t_swipe,"swipe")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/gamescene.monkey<226>");
	if(t_swipe->f_y>FLOAT(0.2)){
		DBG_BLOCK();
		m_FastDropMatchingShapes();
	}
}
void bb_gamescene_GameScene::m_OnTouchUp(bb_touchevent_TouchEvent* t_event){
	DBG_ENTER("GameScene.OnTouchUp")
	bb_gamescene_GameScene *self=this;
	DBG_LOCAL(self,"Self")
	DBG_LOCAL(t_event,"event")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/gamescene.monkey<193>");
	if(f_ignoreFirstTouchUp){
		DBG_BLOCK();
		DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/gamescene.monkey<194>");
		f_ignoreFirstTouchUp=false;
		return;
	}
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/gamescene.monkey<198>");
	if(t_event->m_startPos()->f_y>=f_slider->m_pos()->f_y){
		DBG_BLOCK();
		DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/gamescene.monkey<199>");
		m_HandleSliderSwipe(t_event);
	}else{
		DBG_BLOCK();
		DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/gamescene.monkey<201>");
		m_HandleBackgroundSwipe(t_event);
	}
}
void bb_gamescene_GameScene::m_OnTouchMove(bb_touchevent_TouchEvent* t_event){
	DBG_ENTER("GameScene.OnTouchMove")
	bb_gamescene_GameScene *self=this;
	DBG_LOCAL(self,"Self")
}
void bb_gamescene_GameScene::m_OnPauseLeaveGame(){
	DBG_ENTER("GameScene.OnPauseLeaveGame")
	bb_gamescene_GameScene *self=this;
	DBG_LOCAL(self,"Self")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/gamescene.monkey<132>");
	f_pauseTime=0;
}
void bb_gamescene_GameScene::mark(){
	bb_scene_Scene::mark();
	gc_mark_q(f_chute);
	gc_mark_q(f_lowerShapes);
	gc_mark_q(f_severity);
	gc_mark_q(f_slider);
	gc_mark_q(f_upperShapes);
	gc_mark_q(f_errorAnimations);
	gc_mark_q(f_pauseButton);
	gc_mark_q(f_scoreFont);
	gc_mark_q(f_comboFont);
	gc_mark_q(f_comboAnimation);
	gc_mark_q(f_newHighscoreFont);
	gc_mark_q(f_newHighscoreAnimation);
	gc_mark_q(f_falseSpriteStrack);
	gc_mark_q(f_lastMatchTime);
}
String bb_gamescene_GameScene::debug(){
	String t="(GameScene)\n";
	t=bb_scene_Scene::debug()+t;
	t+=dbg_decl("severity",&f_severity);
	t+=dbg_decl("chute",&f_chute);
	t+=dbg_decl("slider",&f_slider);
	t+=dbg_decl("upperShapes",&f_upperShapes);
	t+=dbg_decl("lowerShapes",&f_lowerShapes);
	t+=dbg_decl("errorAnimations",&f_errorAnimations);
	t+=dbg_decl("newHighscoreAnimation",&f_newHighscoreAnimation);
	t+=dbg_decl("score",&f_score);
	t+=dbg_decl("lastSlowUpdate",&f_lastSlowUpdate);
	t+=dbg_decl("scoreFont",&f_scoreFont);
	t+=dbg_decl("newHighscoreFont",&f_newHighscoreFont);
	t+=dbg_decl("comboFont",&f_comboFont);
	t+=dbg_decl("comboAnimation",&f_comboAnimation);
	t+=dbg_decl("lastMatchTime",&f_lastMatchTime);
	t+=dbg_decl("isNewHighscoreRecord",&f_isNewHighscoreRecord);
	t+=dbg_decl("falseSpriteStrack",&f_falseSpriteStrack);
	t+=dbg_decl("pauseButton",&f_pauseButton);
	t+=dbg_decl("minHighscore",&f_minHighscore);
	t+=dbg_decl("ignoreFirstTouchUp",&f_ignoreFirstTouchUp);
	t+=dbg_decl("pauseTime",&f_pauseTime);
	t+=dbg_decl("comboPending",&f_comboPending);
	t+=dbg_decl("comboPendingSince",&f_comboPendingSince);
	t+=dbg_decl("checkPosY",&f_checkPosY);
	t+=dbg_decl("collisionCheckedLastUpdate",&f_collisionCheckedLastUpdate);
	return t;
}
bb_gameoverscene_GameOverScene::bb_gameoverscene_GameOverScene(){
	f_main=0;
	f_small=0;
}
bb_gameoverscene_GameOverScene* bb_gameoverscene_GameOverScene::g_new(){
	DBG_ENTER("GameOverScene.new")
	bb_gameoverscene_GameOverScene *self=this;
	DBG_LOCAL(self,"Self")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/gameoverscene.monkey<10>");
	bb_scene_Scene::g_new();
	return this;
}
void bb_gameoverscene_GameOverScene::m_OnCreate(bb_director_Director* t_director){
	DBG_ENTER("GameOverScene.OnCreate")
	bb_gameoverscene_GameOverScene *self=this;
	DBG_LOCAL(self,"Self")
	DBG_LOCAL(t_director,"director")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/gameoverscene.monkey<19>");
	bb_scene_Scene::m_OnCreate(t_director);
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/gameoverscene.monkey<21>");
	gc_assign(f_main,(new bb_sprite_Sprite)->g_new(String(L"gameover_main.png"),0));
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/gameoverscene.monkey<22>");
	f_main->m_OnCreate(t_director);
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/gameoverscene.monkey<23>");
	f_main->m_Center(t_director);
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/gameoverscene.monkey<25>");
	gc_assign(f_small,(new bb_sprite_Sprite)->g_new(String(L"gameover_small.png"),0));
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/gameoverscene.monkey<26>");
	f_small->m_OnCreate(t_director);
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/gameoverscene.monkey<27>");
	f_small->m_pos()->f_x=t_director->m_size()->f_x-f_small->m_size()->f_x;
}
void bb_gameoverscene_GameOverScene::m_OnRender(){
	DBG_ENTER("GameOverScene.OnRender")
	bb_gameoverscene_GameOverScene *self=this;
	DBG_LOCAL(self,"Self")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/gameoverscene.monkey<31>");
	m_router()->m_previous()->m_OnRender();
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/gameoverscene.monkey<32>");
	m_RenderBlend();
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/gameoverscene.monkey<33>");
	f_small->m_OnRender();
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/gameoverscene.monkey<34>");
	f_main->m_OnRender();
}
void bb_gameoverscene_GameOverScene::m_OnTouchDown(bb_touchevent_TouchEvent* t_event){
	DBG_ENTER("GameOverScene.OnTouchDown")
	bb_gameoverscene_GameOverScene *self=this;
	DBG_LOCAL(self,"Self")
	DBG_LOCAL(t_event,"event")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/gameoverscene.monkey<38>");
	m_router()->m_Goto(String(L"menu"));
}
void bb_gameoverscene_GameOverScene::m_OnKeyDown(bb_keyevent_KeyEvent* t_event){
	DBG_ENTER("GameOverScene.OnKeyDown")
	bb_gameoverscene_GameOverScene *self=this;
	DBG_LOCAL(self,"Self")
	DBG_LOCAL(t_event,"event")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/gameoverscene.monkey<42>");
	m_router()->m_Goto(String(L"menu"));
}
void bb_gameoverscene_GameOverScene::mark(){
	bb_scene_Scene::mark();
	gc_mark_q(f_main);
	gc_mark_q(f_small);
}
String bb_gameoverscene_GameOverScene::debug(){
	String t="(GameOverScene)\n";
	t=bb_scene_Scene::debug()+t;
	t+=dbg_decl("main",&f_main);
	t+=dbg_decl("small",&f_small);
	return t;
}
bb_pausescene_PauseScene::bb_pausescene_PauseScene(){
	f_overlay=0;
	f_continueBtn=0;
	f_quitBtn=0;
}
bb_pausescene_PauseScene* bb_pausescene_PauseScene::g_new(){
	DBG_ENTER("PauseScene.new")
	bb_pausescene_PauseScene *self=this;
	DBG_LOCAL(self,"Self")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/pausescene.monkey<12>");
	bb_scene_Scene::g_new();
	return this;
}
void bb_pausescene_PauseScene::m_OnCreate(bb_director_Director* t_director){
	DBG_ENTER("PauseScene.OnCreate")
	bb_pausescene_PauseScene *self=this;
	DBG_LOCAL(self,"Self")
	DBG_LOCAL(t_director,"director")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/pausescene.monkey<22>");
	gc_assign(f_overlay,(new bb_sprite_Sprite)->g_new(String(L"pause.png"),0));
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/pausescene.monkey<23>");
	m_layer()->m_Add4(f_overlay);
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/pausescene.monkey<25>");
	gc_assign(f_continueBtn,(new bb_sprite_Sprite)->g_new(String(L"01_06-continue.png"),0));
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/pausescene.monkey<26>");
	m_layer()->m_Add4(f_continueBtn);
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/pausescene.monkey<28>");
	gc_assign(f_quitBtn,(new bb_sprite_Sprite)->g_new(String(L"01_07-quit.png"),0));
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/pausescene.monkey<29>");
	m_layer()->m_Add4(f_quitBtn);
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/pausescene.monkey<31>");
	bb_scene_Scene::m_OnCreate(t_director);
}
void bb_pausescene_PauseScene::m_OnEnter(){
	DBG_ENTER("PauseScene.OnEnter")
	bb_pausescene_PauseScene *self=this;
	DBG_LOCAL(self,"Self")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/pausescene.monkey<35>");
	f_overlay->m_Center(m_director());
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/pausescene.monkey<36>");
	f_overlay->m_pos()->f_y-=f_overlay->m_size()->f_y;
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/pausescene.monkey<37>");
	bb_vector2d_Vector2D* t_=f_overlay->m_pos();
	t_->f_y=t_->f_y-FLOAT(50.0);
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/pausescene.monkey<39>");
	f_continueBtn->m_Center(m_director());
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/pausescene.monkey<41>");
	f_quitBtn->m_pos2(f_continueBtn->m_pos()->m_Copy());
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/pausescene.monkey<42>");
	f_quitBtn->m_pos()->f_y+=f_continueBtn->m_size()->f_y+FLOAT(40.0);
}
void bb_pausescene_PauseScene::m_OnRender(){
	DBG_ENTER("PauseScene.OnRender")
	bb_pausescene_PauseScene *self=this;
	DBG_LOCAL(self,"Self")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/pausescene.monkey<46>");
	m_router()->m_previous()->m_OnRender();
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/pausescene.monkey<47>");
	m_RenderBlend();
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/pausescene.monkey<48>");
	bb_scene_Scene::m_OnRender();
}
void bb_pausescene_PauseScene::m_OnKeyDown(bb_keyevent_KeyEvent* t_event){
	DBG_ENTER("PauseScene.OnKeyDown")
	bb_pausescene_PauseScene *self=this;
	DBG_LOCAL(self,"Self")
	DBG_LOCAL(t_event,"event")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/pausescene.monkey<52>");
	int t_1=t_event->m_code();
	DBG_LOCAL(t_1,"1")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/pausescene.monkey<53>");
	if(t_1==27 || t_1==81){
		DBG_BLOCK();
		DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/pausescene.monkey<54>");
		dynamic_cast<bb_gamescene_GameScene*>(m_router()->m_previous())->m_OnPauseLeaveGame();
		DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/pausescene.monkey<55>");
		m_router()->m_Goto(String(L"menu"));
	}else{
		DBG_BLOCK();
		DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/pausescene.monkey<57>");
		m_router()->m_Goto(m_router()->m_previousName());
	}
}
void bb_pausescene_PauseScene::m_OnTouchDown(bb_touchevent_TouchEvent* t_event){
	DBG_ENTER("PauseScene.OnTouchDown")
	bb_pausescene_PauseScene *self=this;
	DBG_LOCAL(self,"Self")
	DBG_LOCAL(t_event,"event")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/pausescene.monkey<62>");
	if(f_continueBtn->m_Collide(t_event->m_pos())){
		DBG_BLOCK();
		DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/pausescene.monkey<63>");
		m_router()->m_Goto(m_router()->m_previousName());
	}
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/pausescene.monkey<66>");
	if(f_quitBtn->m_Collide(t_event->m_pos())){
		DBG_BLOCK();
		DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/pausescene.monkey<67>");
		dynamic_cast<bb_gamescene_GameScene*>(m_router()->m_previous())->m_OnPauseLeaveGame();
		DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/pausescene.monkey<68>");
		m_router()->m_Goto(String(L"menu"));
	}
}
void bb_pausescene_PauseScene::mark(){
	bb_scene_Scene::mark();
	gc_mark_q(f_overlay);
	gc_mark_q(f_continueBtn);
	gc_mark_q(f_quitBtn);
}
String bb_pausescene_PauseScene::debug(){
	String t="(PauseScene)\n";
	t=bb_scene_Scene::debug()+t;
	t+=dbg_decl("overlay",&f_overlay);
	t+=dbg_decl("continueBtn",&f_continueBtn);
	t+=dbg_decl("quitBtn",&f_quitBtn);
	return t;
}
bb_newhighscorescene_NewHighscoreScene::bb_newhighscorescene_NewHighscoreScene(){
	f_continueBtn=0;
	f_input=0;
	f_score=0;
	f_highscore=(new bb_gamehighscore_GameHighscore)->g_new();
}
bb_newhighscorescene_NewHighscoreScene* bb_newhighscorescene_NewHighscoreScene::g_new(){
	DBG_ENTER("NewHighscoreScene.new")
	bb_newhighscorescene_NewHighscoreScene *self=this;
	DBG_LOCAL(self,"Self")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/newhighscorescene.monkey<14>");
	bb_scene_Scene::g_new();
	return this;
}
void bb_newhighscorescene_NewHighscoreScene::m_OnCreate(bb_director_Director* t_director){
	DBG_ENTER("NewHighscoreScene.OnCreate")
	bb_newhighscorescene_NewHighscoreScene *self=this;
	DBG_LOCAL(self,"Self")
	DBG_LOCAL(t_director,"director")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/newhighscorescene.monkey<27>");
	bb_sprite_Sprite* t_background=(new bb_sprite_Sprite)->g_new(String(L"newhighscore.png"),0);
	DBG_LOCAL(t_background,"background")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/newhighscorescene.monkey<28>");
	t_background->m_pos()->f_y=FLOAT(40.0);
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/newhighscorescene.monkey<29>");
	m_layer()->m_Add4(t_background);
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/newhighscorescene.monkey<32>");
	gc_assign(f_continueBtn,(new bb_sprite_Sprite)->g_new(String(L"01_06-continue.png"),0));
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/newhighscorescene.monkey<33>");
	m_layer()->m_Add4(f_continueBtn);
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/newhighscorescene.monkey<36>");
	gc_assign(f_input,(new bb_textinput_TextInput)->g_new(String(L"CoRa"),(new bb_vector2d_Vector2D)->g_new(FLOAT(110.0),FLOAT(415.0))));
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/newhighscorescene.monkey<37>");
	gc_assign(f_input->f_color,(new bb_color_Color)->g_new(FLOAT(3.0),FLOAT(105.0),FLOAT(187.0),FLOAT(1.0)));
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/newhighscorescene.monkey<38>");
	m_layer()->m_Add4(f_input);
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/newhighscorescene.monkey<40>");
	bb_scene_Scene::m_OnCreate(t_director);
}
void bb_newhighscorescene_NewHighscoreScene::m_OnEnter(){
	DBG_ENTER("NewHighscoreScene.OnEnter")
	bb_newhighscorescene_NewHighscoreScene *self=this;
	DBG_LOCAL(self,"Self")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/newhighscorescene.monkey<45>");
	f_continueBtn->m_CenterX(m_director());
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/newhighscorescene.monkey<46>");
	f_continueBtn->m_pos()->f_y=f_input->m_pos()->f_y+FLOAT(175.0);
}
void bb_newhighscorescene_NewHighscoreScene::m_OnRender(){
	DBG_ENTER("NewHighscoreScene.OnRender")
	bb_newhighscorescene_NewHighscoreScene *self=this;
	DBG_LOCAL(self,"Self")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/newhighscorescene.monkey<51>");
	m_router()->m_previous()->m_OnRender();
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/newhighscorescene.monkey<52>");
	m_RenderBlend();
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/newhighscorescene.monkey<53>");
	bb_scene_Scene::m_OnRender();
}
void bb_newhighscorescene_NewHighscoreScene::m_SaveAndContinue(){
	DBG_ENTER("NewHighscoreScene.SaveAndContinue")
	bb_newhighscorescene_NewHighscoreScene *self=this;
	DBG_LOCAL(self,"Self")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/newhighscorescene.monkey<70>");
	String t_level=bb_severity_CurrentSeverity()->m_ToString()+String(L" ");
	DBG_LOCAL(t_level,"level")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/newhighscorescene.monkey<71>");
	bb_statestore_StateStore::g_Load(f_highscore);
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/newhighscorescene.monkey<72>");
	f_highscore->m_Add5(t_level+f_input->m_text2(),f_score);
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/newhighscorescene.monkey<73>");
	bb_statestore_StateStore::g_Save(f_highscore);
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/newhighscorescene.monkey<75>");
	dynamic_cast<bb_highscorescene_HighscoreScene*>(m_router()->m_Get(String(L"highscore")))->f_lastScoreKey=t_level+f_input->m_text2();
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/newhighscorescene.monkey<76>");
	dynamic_cast<bb_highscorescene_HighscoreScene*>(m_router()->m_Get(String(L"highscore")))->f_lastScoreValue=f_score;
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/newhighscorescene.monkey<77>");
	m_router()->m_Goto(String(L"highscore"));
}
void bb_newhighscorescene_NewHighscoreScene::m_OnKeyDown(bb_keyevent_KeyEvent* t_event){
	DBG_ENTER("NewHighscoreScene.OnKeyDown")
	bb_newhighscorescene_NewHighscoreScene *self=this;
	DBG_LOCAL(self,"Self")
	DBG_LOCAL(t_event,"event")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/newhighscorescene.monkey<57>");
	bb_scene_Scene::m_OnKeyDown(t_event);
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/newhighscorescene.monkey<58>");
	if(t_event->m_code()==13){
		DBG_BLOCK();
		m_SaveAndContinue();
	}
}
void bb_newhighscorescene_NewHighscoreScene::m_OnTouchDown(bb_touchevent_TouchEvent* t_event){
	DBG_ENTER("NewHighscoreScene.OnTouchDown")
	bb_newhighscorescene_NewHighscoreScene *self=this;
	DBG_LOCAL(self,"Self")
	DBG_LOCAL(t_event,"event")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/newhighscorescene.monkey<63>");
	if(f_continueBtn->m_Collide(t_event->m_pos())){
		DBG_BLOCK();
		m_SaveAndContinue();
	}
}
void bb_newhighscorescene_NewHighscoreScene::mark(){
	bb_scene_Scene::mark();
	gc_mark_q(f_continueBtn);
	gc_mark_q(f_input);
	gc_mark_q(f_highscore);
}
String bb_newhighscorescene_NewHighscoreScene::debug(){
	String t="(NewHighscoreScene)\n";
	t=bb_scene_Scene::debug()+t;
	t+=dbg_decl("highscore",&f_highscore);
	t+=dbg_decl("continueBtn",&f_continueBtn);
	t+=dbg_decl("input",&f_input);
	t+=dbg_decl("score",&f_score);
	return t;
}
bb_app_App::bb_app_App(){
}
bb_app_App* bb_app_App::g_new(){
	DBG_ENTER("App.new")
	bb_app_App *self=this;
	DBG_LOCAL(self,"Self")
	DBG_INFO("/Applications/Monkey/modules/mojo/app.monkey<105>");
	gc_assign(bb_app_device,(new bb_app_AppDevice)->g_new(this));
	return this;
}
int bb_app_App::m_OnCreate2(){
	DBG_ENTER("App.OnCreate")
	bb_app_App *self=this;
	DBG_LOCAL(self,"Self")
	return 0;
}
int bb_app_App::m_OnUpdate2(){
	DBG_ENTER("App.OnUpdate")
	bb_app_App *self=this;
	DBG_LOCAL(self,"Self")
	return 0;
}
int bb_app_App::m_OnSuspend(){
	DBG_ENTER("App.OnSuspend")
	bb_app_App *self=this;
	DBG_LOCAL(self,"Self")
	return 0;
}
int bb_app_App::m_OnResume2(){
	DBG_ENTER("App.OnResume")
	bb_app_App *self=this;
	DBG_LOCAL(self,"Self")
	return 0;
}
int bb_app_App::m_OnRender(){
	DBG_ENTER("App.OnRender")
	bb_app_App *self=this;
	DBG_LOCAL(self,"Self")
	return 0;
}
int bb_app_App::m_OnLoading(){
	DBG_ENTER("App.OnLoading")
	bb_app_App *self=this;
	DBG_LOCAL(self,"Self")
	return 0;
}
void bb_app_App::mark(){
	Object::mark();
}
String bb_app_App::debug(){
	String t="(App)\n";
	return t;
}
bb_director_Director::bb_director_Director(){
	f__size=0;
	f__center=0;
	f__device=(new bb_vector2d_Vector2D)->g_new(FLOAT(0.0),FLOAT(0.0));
	f__scale=0;
	f__inputController=(new bb_inputcontroller_InputController)->g_new();
	f__handler=0;
	f_onCreateDispatched=false;
	f_appOnCreateCatched=false;
	f_deltaTimer=0;
}
bb_vector2d_Vector2D* bb_director_Director::m_size(){
	DBG_ENTER("Director.size")
	bb_director_Director *self=this;
	DBG_LOCAL(self,"Self")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/director.monkey<106>");
	return f__size;
}
void bb_director_Director::m_RecalculateScale(){
	DBG_ENTER("Director.RecalculateScale")
	bb_director_Director *self=this;
	DBG_LOCAL(self,"Self")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/director.monkey<126>");
	gc_assign(f__scale,f__device->m_Copy()->m_Div(f__size));
}
void bb_director_Director::m_size2(bb_vector2d_Vector2D* t_newSize){
	DBG_ENTER("Director.size")
	bb_director_Director *self=this;
	DBG_LOCAL(self,"Self")
	DBG_LOCAL(t_newSize,"newSize")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/director.monkey<110>");
	gc_assign(f__size,t_newSize);
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/director.monkey<111>");
	gc_assign(f__center,f__size->m_Copy()->m_Div2(FLOAT(2.0)));
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/director.monkey<112>");
	m_RecalculateScale();
}
bb_director_Director* bb_director_Director::g_new(int t_width,int t_height){
	DBG_ENTER("Director.new")
	bb_director_Director *self=this;
	DBG_LOCAL(self,"Self")
	DBG_LOCAL(t_width,"width")
	DBG_LOCAL(t_height,"height")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/director.monkey<31>");
	bb_app_App::g_new();
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/director.monkey<32>");
	m_size2((new bb_vector2d_Vector2D)->g_new(Float(t_width),Float(t_height)));
	return this;
}
bb_director_Director* bb_director_Director::g_new2(){
	DBG_ENTER("Director.new")
	bb_director_Director *self=this;
	DBG_LOCAL(self,"Self")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/director.monkey<15>");
	bb_app_App::g_new();
	return this;
}
bb_inputcontroller_InputController* bb_director_Director::m_inputController(){
	DBG_ENTER("Director.inputController")
	bb_director_Director *self=this;
	DBG_LOCAL(self,"Self")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/director.monkey<116>");
	return f__inputController;
}
void bb_director_Director::m_DispatchOnCreate(){
	DBG_ENTER("Director.DispatchOnCreate")
	bb_director_Director *self=this;
	DBG_LOCAL(self,"Self")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/director.monkey<130>");
	if(f_onCreateDispatched){
		DBG_BLOCK();
		return;
	}
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/director.monkey<131>");
	if(!((f__handler)!=0)){
		DBG_BLOCK();
		return;
	}
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/director.monkey<132>");
	if(!f_appOnCreateCatched){
		DBG_BLOCK();
		return;
	}
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/director.monkey<134>");
	f__handler->m_OnCreate(this);
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/director.monkey<135>");
	f_onCreateDispatched=true;
}
void bb_director_Director::m_Run(bb_directorevents_DirectorEvents* t__handler){
	DBG_ENTER("Director.Run")
	bb_director_Director *self=this;
	DBG_LOCAL(self,"Self")
	DBG_LOCAL(t__handler,"_handler")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/director.monkey<89>");
	gc_assign(this->f__handler,t__handler);
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/director.monkey<90>");
	m_DispatchOnCreate();
}
bb_directorevents_DirectorEvents* bb_director_Director::m_handler(){
	DBG_ENTER("Director.handler")
	bb_director_Director *self=this;
	DBG_LOCAL(self,"Self")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/director.monkey<120>");
	return f__handler;
}
bb_vector2d_Vector2D* bb_director_Director::m_center(){
	DBG_ENTER("Director.center")
	bb_director_Director *self=this;
	DBG_LOCAL(self,"Self")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/director.monkey<94>");
	return f__center;
}
bb_vector2d_Vector2D* bb_director_Director::m_scale(){
	DBG_ENTER("Director.scale")
	bb_director_Director *self=this;
	DBG_LOCAL(self,"Self")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/director.monkey<102>");
	return f__scale;
}
int bb_director_Director::m_OnCreate2(){
	DBG_ENTER("Director.OnCreate")
	bb_director_Director *self=this;
	DBG_LOCAL(self,"Self")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/director.monkey<36>");
	gc_assign(f__device,(new bb_vector2d_Vector2D)->g_new(Float(bb_graphics_DeviceWidth()),Float(bb_graphics_DeviceHeight())));
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/director.monkey<37>");
	if(!((m_size())!=0)){
		DBG_BLOCK();
		m_size2(f__device->m_Copy());
	}
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/director.monkey<38>");
	m_RecalculateScale();
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/director.monkey<40>");
	gc_assign(m_inputController()->f_scale,m_scale());
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/director.monkey<41>");
	bb_random_Seed=util::GetTimestamp();
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/director.monkey<43>");
	gc_assign(f_deltaTimer,(new bb_deltatimer_DeltaTimer)->g_new(FLOAT(30.0)));
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/director.monkey<44>");
	bb_app_SetUpdateRate(60);
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/director.monkey<46>");
	f_appOnCreateCatched=true;
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/director.monkey<47>");
	m_DispatchOnCreate();
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/director.monkey<48>");
	return 0;
}
int bb_director_Director::m_OnLoading(){
	DBG_ENTER("Director.OnLoading")
	bb_director_Director *self=this;
	DBG_LOCAL(self,"Self")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/director.monkey<52>");
	if((f__handler)!=0){
		DBG_BLOCK();
		f__handler->m_OnLoading();
	}
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/director.monkey<53>");
	return 0;
}
int bb_director_Director::m_OnUpdate2(){
	DBG_ENTER("Director.OnUpdate")
	bb_director_Director *self=this;
	DBG_LOCAL(self,"Self")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/director.monkey<57>");
	f_deltaTimer->m_OnUpdate2();
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/director.monkey<58>");
	if((f__handler)!=0){
		DBG_BLOCK();
		DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/director.monkey<59>");
		f__handler->m_OnUpdate(f_deltaTimer->m_delta(),f_deltaTimer->m_frameTime());
		DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/director.monkey<60>");
		m_inputController()->m_OnUpdate3(f__handler);
	}
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/director.monkey<62>");
	return 0;
}
int bb_director_Director::m_OnResume2(){
	DBG_ENTER("Director.OnResume")
	bb_director_Director *self=this;
	DBG_LOCAL(self,"Self")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/director.monkey<66>");
	if((f__handler)!=0){
		DBG_BLOCK();
		f__handler->m_OnResume(0);
	}
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/director.monkey<67>");
	return 0;
}
int bb_director_Director::m_OnSuspend(){
	DBG_ENTER("Director.OnSuspend")
	bb_director_Director *self=this;
	DBG_LOCAL(self,"Self")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/director.monkey<71>");
	if((f__handler)!=0){
		DBG_BLOCK();
		f__handler->m_OnSuspend();
	}
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/director.monkey<72>");
	return 0;
}
int bb_director_Director::m_OnRender(){
	DBG_ENTER("Director.OnRender")
	bb_director_Director *self=this;
	DBG_LOCAL(self,"Self")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/director.monkey<76>");
	bb_graphics_PushMatrix();
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/director.monkey<77>");
	bb_graphics_Scale(f__scale->f_x,f__scale->f_y);
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/director.monkey<78>");
	bb_graphics_SetScissor(FLOAT(0.0),FLOAT(0.0),f__device->f_x,f__device->f_y);
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/director.monkey<79>");
	bb_graphics_Cls(FLOAT(0.0),FLOAT(0.0),FLOAT(0.0));
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/director.monkey<81>");
	bb_graphics_PushMatrix();
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/director.monkey<82>");
	if((f__handler)!=0){
		DBG_BLOCK();
		f__handler->m_OnRender();
	}
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/director.monkey<83>");
	bb_graphics_PopMatrix();
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/director.monkey<84>");
	bb_graphics_PopMatrix();
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/director.monkey<85>");
	return 0;
}
void bb_director_Director::mark(){
	bb_app_App::mark();
	gc_mark_q(f__size);
	gc_mark_q(f__center);
	gc_mark_q(f__device);
	gc_mark_q(f__scale);
	gc_mark_q(f__inputController);
	gc_mark_q(f__handler);
	gc_mark_q(f_deltaTimer);
}
String bb_director_Director::debug(){
	String t="(Director)\n";
	t=bb_app_App::debug()+t;
	t+=dbg_decl("_center",&f__center);
	t+=dbg_decl("_device",&f__device);
	t+=dbg_decl("_inputController",&f__inputController);
	t+=dbg_decl("_scale",&f__scale);
	t+=dbg_decl("_size",&f__size);
	t+=dbg_decl("deltaTimer",&f_deltaTimer);
	t+=dbg_decl("_handler",&f__handler);
	t+=dbg_decl("onCreateDispatched",&f_onCreateDispatched);
	t+=dbg_decl("appOnCreateCatched",&f_appOnCreateCatched);
	return t;
}
bb_list_List::bb_list_List(){
	f__head=((new bb_list_HeadNode)->g_new());
}
bb_list_List* bb_list_List::g_new(){
	DBG_ENTER("List.new")
	bb_list_List *self=this;
	DBG_LOCAL(self,"Self")
	return this;
}
bb_list_Node* bb_list_List::m_AddLast(String t_data){
	DBG_ENTER("List.AddLast")
	bb_list_List *self=this;
	DBG_LOCAL(self,"Self")
	DBG_LOCAL(t_data,"data")
	DBG_INFO("/Applications/Monkey/modules/monkey/list.monkey<120>");
	bb_list_Node* t_=(new bb_list_Node)->g_new(f__head,f__head->f__pred,t_data);
	return t_;
}
bb_list_List* bb_list_List::g_new2(Array<String > t_data){
	DBG_ENTER("List.new")
	bb_list_List *self=this;
	DBG_LOCAL(self,"Self")
	DBG_LOCAL(t_data,"data")
	DBG_INFO("/Applications/Monkey/modules/monkey/list.monkey<13>");
	Array<String > t_=t_data;
	int t_2=0;
	while(t_2<t_.Length()){
		DBG_BLOCK();
		String t_t=t_.At(t_2);
		t_2=t_2+1;
		DBG_LOCAL(t_t,"t")
		DBG_INFO("/Applications/Monkey/modules/monkey/list.monkey<14>");
		m_AddLast(t_t);
	}
	return this;
}
bool bb_list_List::m_Equals(String t_lhs,String t_rhs){
	DBG_ENTER("List.Equals")
	bb_list_List *self=this;
	DBG_LOCAL(self,"Self")
	DBG_LOCAL(t_lhs,"lhs")
	DBG_LOCAL(t_rhs,"rhs")
	DBG_INFO("/Applications/Monkey/modules/monkey/list.monkey<28>");
	bool t_=t_lhs==t_rhs;
	return t_;
}
bool bb_list_List::m_Contains(String t_value){
	DBG_ENTER("List.Contains")
	bb_list_List *self=this;
	DBG_LOCAL(self,"Self")
	DBG_LOCAL(t_value,"value")
	DBG_INFO("/Applications/Monkey/modules/monkey/list.monkey<54>");
	bb_list_Node* t_node=f__head->f__succ;
	DBG_LOCAL(t_node,"node")
	DBG_INFO("/Applications/Monkey/modules/monkey/list.monkey<55>");
	while(t_node!=f__head){
		DBG_BLOCK();
		DBG_INFO("/Applications/Monkey/modules/monkey/list.monkey<56>");
		if(m_Equals(t_node->f__data,t_value)){
			DBG_BLOCK();
			return true;
		}
		DBG_INFO("/Applications/Monkey/modules/monkey/list.monkey<57>");
		t_node=t_node->f__succ;
	}
	return false;
}
void bb_list_List::mark(){
	Object::mark();
	gc_mark_q(f__head);
}
String bb_list_List::debug(){
	String t="(List)\n";
	t+=dbg_decl("_head",&f__head);
	return t;
}
bb_list_Node::bb_list_Node(){
	f__succ=0;
	f__pred=0;
	f__data=String();
}
bb_list_Node* bb_list_Node::g_new(bb_list_Node* t_succ,bb_list_Node* t_pred,String t_data){
	DBG_ENTER("Node.new")
	bb_list_Node *self=this;
	DBG_LOCAL(self,"Self")
	DBG_LOCAL(t_succ,"succ")
	DBG_LOCAL(t_pred,"pred")
	DBG_LOCAL(t_data,"data")
	DBG_INFO("/Applications/Monkey/modules/monkey/list.monkey<199>");
	gc_assign(f__succ,t_succ);
	DBG_INFO("/Applications/Monkey/modules/monkey/list.monkey<200>");
	gc_assign(f__pred,t_pred);
	DBG_INFO("/Applications/Monkey/modules/monkey/list.monkey<201>");
	gc_assign(f__succ->f__pred,this);
	DBG_INFO("/Applications/Monkey/modules/monkey/list.monkey<202>");
	gc_assign(f__pred->f__succ,this);
	DBG_INFO("/Applications/Monkey/modules/monkey/list.monkey<203>");
	f__data=t_data;
	return this;
}
bb_list_Node* bb_list_Node::g_new2(){
	DBG_ENTER("Node.new")
	bb_list_Node *self=this;
	DBG_LOCAL(self,"Self")
	DBG_INFO("/Applications/Monkey/modules/monkey/list.monkey<196>");
	return this;
}
void bb_list_Node::mark(){
	Object::mark();
	gc_mark_q(f__succ);
	gc_mark_q(f__pred);
}
String bb_list_Node::debug(){
	String t="(Node)\n";
	t+=dbg_decl("_succ",&f__succ);
	t+=dbg_decl("_pred",&f__pred);
	t+=dbg_decl("_data",&f__data);
	return t;
}
bb_list_HeadNode::bb_list_HeadNode(){
}
bb_list_HeadNode* bb_list_HeadNode::g_new(){
	DBG_ENTER("HeadNode.new")
	bb_list_HeadNode *self=this;
	DBG_LOCAL(self,"Self")
	DBG_INFO("/Applications/Monkey/modules/monkey/list.monkey<248>");
	bb_list_Node::g_new2();
	DBG_INFO("/Applications/Monkey/modules/monkey/list.monkey<249>");
	gc_assign(f__succ,(this));
	DBG_INFO("/Applications/Monkey/modules/monkey/list.monkey<250>");
	gc_assign(f__pred,(this));
	return this;
}
void bb_list_HeadNode::mark(){
	bb_list_Node::mark();
}
String bb_list_HeadNode::debug(){
	String t="(HeadNode)\n";
	t=bb_list_Node::debug()+t;
	return t;
}
bb_app_AppDevice::bb_app_AppDevice(){
	f_app=0;
	f_updateRate=0;
}
bb_app_AppDevice* bb_app_AppDevice::g_new(bb_app_App* t_app){
	DBG_ENTER("AppDevice.new")
	bb_app_AppDevice *self=this;
	DBG_LOCAL(self,"Self")
	DBG_LOCAL(t_app,"app")
	DBG_INFO("/Applications/Monkey/modules/mojo/app.monkey<45>");
	gc_assign(this->f_app,t_app);
	DBG_INFO("/Applications/Monkey/modules/mojo/app.monkey<46>");
	bb_graphics_SetGraphicsContext((new bb_graphics_GraphicsContext)->g_new(GraphicsDevice()));
	DBG_INFO("/Applications/Monkey/modules/mojo/app.monkey<47>");
	bb_input_SetInputDevice(InputDevice());
	DBG_INFO("/Applications/Monkey/modules/mojo/app.monkey<48>");
	bb_audio_SetAudioDevice(AudioDevice());
	return this;
}
bb_app_AppDevice* bb_app_AppDevice::g_new2(){
	DBG_ENTER("AppDevice.new")
	bb_app_AppDevice *self=this;
	DBG_LOCAL(self,"Self")
	DBG_INFO("/Applications/Monkey/modules/mojo/app.monkey<42>");
	return this;
}
int bb_app_AppDevice::OnCreate(){
	DBG_ENTER("AppDevice.OnCreate")
	bb_app_AppDevice *self=this;
	DBG_LOCAL(self,"Self")
	DBG_INFO("/Applications/Monkey/modules/mojo/app.monkey<52>");
	bb_graphics_SetFont(0,32);
	DBG_INFO("/Applications/Monkey/modules/mojo/app.monkey<53>");
	int t_=f_app->m_OnCreate2();
	return t_;
}
int bb_app_AppDevice::OnUpdate(){
	DBG_ENTER("AppDevice.OnUpdate")
	bb_app_AppDevice *self=this;
	DBG_LOCAL(self,"Self")
	DBG_INFO("/Applications/Monkey/modules/mojo/app.monkey<57>");
	int t_=f_app->m_OnUpdate2();
	return t_;
}
int bb_app_AppDevice::OnSuspend(){
	DBG_ENTER("AppDevice.OnSuspend")
	bb_app_AppDevice *self=this;
	DBG_LOCAL(self,"Self")
	DBG_INFO("/Applications/Monkey/modules/mojo/app.monkey<61>");
	int t_=f_app->m_OnSuspend();
	return t_;
}
int bb_app_AppDevice::OnResume(){
	DBG_ENTER("AppDevice.OnResume")
	bb_app_AppDevice *self=this;
	DBG_LOCAL(self,"Self")
	DBG_INFO("/Applications/Monkey/modules/mojo/app.monkey<65>");
	int t_=f_app->m_OnResume2();
	return t_;
}
int bb_app_AppDevice::OnRender(){
	DBG_ENTER("AppDevice.OnRender")
	bb_app_AppDevice *self=this;
	DBG_LOCAL(self,"Self")
	DBG_INFO("/Applications/Monkey/modules/mojo/app.monkey<69>");
	bb_graphics_BeginRender();
	DBG_INFO("/Applications/Monkey/modules/mojo/app.monkey<70>");
	int t_r=f_app->m_OnRender();
	DBG_LOCAL(t_r,"r")
	DBG_INFO("/Applications/Monkey/modules/mojo/app.monkey<71>");
	bb_graphics_EndRender();
	DBG_INFO("/Applications/Monkey/modules/mojo/app.monkey<72>");
	return t_r;
}
int bb_app_AppDevice::OnLoading(){
	DBG_ENTER("AppDevice.OnLoading")
	bb_app_AppDevice *self=this;
	DBG_LOCAL(self,"Self")
	DBG_INFO("/Applications/Monkey/modules/mojo/app.monkey<76>");
	bb_graphics_BeginRender();
	DBG_INFO("/Applications/Monkey/modules/mojo/app.monkey<77>");
	int t_r=f_app->m_OnLoading();
	DBG_LOCAL(t_r,"r")
	DBG_INFO("/Applications/Monkey/modules/mojo/app.monkey<78>");
	bb_graphics_EndRender();
	DBG_INFO("/Applications/Monkey/modules/mojo/app.monkey<79>");
	return t_r;
}
int bb_app_AppDevice::SetUpdateRate(int t_hertz){
	DBG_ENTER("AppDevice.SetUpdateRate")
	bb_app_AppDevice *self=this;
	DBG_LOCAL(self,"Self")
	DBG_LOCAL(t_hertz,"hertz")
	DBG_INFO("/Applications/Monkey/modules/mojo/app.monkey<83>");
	gxtkApp::SetUpdateRate(t_hertz);
	DBG_INFO("/Applications/Monkey/modules/mojo/app.monkey<84>");
	f_updateRate=t_hertz;
	return 0;
}
void bb_app_AppDevice::mark(){
	gxtkApp::mark();
	gc_mark_q(f_app);
}
String bb_app_AppDevice::debug(){
	String t="(AppDevice)\n";
	t+=dbg_decl("app",&f_app);
	t+=dbg_decl("updateRate",&f_updateRate);
	return t;
}
bb_graphics_GraphicsContext::bb_graphics_GraphicsContext(){
	f_device=0;
	f_defaultFont=0;
	f_font=0;
	f_firstChar=0;
	f_matrixSp=0;
	f_ix=FLOAT(1.0);
	f_iy=FLOAT(.0);
	f_jx=FLOAT(.0);
	f_jy=FLOAT(1.0);
	f_tx=FLOAT(.0);
	f_ty=FLOAT(.0);
	f_tformed=0;
	f_matDirty=0;
	f_color_r=FLOAT(.0);
	f_color_g=FLOAT(.0);
	f_color_b=FLOAT(.0);
	f_alpha=FLOAT(.0);
	f_blend=0;
	f_scissor_x=FLOAT(.0);
	f_scissor_y=FLOAT(.0);
	f_scissor_width=FLOAT(.0);
	f_scissor_height=FLOAT(.0);
	f_matrixStack=Array<Float >(192);
}
bb_graphics_GraphicsContext* bb_graphics_GraphicsContext::g_new(gxtkGraphics* t_device){
	DBG_ENTER("GraphicsContext.new")
	bb_graphics_GraphicsContext *self=this;
	DBG_LOCAL(self,"Self")
	DBG_LOCAL(t_device,"device")
	DBG_INFO("/Applications/Monkey/modules/mojo/graphics.monkey<210>");
	gc_assign(this->f_device,t_device);
	return this;
}
bb_graphics_GraphicsContext* bb_graphics_GraphicsContext::g_new2(){
	DBG_ENTER("GraphicsContext.new")
	bb_graphics_GraphicsContext *self=this;
	DBG_LOCAL(self,"Self")
	DBG_INFO("/Applications/Monkey/modules/mojo/graphics.monkey<207>");
	return this;
}
void bb_graphics_GraphicsContext::mark(){
	Object::mark();
	gc_mark_q(f_device);
	gc_mark_q(f_defaultFont);
	gc_mark_q(f_font);
	gc_mark_q(f_matrixStack);
}
String bb_graphics_GraphicsContext::debug(){
	String t="(GraphicsContext)\n";
	t+=dbg_decl("device",&f_device);
	t+=dbg_decl("color_r",&f_color_r);
	t+=dbg_decl("color_g",&f_color_g);
	t+=dbg_decl("color_b",&f_color_b);
	t+=dbg_decl("alpha",&f_alpha);
	t+=dbg_decl("blend",&f_blend);
	t+=dbg_decl("ix",&f_ix);
	t+=dbg_decl("iy",&f_iy);
	t+=dbg_decl("jx",&f_jx);
	t+=dbg_decl("jy",&f_jy);
	t+=dbg_decl("tx",&f_tx);
	t+=dbg_decl("ty",&f_ty);
	t+=dbg_decl("tformed",&f_tformed);
	t+=dbg_decl("matDirty",&f_matDirty);
	t+=dbg_decl("scissor_x",&f_scissor_x);
	t+=dbg_decl("scissor_y",&f_scissor_y);
	t+=dbg_decl("scissor_width",&f_scissor_width);
	t+=dbg_decl("scissor_height",&f_scissor_height);
	t+=dbg_decl("matrixStack",&f_matrixStack);
	t+=dbg_decl("matrixSp",&f_matrixSp);
	t+=dbg_decl("font",&f_font);
	t+=dbg_decl("firstChar",&f_firstChar);
	t+=dbg_decl("defaultFont",&f_defaultFont);
	return t;
}
bb_graphics_GraphicsContext* bb_graphics_context;
int bb_graphics_SetGraphicsContext(bb_graphics_GraphicsContext* t_gc){
	DBG_ENTER("SetGraphicsContext")
	DBG_LOCAL(t_gc,"gc")
	DBG_INFO("/Applications/Monkey/modules/mojo/graphics.monkey<250>");
	gc_assign(bb_graphics_context,t_gc);
	return 0;
}
gxtkInput* bb_input_device;
int bb_input_SetInputDevice(gxtkInput* t_dev){
	DBG_ENTER("SetInputDevice")
	DBG_LOCAL(t_dev,"dev")
	DBG_INFO("/Applications/Monkey/modules/mojo/input.monkey<40>");
	gc_assign(bb_input_device,t_dev);
	return 0;
}
gxtkAudio* bb_audio_device;
int bb_audio_SetAudioDevice(gxtkAudio* t_dev){
	DBG_ENTER("SetAudioDevice")
	DBG_LOCAL(t_dev,"dev")
	DBG_INFO("/Applications/Monkey/modules/mojo/audio.monkey<60>");
	gc_assign(bb_audio_device,t_dev);
	return 0;
}
bb_app_AppDevice* bb_app_device;
bb_vector2d_Vector2D::bb_vector2d_Vector2D(){
	f_x=FLOAT(.0);
	f_y=FLOAT(.0);
}
bb_vector2d_Vector2D* bb_vector2d_Vector2D::g_new(Float t_x,Float t_y){
	DBG_ENTER("Vector2D.new")
	bb_vector2d_Vector2D *self=this;
	DBG_LOCAL(self,"Self")
	DBG_LOCAL(t_x,"x")
	DBG_LOCAL(t_y,"y")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/vector2d.monkey<8>");
	this->f_x=t_x;
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/vector2d.monkey<9>");
	this->f_y=t_y;
	return this;
}
bb_vector2d_Vector2D* bb_vector2d_Vector2D::m_Copy(){
	DBG_ENTER("Vector2D.Copy")
	bb_vector2d_Vector2D *self=this;
	DBG_LOCAL(self,"Self")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/vector2d.monkey<37>");
	bb_vector2d_Vector2D* t_=(new bb_vector2d_Vector2D)->g_new(f_x,f_y);
	return t_;
}
bb_vector2d_Vector2D* bb_vector2d_Vector2D::m_Div(bb_vector2d_Vector2D* t_v2){
	DBG_ENTER("Vector2D.Div")
	bb_vector2d_Vector2D *self=this;
	DBG_LOCAL(self,"Self")
	DBG_LOCAL(t_v2,"v2")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/vector2d.monkey<97>");
	f_x/=t_v2->f_x;
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/vector2d.monkey<98>");
	f_y/=t_v2->f_y;
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/vector2d.monkey<99>");
	return this;
}
bb_vector2d_Vector2D* bb_vector2d_Vector2D::m_Div2(Float t_factor){
	DBG_ENTER("Vector2D.Div")
	bb_vector2d_Vector2D *self=this;
	DBG_LOCAL(self,"Self")
	DBG_LOCAL(t_factor,"factor")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/vector2d.monkey<103>");
	f_y/=t_factor;
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/vector2d.monkey<104>");
	f_x/=t_factor;
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/vector2d.monkey<105>");
	return this;
}
bb_vector2d_Vector2D* bb_vector2d_Vector2D::m_Sub(bb_vector2d_Vector2D* t_v2){
	DBG_ENTER("Vector2D.Sub")
	bb_vector2d_Vector2D *self=this;
	DBG_LOCAL(self,"Self")
	DBG_LOCAL(t_v2,"v2")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/vector2d.monkey<73>");
	f_x-=t_v2->f_x;
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/vector2d.monkey<74>");
	f_y-=t_v2->f_y;
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/vector2d.monkey<75>");
	return this;
}
bb_vector2d_Vector2D* bb_vector2d_Vector2D::m_Sub2(Float t_factor){
	DBG_ENTER("Vector2D.Sub")
	bb_vector2d_Vector2D *self=this;
	DBG_LOCAL(self,"Self")
	DBG_LOCAL(t_factor,"factor")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/vector2d.monkey<79>");
	f_x-=t_factor;
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/vector2d.monkey<80>");
	f_y-=t_factor;
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/vector2d.monkey<81>");
	return this;
}
bb_vector2d_Vector2D* bb_vector2d_Vector2D::m_Add2(bb_vector2d_Vector2D* t_v2){
	DBG_ENTER("Vector2D.Add")
	bb_vector2d_Vector2D *self=this;
	DBG_LOCAL(self,"Self")
	DBG_LOCAL(t_v2,"v2")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/vector2d.monkey<61>");
	f_x+=t_v2->f_x;
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/vector2d.monkey<62>");
	f_y+=t_v2->f_y;
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/vector2d.monkey<63>");
	return this;
}
bb_vector2d_Vector2D* bb_vector2d_Vector2D::m_Add3(Float t_factor){
	DBG_ENTER("Vector2D.Add")
	bb_vector2d_Vector2D *self=this;
	DBG_LOCAL(self,"Self")
	DBG_LOCAL(t_factor,"factor")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/vector2d.monkey<67>");
	f_x+=t_factor;
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/vector2d.monkey<68>");
	f_y+=t_factor;
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/vector2d.monkey<69>");
	return this;
}
Float bb_vector2d_Vector2D::m_Length(){
	DBG_ENTER("Vector2D.Length")
	bb_vector2d_Vector2D *self=this;
	DBG_LOCAL(self,"Self")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/vector2d.monkey<17>");
	Float t_=(Float)sqrt(f_x*f_x+f_y*f_y);
	return t_;
}
bb_vector2d_Vector2D* bb_vector2d_Vector2D::m_Normalize(){
	DBG_ENTER("Vector2D.Normalize")
	bb_vector2d_Vector2D *self=this;
	DBG_LOCAL(self,"Self")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/vector2d.monkey<41>");
	Float t_length=m_Length();
	DBG_LOCAL(t_length,"length")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/vector2d.monkey<42>");
	if(t_length==FLOAT(0.0)){
		DBG_BLOCK();
		return this;
	}
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/vector2d.monkey<44>");
	f_x/=t_length;
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/vector2d.monkey<45>");
	f_y/=t_length;
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/vector2d.monkey<47>");
	return this;
}
bb_vector2d_Vector2D* bb_vector2d_Vector2D::m_Mul(bb_vector2d_Vector2D* t_v2){
	DBG_ENTER("Vector2D.Mul")
	bb_vector2d_Vector2D *self=this;
	DBG_LOCAL(self,"Self")
	DBG_LOCAL(t_v2,"v2")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/vector2d.monkey<85>");
	f_x*=t_v2->f_x;
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/vector2d.monkey<86>");
	f_y*=t_v2->f_y;
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/vector2d.monkey<87>");
	return this;
}
bb_vector2d_Vector2D* bb_vector2d_Vector2D::m_Mul2(Float t_factor){
	DBG_ENTER("Vector2D.Mul")
	bb_vector2d_Vector2D *self=this;
	DBG_LOCAL(self,"Self")
	DBG_LOCAL(t_factor,"factor")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/vector2d.monkey<91>");
	f_x*=t_factor;
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/vector2d.monkey<92>");
	f_y*=t_factor;
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/vector2d.monkey<93>");
	return this;
}
void bb_vector2d_Vector2D::mark(){
	Object::mark();
}
String bb_vector2d_Vector2D::debug(){
	String t="(Vector2D)\n";
	t+=dbg_decl("x",&f_x);
	t+=dbg_decl("y",&f_y);
	return t;
}
bb_inputcontroller_InputController::bb_inputcontroller_InputController(){
	f_trackKeys=false;
	f_trackTouch=false;
	f__touchFingers=1;
	f_touchRetainSize=5;
	f_scale=(new bb_vector2d_Vector2D)->g_new(FLOAT(0.0),FLOAT(0.0));
	f_isTouchDown=Array<bool >(31);
	f_touchEvents=Array<bb_touchevent_TouchEvent* >(31);
	f_touchDownDispatched=Array<bool >(31);
	f_touchMinDistance=FLOAT(5.0);
	f_keyboardEnabled=false;
	f_keysActive=(new bb_set_IntSet)->g_new();
	f_keyEvents=(new bb_map_IntMap2)->g_new();
	f_dispatchedKeyEvents=(new bb_set_IntSet)->g_new();
}
bb_inputcontroller_InputController* bb_inputcontroller_InputController::g_new(){
	DBG_ENTER("InputController.new")
	bb_inputcontroller_InputController *self=this;
	DBG_LOCAL(self,"Self")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/inputcontroller.monkey<13>");
	return this;
}
void bb_inputcontroller_InputController::m_touchFingers(int t_number){
	DBG_ENTER("InputController.touchFingers")
	bb_inputcontroller_InputController *self=this;
	DBG_LOCAL(self,"Self")
	DBG_LOCAL(t_number,"number")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/inputcontroller.monkey<60>");
	if(t_number>31){
		DBG_BLOCK();
		DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/inputcontroller.monkey<61>");
		Error(String(L"Only 31 can be tracked."));
	}
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/inputcontroller.monkey<63>");
	if(((!((t_number)!=0))?1:0)>0){
		DBG_BLOCK();
		DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/inputcontroller.monkey<64>");
		Error(String(L"Number of fingers must be greater than 0."));
	}
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/inputcontroller.monkey<67>");
	f__touchFingers=t_number;
}
void bb_inputcontroller_InputController::m_ReadTouch(){
	DBG_ENTER("InputController.ReadTouch")
	bb_inputcontroller_InputController *self=this;
	DBG_LOCAL(self,"Self")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/inputcontroller.monkey<123>");
	bb_vector2d_Vector2D* t_scaledVector=0;
	DBG_LOCAL(t_scaledVector,"scaledVector")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/inputcontroller.monkey<124>");
	bb_vector2d_Vector2D* t_diffVector=0;
	DBG_LOCAL(t_diffVector,"diffVector")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/inputcontroller.monkey<125>");
	bool t_lastTouchDown=false;
	DBG_LOCAL(t_lastTouchDown,"lastTouchDown")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/inputcontroller.monkey<127>");
	for(int t_i=0;t_i<f__touchFingers;t_i=t_i+1){
		DBG_BLOCK();
		DBG_LOCAL(t_i,"i")
		DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/inputcontroller.monkey<128>");
		t_lastTouchDown=f_isTouchDown.At(t_i);
		DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/inputcontroller.monkey<129>");
		f_isTouchDown.At(t_i)=((bb_input_TouchDown(t_i))!=0);
		DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/inputcontroller.monkey<131>");
		if(!f_isTouchDown.At(t_i) && !t_lastTouchDown){
			DBG_BLOCK();
			continue;
		}
		DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/inputcontroller.monkey<133>");
		if(f_touchEvents.At(t_i)==0){
			DBG_BLOCK();
			DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/inputcontroller.monkey<134>");
			f_touchDownDispatched.At(t_i)=false;
			DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/inputcontroller.monkey<135>");
			gc_assign(f_touchEvents.At(t_i),(new bb_touchevent_TouchEvent)->g_new(t_i));
		}
		DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/inputcontroller.monkey<138>");
		t_scaledVector=((new bb_vector2d_Vector2D)->g_new(bb_input_TouchX(t_i),bb_input_TouchY(t_i)))->m_Div(f_scale);
		DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/inputcontroller.monkey<139>");
		t_diffVector=t_scaledVector->m_Copy()->m_Sub(f_touchEvents.At(t_i)->m_prevPos());
		DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/inputcontroller.monkey<141>");
		if(t_diffVector->m_Length()>=f_touchMinDistance){
			DBG_BLOCK();
			DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/inputcontroller.monkey<142>");
			f_touchEvents.At(t_i)->m_Add2(t_scaledVector);
			DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/inputcontroller.monkey<143>");
			if(f_touchRetainSize>-1){
				DBG_BLOCK();
				f_touchEvents.At(t_i)->m_Trim(f_touchRetainSize);
			}
		}
	}
}
void bb_inputcontroller_InputController::m_ProcessTouch(bb_directorevents_DirectorEvents* t_handler){
	DBG_ENTER("InputController.ProcessTouch")
	bb_inputcontroller_InputController *self=this;
	DBG_LOCAL(self,"Self")
	DBG_LOCAL(t_handler,"handler")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/inputcontroller.monkey<107>");
	for(int t_i=0;t_i<f__touchFingers;t_i=t_i+1){
		DBG_BLOCK();
		DBG_LOCAL(t_i,"i")
		DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/inputcontroller.monkey<108>");
		if(f_touchEvents.At(t_i)==0){
			DBG_BLOCK();
			continue;
		}
		DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/inputcontroller.monkey<110>");
		if(!f_touchDownDispatched.At(t_i)){
			DBG_BLOCK();
			DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/inputcontroller.monkey<111>");
			t_handler->m_OnTouchDown(f_touchEvents.At(t_i)->m_Copy());
			DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/inputcontroller.monkey<112>");
			f_touchDownDispatched.At(t_i)=true;
		}else{
			DBG_BLOCK();
			DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/inputcontroller.monkey<113>");
			if(!f_isTouchDown.At(t_i)){
				DBG_BLOCK();
				DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/inputcontroller.monkey<114>");
				t_handler->m_OnTouchUp(f_touchEvents.At(t_i));
				DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/inputcontroller.monkey<115>");
				f_touchEvents.At(t_i)=0;
			}else{
				DBG_BLOCK();
				DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/inputcontroller.monkey<117>");
				t_handler->m_OnTouchMove(f_touchEvents.At(t_i));
			}
		}
	}
}
void bb_inputcontroller_InputController::m_ReadKeys(){
	DBG_ENTER("InputController.ReadKeys")
	bb_inputcontroller_InputController *self=this;
	DBG_LOCAL(self,"Self")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/inputcontroller.monkey<91>");
	f_keysActive->m_Clear();
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/inputcontroller.monkey<92>");
	int t_charCode=0;
	DBG_LOCAL(t_charCode,"charCode")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/inputcontroller.monkey<103>");
	do{
		DBG_BLOCK();
		DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/inputcontroller.monkey<95>");
		t_charCode=bb_input_GetChar();
		DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/inputcontroller.monkey<96>");
		if(!((t_charCode)!=0)){
			DBG_BLOCK();
			return;
		}
		DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/inputcontroller.monkey<98>");
		f_keysActive->m_Insert4(t_charCode);
		DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/inputcontroller.monkey<99>");
		if(!f_keyEvents->m_Contains2(t_charCode)){
			DBG_BLOCK();
			DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/inputcontroller.monkey<100>");
			f_keyEvents->m_Add6(t_charCode,(new bb_keyevent_KeyEvent)->g_new(t_charCode));
			DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/inputcontroller.monkey<101>");
			f_dispatchedKeyEvents->m_Remove4(t_charCode);
		}
	}while(!(false));
}
void bb_inputcontroller_InputController::m_ProcessKeys(bb_directorevents_DirectorEvents* t_handler){
	DBG_ENTER("InputController.ProcessKeys")
	bb_inputcontroller_InputController *self=this;
	DBG_LOCAL(self,"Self")
	DBG_LOCAL(t_handler,"handler")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/inputcontroller.monkey<73>");
	bb_map_ValueEnumerator* t_=f_keyEvents->m_Values()->m_ObjectEnumerator();
	while(t_->m_HasNext()){
		DBG_BLOCK();
		bb_keyevent_KeyEvent* t_event=t_->m_NextObject();
		DBG_LOCAL(t_event,"event")
		DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/inputcontroller.monkey<74>");
		if(!f_dispatchedKeyEvents->m_Contains2(t_event->m_code())){
			DBG_BLOCK();
			DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/inputcontroller.monkey<75>");
			t_handler->m_OnKeyDown(t_event);
			DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/inputcontroller.monkey<76>");
			f_dispatchedKeyEvents->m_Insert4(t_event->m_code());
			DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/inputcontroller.monkey<77>");
			continue;
		}
		DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/inputcontroller.monkey<80>");
		if(!f_keysActive->m_Contains2(t_event->m_code())){
			DBG_BLOCK();
			DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/inputcontroller.monkey<81>");
			t_handler->m_OnKeyUp(t_event);
			DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/inputcontroller.monkey<82>");
			f_dispatchedKeyEvents->m_Remove4(t_event->m_code());
			DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/inputcontroller.monkey<83>");
			f_keyEvents->m_Remove4(t_event->m_code());
		}else{
			DBG_BLOCK();
			DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/inputcontroller.monkey<85>");
			t_handler->m_OnKeyPress(t_event);
		}
	}
}
void bb_inputcontroller_InputController::m_OnUpdate3(bb_directorevents_DirectorEvents* t_handler){
	DBG_ENTER("InputController.OnUpdate")
	bb_inputcontroller_InputController *self=this;
	DBG_LOCAL(self,"Self")
	DBG_LOCAL(t_handler,"handler")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/inputcontroller.monkey<36>");
	if(f_trackTouch){
		DBG_BLOCK();
		DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/inputcontroller.monkey<37>");
		m_ReadTouch();
		DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/inputcontroller.monkey<38>");
		m_ProcessTouch(t_handler);
	}
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/inputcontroller.monkey<41>");
	if(f_trackKeys){
		DBG_BLOCK();
		DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/inputcontroller.monkey<42>");
		if(!f_keyboardEnabled){
			DBG_BLOCK();
			DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/inputcontroller.monkey<43>");
			f_keyboardEnabled=true;
			DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/inputcontroller.monkey<44>");
			bb_input_EnableKeyboard();
		}
		DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/inputcontroller.monkey<46>");
		m_ReadKeys();
		DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/inputcontroller.monkey<47>");
		m_ProcessKeys(t_handler);
	}else{
		DBG_BLOCK();
		DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/inputcontroller.monkey<49>");
		if(f_keyboardEnabled){
			DBG_BLOCK();
			DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/inputcontroller.monkey<50>");
			f_keyboardEnabled=false;
			DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/inputcontroller.monkey<51>");
			bb_input_DisableKeyboard();
			DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/inputcontroller.monkey<52>");
			f_keysActive->m_Clear();
			DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/inputcontroller.monkey<53>");
			f_keyEvents->m_Clear();
			DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/inputcontroller.monkey<54>");
			f_dispatchedKeyEvents->m_Clear();
		}
	}
}
void bb_inputcontroller_InputController::mark(){
	Object::mark();
	gc_mark_q(f_scale);
	gc_mark_q(f_isTouchDown);
	gc_mark_q(f_touchEvents);
	gc_mark_q(f_touchDownDispatched);
	gc_mark_q(f_keysActive);
	gc_mark_q(f_keyEvents);
	gc_mark_q(f_dispatchedKeyEvents);
}
String bb_inputcontroller_InputController::debug(){
	String t="(InputController)\n";
	t+=dbg_decl("_touchFingers",&f__touchFingers);
	t+=dbg_decl("isTouchDown",&f_isTouchDown);
	t+=dbg_decl("touchDownDispatched",&f_touchDownDispatched);
	t+=dbg_decl("touchEvents",&f_touchEvents);
	t+=dbg_decl("keyboardEnabled",&f_keyboardEnabled);
	t+=dbg_decl("keyEvents",&f_keyEvents);
	t+=dbg_decl("keysActive",&f_keysActive);
	t+=dbg_decl("dispatchedKeyEvents",&f_dispatchedKeyEvents);
	t+=dbg_decl("scale",&f_scale);
	t+=dbg_decl("trackKeys",&f_trackKeys);
	t+=dbg_decl("trackTouch",&f_trackTouch);
	t+=dbg_decl("touchMinDistance",&f_touchMinDistance);
	t+=dbg_decl("touchRetainSize",&f_touchRetainSize);
	return t;
}
int bbMain(){
	DBG_ENTER("Main")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop.monkey<28>");
	bb_router_Router* t_router=(new bb_router_Router)->g_new();
	DBG_LOCAL(t_router,"router")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop.monkey<29>");
	t_router->m_Add(String(L"intro"),((new bb_introscene_IntroScene)->g_new()));
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop.monkey<30>");
	t_router->m_Add(String(L"menu"),((new bb_menuscene_MenuScene)->g_new()));
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop.monkey<31>");
	t_router->m_Add(String(L"highscore"),((new bb_highscorescene_HighscoreScene)->g_new()));
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop.monkey<32>");
	t_router->m_Add(String(L"game"),((new bb_gamescene_GameScene)->g_new()));
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop.monkey<33>");
	t_router->m_Add(String(L"gameover"),((new bb_gameoverscene_GameOverScene)->g_new()));
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop.monkey<34>");
	t_router->m_Add(String(L"pause"),((new bb_pausescene_PauseScene)->g_new()));
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop.monkey<35>");
	t_router->m_Add(String(L"newhighscore"),((new bb_newhighscorescene_NewHighscoreScene)->g_new()));
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop.monkey<37>");
	t_router->m_Goto(String(L"menu"));
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop.monkey<42>");
	bb_director_Director* t_director=(new bb_director_Director)->g_new(640,960);
	DBG_LOCAL(t_director,"director")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop.monkey<44>");
	t_director->m_inputController()->f_trackKeys=true;
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop.monkey<46>");
	t_director->m_inputController()->f_trackTouch=true;
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop.monkey<47>");
	t_director->m_inputController()->m_touchFingers(1);
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop.monkey<48>");
	t_director->m_inputController()->f_touchRetainSize=25;
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop.monkey<49>");
	t_director->m_Run(t_router);
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop.monkey<50>");
	return 0;
}
bb_fanout_FanOut::bb_fanout_FanOut(){
	f_objects=(new bb_list_List2)->g_new();
}
bb_fanout_FanOut* bb_fanout_FanOut::g_new(){
	DBG_ENTER("FanOut.new")
	bb_fanout_FanOut *self=this;
	DBG_LOCAL(self,"Self")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/fanout.monkey<12>");
	return this;
}
void bb_fanout_FanOut::m_OnCreate(bb_director_Director* t_director){
	DBG_ENTER("FanOut.OnCreate")
	bb_fanout_FanOut *self=this;
	DBG_LOCAL(self,"Self")
	DBG_LOCAL(t_director,"director")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/fanout.monkey<40>");
	if(!((f_objects)!=0)){
		DBG_BLOCK();
		return;
	}
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/fanout.monkey<41>");
	bb_list_Enumerator* t_=f_objects->m_ObjectEnumerator();
	while(t_->m_HasNext()){
		DBG_BLOCK();
		bb_directorevents_DirectorEvents* t_obj=t_->m_NextObject();
		DBG_LOCAL(t_obj,"obj")
		DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/fanout.monkey<42>");
		t_obj->m_OnCreate(t_director);
	}
}
void bb_fanout_FanOut::m_Add4(bb_directorevents_DirectorEvents* t_obj){
	DBG_ENTER("FanOut.Add")
	bb_fanout_FanOut *self=this;
	DBG_LOCAL(self,"Self")
	DBG_LOCAL(t_obj,"obj")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/fanout.monkey<20>");
	f_objects->m_AddLast2(t_obj);
}
void bb_fanout_FanOut::m_Remove(bb_directorevents_DirectorEvents* t_obj){
	DBG_ENTER("FanOut.Remove")
	bb_fanout_FanOut *self=this;
	DBG_LOCAL(self,"Self")
	DBG_LOCAL(t_obj,"obj")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/fanout.monkey<32>");
	f_objects->m_RemoveEach(t_obj);
}
void bb_fanout_FanOut::m_Clear(){
	DBG_ENTER("FanOut.Clear")
	bb_fanout_FanOut *self=this;
	DBG_LOCAL(self,"Self")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/fanout.monkey<28>");
	f_objects->m_Clear();
}
void bb_fanout_FanOut::m_OnLoading(){
	DBG_ENTER("FanOut.OnLoading")
	bb_fanout_FanOut *self=this;
	DBG_LOCAL(self,"Self")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/fanout.monkey<47>");
	if(!((f_objects)!=0)){
		DBG_BLOCK();
		return;
	}
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/fanout.monkey<48>");
	bb_list_Enumerator* t_=f_objects->m_ObjectEnumerator();
	while(t_->m_HasNext()){
		DBG_BLOCK();
		bb_directorevents_DirectorEvents* t_obj=t_->m_NextObject();
		DBG_LOCAL(t_obj,"obj")
		DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/fanout.monkey<49>");
		t_obj->m_OnLoading();
	}
}
void bb_fanout_FanOut::m_OnUpdate(Float t_delta,Float t_frameTime){
	DBG_ENTER("FanOut.OnUpdate")
	bb_fanout_FanOut *self=this;
	DBG_LOCAL(self,"Self")
	DBG_LOCAL(t_delta,"delta")
	DBG_LOCAL(t_frameTime,"frameTime")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/fanout.monkey<54>");
	if(!((f_objects)!=0)){
		DBG_BLOCK();
		return;
	}
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/fanout.monkey<55>");
	bb_list_Enumerator* t_=f_objects->m_ObjectEnumerator();
	while(t_->m_HasNext()){
		DBG_BLOCK();
		bb_directorevents_DirectorEvents* t_obj=t_->m_NextObject();
		DBG_LOCAL(t_obj,"obj")
		DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/fanout.monkey<56>");
		t_obj->m_OnUpdate(t_delta,t_frameTime);
	}
}
void bb_fanout_FanOut::m_OnRender(){
	DBG_ENTER("FanOut.OnRender")
	bb_fanout_FanOut *self=this;
	DBG_LOCAL(self,"Self")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/fanout.monkey<61>");
	if(!((f_objects)!=0)){
		DBG_BLOCK();
		return;
	}
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/fanout.monkey<62>");
	bb_list_Enumerator* t_=f_objects->m_ObjectEnumerator();
	while(t_->m_HasNext()){
		DBG_BLOCK();
		bb_directorevents_DirectorEvents* t_obj=t_->m_NextObject();
		DBG_LOCAL(t_obj,"obj")
		DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/fanout.monkey<63>");
		t_obj->m_OnRender();
	}
}
void bb_fanout_FanOut::m_OnSuspend(){
	DBG_ENTER("FanOut.OnSuspend")
	bb_fanout_FanOut *self=this;
	DBG_LOCAL(self,"Self")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/fanout.monkey<68>");
	if(!((f_objects)!=0)){
		DBG_BLOCK();
		return;
	}
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/fanout.monkey<69>");
	bb_list_Enumerator* t_=f_objects->m_ObjectEnumerator();
	while(t_->m_HasNext()){
		DBG_BLOCK();
		bb_directorevents_DirectorEvents* t_obj=t_->m_NextObject();
		DBG_LOCAL(t_obj,"obj")
		DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/fanout.monkey<70>");
		t_obj->m_OnSuspend();
	}
}
void bb_fanout_FanOut::m_OnResume(int t_delta){
	DBG_ENTER("FanOut.OnResume")
	bb_fanout_FanOut *self=this;
	DBG_LOCAL(self,"Self")
	DBG_LOCAL(t_delta,"delta")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/fanout.monkey<75>");
	if(!((f_objects)!=0)){
		DBG_BLOCK();
		return;
	}
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/fanout.monkey<76>");
	bb_list_Enumerator* t_=f_objects->m_ObjectEnumerator();
	while(t_->m_HasNext()){
		DBG_BLOCK();
		bb_directorevents_DirectorEvents* t_obj=t_->m_NextObject();
		DBG_LOCAL(t_obj,"obj")
		DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/fanout.monkey<77>");
		t_obj->m_OnResume(t_delta);
	}
}
void bb_fanout_FanOut::m_OnKeyDown(bb_keyevent_KeyEvent* t_event){
	DBG_ENTER("FanOut.OnKeyDown")
	bb_fanout_FanOut *self=this;
	DBG_LOCAL(self,"Self")
	DBG_LOCAL(t_event,"event")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/fanout.monkey<82>");
	if(!((f_objects)!=0)){
		DBG_BLOCK();
		return;
	}
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/fanout.monkey<83>");
	bb_list_Enumerator* t_=f_objects->m_ObjectEnumerator();
	while(t_->m_HasNext()){
		DBG_BLOCK();
		bb_directorevents_DirectorEvents* t_obj=t_->m_NextObject();
		DBG_LOCAL(t_obj,"obj")
		DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/fanout.monkey<84>");
		t_obj->m_OnKeyDown(t_event);
	}
}
void bb_fanout_FanOut::m_OnKeyPress(bb_keyevent_KeyEvent* t_event){
	DBG_ENTER("FanOut.OnKeyPress")
	bb_fanout_FanOut *self=this;
	DBG_LOCAL(self,"Self")
	DBG_LOCAL(t_event,"event")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/fanout.monkey<89>");
	if(!((f_objects)!=0)){
		DBG_BLOCK();
		return;
	}
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/fanout.monkey<90>");
	bb_list_Enumerator* t_=f_objects->m_ObjectEnumerator();
	while(t_->m_HasNext()){
		DBG_BLOCK();
		bb_directorevents_DirectorEvents* t_obj=t_->m_NextObject();
		DBG_LOCAL(t_obj,"obj")
		DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/fanout.monkey<91>");
		t_obj->m_OnKeyPress(t_event);
	}
}
void bb_fanout_FanOut::m_OnKeyUp(bb_keyevent_KeyEvent* t_event){
	DBG_ENTER("FanOut.OnKeyUp")
	bb_fanout_FanOut *self=this;
	DBG_LOCAL(self,"Self")
	DBG_LOCAL(t_event,"event")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/fanout.monkey<96>");
	if(!((f_objects)!=0)){
		DBG_BLOCK();
		return;
	}
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/fanout.monkey<97>");
	bb_list_Enumerator* t_=f_objects->m_ObjectEnumerator();
	while(t_->m_HasNext()){
		DBG_BLOCK();
		bb_directorevents_DirectorEvents* t_obj=t_->m_NextObject();
		DBG_LOCAL(t_obj,"obj")
		DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/fanout.monkey<98>");
		t_obj->m_OnKeyUp(t_event);
	}
}
void bb_fanout_FanOut::m_OnTouchDown(bb_touchevent_TouchEvent* t_event){
	DBG_ENTER("FanOut.OnTouchDown")
	bb_fanout_FanOut *self=this;
	DBG_LOCAL(self,"Self")
	DBG_LOCAL(t_event,"event")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/fanout.monkey<103>");
	if(!((f_objects)!=0)){
		DBG_BLOCK();
		return;
	}
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/fanout.monkey<104>");
	bb_list_Enumerator* t_=f_objects->m_ObjectEnumerator();
	while(t_->m_HasNext()){
		DBG_BLOCK();
		bb_directorevents_DirectorEvents* t_obj=t_->m_NextObject();
		DBG_LOCAL(t_obj,"obj")
		DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/fanout.monkey<105>");
		t_obj->m_OnTouchDown(t_event);
	}
}
void bb_fanout_FanOut::m_OnTouchMove(bb_touchevent_TouchEvent* t_event){
	DBG_ENTER("FanOut.OnTouchMove")
	bb_fanout_FanOut *self=this;
	DBG_LOCAL(self,"Self")
	DBG_LOCAL(t_event,"event")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/fanout.monkey<110>");
	if(!((f_objects)!=0)){
		DBG_BLOCK();
		return;
	}
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/fanout.monkey<111>");
	bb_list_Enumerator* t_=f_objects->m_ObjectEnumerator();
	while(t_->m_HasNext()){
		DBG_BLOCK();
		bb_directorevents_DirectorEvents* t_obj=t_->m_NextObject();
		DBG_LOCAL(t_obj,"obj")
		DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/fanout.monkey<112>");
		t_obj->m_OnTouchMove(t_event);
	}
}
void bb_fanout_FanOut::m_OnTouchUp(bb_touchevent_TouchEvent* t_event){
	DBG_ENTER("FanOut.OnTouchUp")
	bb_fanout_FanOut *self=this;
	DBG_LOCAL(self,"Self")
	DBG_LOCAL(t_event,"event")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/fanout.monkey<117>");
	if(!((f_objects)!=0)){
		DBG_BLOCK();
		return;
	}
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/fanout.monkey<118>");
	bb_list_Enumerator* t_=f_objects->m_ObjectEnumerator();
	while(t_->m_HasNext()){
		DBG_BLOCK();
		bb_directorevents_DirectorEvents* t_obj=t_->m_NextObject();
		DBG_LOCAL(t_obj,"obj")
		DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/fanout.monkey<119>");
		t_obj->m_OnTouchUp(t_event);
	}
}
int bb_fanout_FanOut::m_Count(){
	DBG_ENTER("FanOut.Count")
	bb_fanout_FanOut *self=this;
	DBG_LOCAL(self,"Self")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/fanout.monkey<24>");
	int t_=f_objects->m_Count();
	return t_;
}
bb_list_Enumerator* bb_fanout_FanOut::m_ObjectEnumerator(){
	DBG_ENTER("FanOut.ObjectEnumerator")
	bb_fanout_FanOut *self=this;
	DBG_LOCAL(self,"Self")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/fanout.monkey<36>");
	bb_list_Enumerator* t_=f_objects->m_ObjectEnumerator();
	return t_;
}
void bb_fanout_FanOut::mark(){
	Object::mark();
	gc_mark_q(f_objects);
}
String bb_fanout_FanOut::debug(){
	String t="(FanOut)\n";
	t+=dbg_decl("objects",&f_objects);
	return t;
}
bb_list_List2::bb_list_List2(){
	f__head=((new bb_list_HeadNode2)->g_new());
}
bb_list_List2* bb_list_List2::g_new(){
	DBG_ENTER("List.new")
	bb_list_List2 *self=this;
	DBG_LOCAL(self,"Self")
	return this;
}
bb_list_Node2* bb_list_List2::m_AddLast2(bb_directorevents_DirectorEvents* t_data){
	DBG_ENTER("List.AddLast")
	bb_list_List2 *self=this;
	DBG_LOCAL(self,"Self")
	DBG_LOCAL(t_data,"data")
	DBG_INFO("/Applications/Monkey/modules/monkey/list.monkey<120>");
	bb_list_Node2* t_=(new bb_list_Node2)->g_new(f__head,f__head->f__pred,t_data);
	return t_;
}
bb_list_List2* bb_list_List2::g_new2(Array<bb_directorevents_DirectorEvents* > t_data){
	DBG_ENTER("List.new")
	bb_list_List2 *self=this;
	DBG_LOCAL(self,"Self")
	DBG_LOCAL(t_data,"data")
	DBG_INFO("/Applications/Monkey/modules/monkey/list.monkey<13>");
	Array<bb_directorevents_DirectorEvents* > t_=t_data;
	int t_2=0;
	while(t_2<t_.Length()){
		DBG_BLOCK();
		bb_directorevents_DirectorEvents* t_t=t_.At(t_2);
		t_2=t_2+1;
		DBG_LOCAL(t_t,"t")
		DBG_INFO("/Applications/Monkey/modules/monkey/list.monkey<14>");
		m_AddLast2(t_t);
	}
	return this;
}
bb_list_Enumerator* bb_list_List2::m_ObjectEnumerator(){
	DBG_ENTER("List.ObjectEnumerator")
	bb_list_List2 *self=this;
	DBG_LOCAL(self,"Self")
	DBG_INFO("/Applications/Monkey/modules/monkey/list.monkey<124>");
	bb_list_Enumerator* t_=(new bb_list_Enumerator)->g_new(this);
	return t_;
}
bool bb_list_List2::m_Equals2(bb_directorevents_DirectorEvents* t_lhs,bb_directorevents_DirectorEvents* t_rhs){
	DBG_ENTER("List.Equals")
	bb_list_List2 *self=this;
	DBG_LOCAL(self,"Self")
	DBG_LOCAL(t_lhs,"lhs")
	DBG_LOCAL(t_rhs,"rhs")
	DBG_INFO("/Applications/Monkey/modules/monkey/list.monkey<28>");
	bool t_=t_lhs==t_rhs;
	return t_;
}
int bb_list_List2::m_RemoveEach(bb_directorevents_DirectorEvents* t_value){
	DBG_ENTER("List.RemoveEach")
	bb_list_List2 *self=this;
	DBG_LOCAL(self,"Self")
	DBG_LOCAL(t_value,"value")
	DBG_INFO("/Applications/Monkey/modules/monkey/list.monkey<107>");
	bb_list_Node2* t_node=f__head->f__succ;
	DBG_LOCAL(t_node,"node")
	DBG_INFO("/Applications/Monkey/modules/monkey/list.monkey<108>");
	while(t_node!=f__head){
		DBG_BLOCK();
		DBG_INFO("/Applications/Monkey/modules/monkey/list.monkey<109>");
		bb_list_Node2* t_succ=t_node->f__succ;
		DBG_LOCAL(t_succ,"succ")
		DBG_INFO("/Applications/Monkey/modules/monkey/list.monkey<110>");
		if(m_Equals2(t_node->f__data,t_value)){
			DBG_BLOCK();
			t_node->m_Remove2();
		}
		DBG_INFO("/Applications/Monkey/modules/monkey/list.monkey<111>");
		t_node=t_succ;
	}
	return 0;
}
int bb_list_List2::m_Clear(){
	DBG_ENTER("List.Clear")
	bb_list_List2 *self=this;
	DBG_LOCAL(self,"Self")
	DBG_INFO("/Applications/Monkey/modules/monkey/list.monkey<36>");
	gc_assign(f__head->f__succ,f__head);
	DBG_INFO("/Applications/Monkey/modules/monkey/list.monkey<37>");
	gc_assign(f__head->f__pred,f__head);
	return 0;
}
int bb_list_List2::m_Count(){
	DBG_ENTER("List.Count")
	bb_list_List2 *self=this;
	DBG_LOCAL(self,"Self")
	DBG_INFO("/Applications/Monkey/modules/monkey/list.monkey<41>");
	int t_n=0;
	bb_list_Node2* t_node=f__head->f__succ;
	DBG_LOCAL(t_n,"n")
	DBG_LOCAL(t_node,"node")
	DBG_INFO("/Applications/Monkey/modules/monkey/list.monkey<42>");
	while(t_node!=f__head){
		DBG_BLOCK();
		DBG_INFO("/Applications/Monkey/modules/monkey/list.monkey<43>");
		t_node=t_node->f__succ;
		DBG_INFO("/Applications/Monkey/modules/monkey/list.monkey<44>");
		t_n+=1;
	}
	DBG_INFO("/Applications/Monkey/modules/monkey/list.monkey<46>");
	return t_n;
}
void bb_list_List2::mark(){
	Object::mark();
	gc_mark_q(f__head);
}
String bb_list_List2::debug(){
	String t="(List)\n";
	t+=dbg_decl("_head",&f__head);
	return t;
}
bb_list_Node2::bb_list_Node2(){
	f__succ=0;
	f__pred=0;
	f__data=0;
}
bb_list_Node2* bb_list_Node2::g_new(bb_list_Node2* t_succ,bb_list_Node2* t_pred,bb_directorevents_DirectorEvents* t_data){
	DBG_ENTER("Node.new")
	bb_list_Node2 *self=this;
	DBG_LOCAL(self,"Self")
	DBG_LOCAL(t_succ,"succ")
	DBG_LOCAL(t_pred,"pred")
	DBG_LOCAL(t_data,"data")
	DBG_INFO("/Applications/Monkey/modules/monkey/list.monkey<199>");
	gc_assign(f__succ,t_succ);
	DBG_INFO("/Applications/Monkey/modules/monkey/list.monkey<200>");
	gc_assign(f__pred,t_pred);
	DBG_INFO("/Applications/Monkey/modules/monkey/list.monkey<201>");
	gc_assign(f__succ->f__pred,this);
	DBG_INFO("/Applications/Monkey/modules/monkey/list.monkey<202>");
	gc_assign(f__pred->f__succ,this);
	DBG_INFO("/Applications/Monkey/modules/monkey/list.monkey<203>");
	gc_assign(f__data,t_data);
	return this;
}
bb_list_Node2* bb_list_Node2::g_new2(){
	DBG_ENTER("Node.new")
	bb_list_Node2 *self=this;
	DBG_LOCAL(self,"Self")
	DBG_INFO("/Applications/Monkey/modules/monkey/list.monkey<196>");
	return this;
}
int bb_list_Node2::m_Remove2(){
	DBG_ENTER("Node.Remove")
	bb_list_Node2 *self=this;
	DBG_LOCAL(self,"Self")
	DBG_INFO("/Applications/Monkey/modules/monkey/list.monkey<212>");
	if(f__succ->f__pred!=this){
		DBG_BLOCK();
		Error(String(L"Illegal operation on removed node"));
	}
	DBG_INFO("/Applications/Monkey/modules/monkey/list.monkey<214>");
	gc_assign(f__succ->f__pred,f__pred);
	DBG_INFO("/Applications/Monkey/modules/monkey/list.monkey<215>");
	gc_assign(f__pred->f__succ,f__succ);
	return 0;
}
void bb_list_Node2::mark(){
	Object::mark();
	gc_mark_q(f__succ);
	gc_mark_q(f__pred);
	gc_mark_q(f__data);
}
String bb_list_Node2::debug(){
	String t="(Node)\n";
	t+=dbg_decl("_succ",&f__succ);
	t+=dbg_decl("_pred",&f__pred);
	t+=dbg_decl("_data",&f__data);
	return t;
}
bb_list_HeadNode2::bb_list_HeadNode2(){
}
bb_list_HeadNode2* bb_list_HeadNode2::g_new(){
	DBG_ENTER("HeadNode.new")
	bb_list_HeadNode2 *self=this;
	DBG_LOCAL(self,"Self")
	DBG_INFO("/Applications/Monkey/modules/monkey/list.monkey<248>");
	bb_list_Node2::g_new2();
	DBG_INFO("/Applications/Monkey/modules/monkey/list.monkey<249>");
	gc_assign(f__succ,(this));
	DBG_INFO("/Applications/Monkey/modules/monkey/list.monkey<250>");
	gc_assign(f__pred,(this));
	return this;
}
void bb_list_HeadNode2::mark(){
	bb_list_Node2::mark();
}
String bb_list_HeadNode2::debug(){
	String t="(HeadNode)\n";
	t=bb_list_Node2::debug()+t;
	return t;
}
bb_list_Enumerator::bb_list_Enumerator(){
	f__list=0;
	f__curr=0;
}
bb_list_Enumerator* bb_list_Enumerator::g_new(bb_list_List2* t_list){
	DBG_ENTER("Enumerator.new")
	bb_list_Enumerator *self=this;
	DBG_LOCAL(self,"Self")
	DBG_LOCAL(t_list,"list")
	DBG_INFO("/Applications/Monkey/modules/monkey/list.monkey<264>");
	gc_assign(f__list,t_list);
	DBG_INFO("/Applications/Monkey/modules/monkey/list.monkey<265>");
	gc_assign(f__curr,t_list->f__head->f__succ);
	return this;
}
bb_list_Enumerator* bb_list_Enumerator::g_new2(){
	DBG_ENTER("Enumerator.new")
	bb_list_Enumerator *self=this;
	DBG_LOCAL(self,"Self")
	DBG_INFO("/Applications/Monkey/modules/monkey/list.monkey<261>");
	return this;
}
bool bb_list_Enumerator::m_HasNext(){
	DBG_ENTER("Enumerator.HasNext")
	bb_list_Enumerator *self=this;
	DBG_LOCAL(self,"Self")
	DBG_INFO("/Applications/Monkey/modules/monkey/list.monkey<269>");
	while(f__curr->f__succ->f__pred!=f__curr){
		DBG_BLOCK();
		DBG_INFO("/Applications/Monkey/modules/monkey/list.monkey<270>");
		gc_assign(f__curr,f__curr->f__succ);
	}
	DBG_INFO("/Applications/Monkey/modules/monkey/list.monkey<272>");
	bool t_=f__curr!=f__list->f__head;
	return t_;
}
bb_directorevents_DirectorEvents* bb_list_Enumerator::m_NextObject(){
	DBG_ENTER("Enumerator.NextObject")
	bb_list_Enumerator *self=this;
	DBG_LOCAL(self,"Self")
	DBG_INFO("/Applications/Monkey/modules/monkey/list.monkey<276>");
	bb_directorevents_DirectorEvents* t_data=f__curr->f__data;
	DBG_LOCAL(t_data,"data")
	DBG_INFO("/Applications/Monkey/modules/monkey/list.monkey<277>");
	gc_assign(f__curr,f__curr->f__succ);
	DBG_INFO("/Applications/Monkey/modules/monkey/list.monkey<278>");
	return t_data;
}
void bb_list_Enumerator::mark(){
	Object::mark();
	gc_mark_q(f__list);
	gc_mark_q(f__curr);
}
String bb_list_Enumerator::debug(){
	String t="(Enumerator)\n";
	t+=dbg_decl("_list",&f__list);
	t+=dbg_decl("_curr",&f__curr);
	return t;
}
bb_graphics_Image::bb_graphics_Image(){
	f_surface=0;
	f_width=0;
	f_height=0;
	f_frames=Array<bb_graphics_Frame* >();
	f_flags=0;
	f_tx=FLOAT(.0);
	f_ty=FLOAT(.0);
	f_source=0;
}
int bb_graphics_Image::g_DefaultFlags;
bb_graphics_Image* bb_graphics_Image::g_new(){
	DBG_ENTER("Image.new")
	bb_graphics_Image *self=this;
	DBG_LOCAL(self,"Self")
	DBG_INFO("/Applications/Monkey/modules/mojo/graphics.monkey<64>");
	return this;
}
int bb_graphics_Image::m_SetHandle(Float t_tx,Float t_ty){
	DBG_ENTER("Image.SetHandle")
	bb_graphics_Image *self=this;
	DBG_LOCAL(self,"Self")
	DBG_LOCAL(t_tx,"tx")
	DBG_LOCAL(t_ty,"ty")
	DBG_INFO("/Applications/Monkey/modules/mojo/graphics.monkey<110>");
	this->f_tx=t_tx;
	DBG_INFO("/Applications/Monkey/modules/mojo/graphics.monkey<111>");
	this->f_ty=t_ty;
	DBG_INFO("/Applications/Monkey/modules/mojo/graphics.monkey<112>");
	this->f_flags=this->f_flags&-2;
	return 0;
}
int bb_graphics_Image::m_ApplyFlags(int t_iflags){
	DBG_ENTER("Image.ApplyFlags")
	bb_graphics_Image *self=this;
	DBG_LOCAL(self,"Self")
	DBG_LOCAL(t_iflags,"iflags")
	DBG_INFO("/Applications/Monkey/modules/mojo/graphics.monkey<180>");
	f_flags=t_iflags;
	DBG_INFO("/Applications/Monkey/modules/mojo/graphics.monkey<182>");
	if((f_flags&2)!=0){
		DBG_BLOCK();
		DBG_INFO("/Applications/Monkey/modules/mojo/graphics.monkey<183>");
		Array<bb_graphics_Frame* > t_=f_frames;
		int t_2=0;
		while(t_2<t_.Length()){
			DBG_BLOCK();
			bb_graphics_Frame* t_f=t_.At(t_2);
			t_2=t_2+1;
			DBG_LOCAL(t_f,"f")
			DBG_INFO("/Applications/Monkey/modules/mojo/graphics.monkey<184>");
			t_f->f_x+=1;
		}
		DBG_INFO("/Applications/Monkey/modules/mojo/graphics.monkey<186>");
		f_width-=2;
	}
	DBG_INFO("/Applications/Monkey/modules/mojo/graphics.monkey<189>");
	if((f_flags&4)!=0){
		DBG_BLOCK();
		DBG_INFO("/Applications/Monkey/modules/mojo/graphics.monkey<190>");
		Array<bb_graphics_Frame* > t_3=f_frames;
		int t_4=0;
		while(t_4<t_3.Length()){
			DBG_BLOCK();
			bb_graphics_Frame* t_f2=t_3.At(t_4);
			t_4=t_4+1;
			DBG_LOCAL(t_f2,"f")
			DBG_INFO("/Applications/Monkey/modules/mojo/graphics.monkey<191>");
			t_f2->f_y+=1;
		}
		DBG_INFO("/Applications/Monkey/modules/mojo/graphics.monkey<193>");
		f_height-=2;
	}
	DBG_INFO("/Applications/Monkey/modules/mojo/graphics.monkey<196>");
	if((f_flags&1)!=0){
		DBG_BLOCK();
		DBG_INFO("/Applications/Monkey/modules/mojo/graphics.monkey<197>");
		m_SetHandle(Float(f_width)/FLOAT(2.0),Float(f_height)/FLOAT(2.0));
	}
	DBG_INFO("/Applications/Monkey/modules/mojo/graphics.monkey<200>");
	if(f_frames.Length()==1 && f_frames.At(0)->f_x==0 && f_frames.At(0)->f_y==0 && f_width==f_surface->Width() && f_height==f_surface->Height()){
		DBG_BLOCK();
		DBG_INFO("/Applications/Monkey/modules/mojo/graphics.monkey<201>");
		f_flags|=65536;
	}
	return 0;
}
bb_graphics_Image* bb_graphics_Image::m_Load(String t_path,int t_nframes,int t_iflags){
	DBG_ENTER("Image.Load")
	bb_graphics_Image *self=this;
	DBG_LOCAL(self,"Self")
	DBG_LOCAL(t_path,"path")
	DBG_LOCAL(t_nframes,"nframes")
	DBG_LOCAL(t_iflags,"iflags")
	DBG_INFO("/Applications/Monkey/modules/mojo/graphics.monkey<133>");
	gc_assign(f_surface,bb_graphics_context->f_device->LoadSurface(t_path));
	DBG_INFO("/Applications/Monkey/modules/mojo/graphics.monkey<134>");
	if(!((f_surface)!=0)){
		DBG_BLOCK();
		return 0;
	}
	DBG_INFO("/Applications/Monkey/modules/mojo/graphics.monkey<136>");
	f_width=f_surface->Width()/t_nframes;
	DBG_INFO("/Applications/Monkey/modules/mojo/graphics.monkey<137>");
	f_height=f_surface->Height();
	DBG_INFO("/Applications/Monkey/modules/mojo/graphics.monkey<139>");
	gc_assign(f_frames,Array<bb_graphics_Frame* >(t_nframes));
	DBG_INFO("/Applications/Monkey/modules/mojo/graphics.monkey<141>");
	for(int t_i=0;t_i<t_nframes;t_i=t_i+1){
		DBG_BLOCK();
		DBG_LOCAL(t_i,"i")
		DBG_INFO("/Applications/Monkey/modules/mojo/graphics.monkey<142>");
		gc_assign(f_frames.At(t_i),(new bb_graphics_Frame)->g_new(t_i*f_width,0));
	}
	DBG_INFO("/Applications/Monkey/modules/mojo/graphics.monkey<145>");
	m_ApplyFlags(t_iflags);
	DBG_INFO("/Applications/Monkey/modules/mojo/graphics.monkey<147>");
	return this;
}
bb_graphics_Image* bb_graphics_Image::m_Grab(int t_x,int t_y,int t_iwidth,int t_iheight,int t_nframes,int t_iflags,bb_graphics_Image* t_source){
	DBG_ENTER("Image.Grab")
	bb_graphics_Image *self=this;
	DBG_LOCAL(self,"Self")
	DBG_LOCAL(t_x,"x")
	DBG_LOCAL(t_y,"y")
	DBG_LOCAL(t_iwidth,"iwidth")
	DBG_LOCAL(t_iheight,"iheight")
	DBG_LOCAL(t_nframes,"nframes")
	DBG_LOCAL(t_iflags,"iflags")
	DBG_LOCAL(t_source,"source")
	DBG_INFO("/Applications/Monkey/modules/mojo/graphics.monkey<152>");
	gc_assign(this->f_source,t_source);
	DBG_INFO("/Applications/Monkey/modules/mojo/graphics.monkey<153>");
	gc_assign(f_surface,t_source->f_surface);
	DBG_INFO("/Applications/Monkey/modules/mojo/graphics.monkey<155>");
	f_width=t_iwidth;
	DBG_INFO("/Applications/Monkey/modules/mojo/graphics.monkey<156>");
	f_height=t_iheight;
	DBG_INFO("/Applications/Monkey/modules/mojo/graphics.monkey<158>");
	gc_assign(f_frames,Array<bb_graphics_Frame* >(t_nframes));
	DBG_INFO("/Applications/Monkey/modules/mojo/graphics.monkey<160>");
	int t_ix=t_x;
	int t_iy=t_y;
	DBG_LOCAL(t_ix,"ix")
	DBG_LOCAL(t_iy,"iy")
	DBG_INFO("/Applications/Monkey/modules/mojo/graphics.monkey<162>");
	for(int t_i=0;t_i<t_nframes;t_i=t_i+1){
		DBG_BLOCK();
		DBG_LOCAL(t_i,"i")
		DBG_INFO("/Applications/Monkey/modules/mojo/graphics.monkey<163>");
		if(t_ix+f_width>t_source->f_width){
			DBG_BLOCK();
			DBG_INFO("/Applications/Monkey/modules/mojo/graphics.monkey<164>");
			t_ix=0;
			DBG_INFO("/Applications/Monkey/modules/mojo/graphics.monkey<165>");
			t_iy+=f_height;
		}
		DBG_INFO("/Applications/Monkey/modules/mojo/graphics.monkey<167>");
		if(t_ix+f_width>t_source->f_width || t_iy+f_height>t_source->f_height){
			DBG_BLOCK();
			DBG_INFO("/Applications/Monkey/modules/mojo/graphics.monkey<168>");
			Error(String(L"Image frame outside surface"));
		}
		DBG_INFO("/Applications/Monkey/modules/mojo/graphics.monkey<170>");
		gc_assign(f_frames.At(t_i),(new bb_graphics_Frame)->g_new(t_ix+t_source->f_frames.At(0)->f_x,t_iy+t_source->f_frames.At(0)->f_y));
		DBG_INFO("/Applications/Monkey/modules/mojo/graphics.monkey<171>");
		t_ix+=f_width;
	}
	DBG_INFO("/Applications/Monkey/modules/mojo/graphics.monkey<174>");
	m_ApplyFlags(t_iflags);
	DBG_INFO("/Applications/Monkey/modules/mojo/graphics.monkey<176>");
	return this;
}
bb_graphics_Image* bb_graphics_Image::m_GrabImage(int t_x,int t_y,int t_width,int t_height,int t_frames,int t_flags){
	DBG_ENTER("Image.GrabImage")
	bb_graphics_Image *self=this;
	DBG_LOCAL(self,"Self")
	DBG_LOCAL(t_x,"x")
	DBG_LOCAL(t_y,"y")
	DBG_LOCAL(t_width,"width")
	DBG_LOCAL(t_height,"height")
	DBG_LOCAL(t_frames,"frames")
	DBG_LOCAL(t_flags,"flags")
	DBG_INFO("/Applications/Monkey/modules/mojo/graphics.monkey<105>");
	if(this->f_frames.Length()!=1){
		DBG_BLOCK();
		return 0;
	}
	DBG_INFO("/Applications/Monkey/modules/mojo/graphics.monkey<106>");
	bb_graphics_Image* t_=((new bb_graphics_Image)->g_new())->m_Grab(t_x,t_y,t_width,t_height,t_frames,t_flags,this);
	return t_;
}
int bb_graphics_Image::m_Width(){
	DBG_ENTER("Image.Width")
	bb_graphics_Image *self=this;
	DBG_LOCAL(self,"Self")
	DBG_INFO("/Applications/Monkey/modules/mojo/graphics.monkey<77>");
	return f_width;
}
int bb_graphics_Image::m_Height(){
	DBG_ENTER("Image.Height")
	bb_graphics_Image *self=this;
	DBG_LOCAL(self,"Self")
	DBG_INFO("/Applications/Monkey/modules/mojo/graphics.monkey<81>");
	return f_height;
}
void bb_graphics_Image::mark(){
	Object::mark();
	gc_mark_q(f_surface);
	gc_mark_q(f_frames);
	gc_mark_q(f_source);
}
String bb_graphics_Image::debug(){
	String t="(Image)\n";
	t+=dbg_decl("DefaultFlags",&bb_graphics_Image::g_DefaultFlags);
	t+=dbg_decl("source",&f_source);
	t+=dbg_decl("surface",&f_surface);
	t+=dbg_decl("width",&f_width);
	t+=dbg_decl("height",&f_height);
	t+=dbg_decl("flags",&f_flags);
	t+=dbg_decl("frames",&f_frames);
	t+=dbg_decl("tx",&f_tx);
	t+=dbg_decl("ty",&f_ty);
	return t;
}
bb_graphics_Frame::bb_graphics_Frame(){
	f_x=0;
	f_y=0;
}
bb_graphics_Frame* bb_graphics_Frame::g_new(int t_x,int t_y){
	DBG_ENTER("Frame.new")
	bb_graphics_Frame *self=this;
	DBG_LOCAL(self,"Self")
	DBG_LOCAL(t_x,"x")
	DBG_LOCAL(t_y,"y")
	DBG_INFO("/Applications/Monkey/modules/mojo/graphics.monkey<56>");
	this->f_x=t_x;
	DBG_INFO("/Applications/Monkey/modules/mojo/graphics.monkey<57>");
	this->f_y=t_y;
	return this;
}
bb_graphics_Frame* bb_graphics_Frame::g_new2(){
	DBG_ENTER("Frame.new")
	bb_graphics_Frame *self=this;
	DBG_LOCAL(self,"Self")
	DBG_INFO("/Applications/Monkey/modules/mojo/graphics.monkey<51>");
	return this;
}
void bb_graphics_Frame::mark(){
	Object::mark();
}
String bb_graphics_Frame::debug(){
	String t="(Frame)\n";
	t+=dbg_decl("x",&f_x);
	t+=dbg_decl("y",&f_y);
	return t;
}
bb_graphics_Image* bb_graphics_LoadImage(String t_path,int t_frameCount,int t_flags){
	DBG_ENTER("LoadImage")
	DBG_LOCAL(t_path,"path")
	DBG_LOCAL(t_frameCount,"frameCount")
	DBG_LOCAL(t_flags,"flags")
	DBG_INFO("/Applications/Monkey/modules/mojo/graphics.monkey<277>");
	bb_graphics_Image* t_=((new bb_graphics_Image)->g_new())->m_Load(t_path,t_frameCount,t_flags);
	return t_;
}
bb_graphics_Image* bb_graphics_LoadImage2(String t_path,int t_frameWidth,int t_frameHeight,int t_frameCount,int t_flags){
	DBG_ENTER("LoadImage")
	DBG_LOCAL(t_path,"path")
	DBG_LOCAL(t_frameWidth,"frameWidth")
	DBG_LOCAL(t_frameHeight,"frameHeight")
	DBG_LOCAL(t_frameCount,"frameCount")
	DBG_LOCAL(t_flags,"flags")
	DBG_INFO("/Applications/Monkey/modules/mojo/graphics.monkey<281>");
	bb_graphics_Image* t_atlas=((new bb_graphics_Image)->g_new())->m_Load(t_path,1,0);
	DBG_LOCAL(t_atlas,"atlas")
	DBG_INFO("/Applications/Monkey/modules/mojo/graphics.monkey<282>");
	if((t_atlas)!=0){
		DBG_BLOCK();
		bb_graphics_Image* t_=t_atlas->m_GrabImage(0,0,t_frameWidth,t_frameHeight,t_frameCount,t_flags);
		return t_;
	}
	return 0;
}
bb_baseobject_BaseObject::bb_baseobject_BaseObject(){
	f__pos=0;
	f__size=0;
	f__center=0;
}
bb_baseobject_BaseObject* bb_baseobject_BaseObject::g_new(){
	DBG_ENTER("BaseObject.new")
	bb_baseobject_BaseObject *self=this;
	DBG_LOCAL(self,"Self")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/baseobject.monkey<12>");
	bb_partial_Partial::g_new();
	return this;
}
bb_vector2d_Vector2D* bb_baseobject_BaseObject::m_pos(){
	DBG_ENTER("BaseObject.pos")
	bb_baseobject_BaseObject *self=this;
	DBG_LOCAL(self,"Self")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/baseobject.monkey<34>");
	if(f__pos==0){
		DBG_BLOCK();
		Error(String(L"Position not set yet."));
	}
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/baseobject.monkey<35>");
	return f__pos;
}
void bb_baseobject_BaseObject::m_pos2(bb_vector2d_Vector2D* t_newPos){
	DBG_ENTER("BaseObject.pos")
	bb_baseobject_BaseObject *self=this;
	DBG_LOCAL(self,"Self")
	DBG_LOCAL(t_newPos,"newPos")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/baseobject.monkey<39>");
	gc_assign(f__pos,t_newPos);
}
bb_vector2d_Vector2D* bb_baseobject_BaseObject::m_size(){
	DBG_ENTER("BaseObject.size")
	bb_baseobject_BaseObject *self=this;
	DBG_LOCAL(self,"Self")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/baseobject.monkey<43>");
	if(f__size==0){
		DBG_BLOCK();
		Error(String(L"Size not set yet."));
	}
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/baseobject.monkey<44>");
	return f__size;
}
void bb_baseobject_BaseObject::m_size2(bb_vector2d_Vector2D* t_newSize){
	DBG_ENTER("BaseObject.size")
	bb_baseobject_BaseObject *self=this;
	DBG_LOCAL(self,"Self")
	DBG_LOCAL(t_newSize,"newSize")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/baseobject.monkey<48>");
	gc_assign(f__size,t_newSize);
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/baseobject.monkey<49>");
	gc_assign(f__center,t_newSize->m_Copy()->m_Div2(FLOAT(2.0)));
}
bb_vector2d_Vector2D* bb_baseobject_BaseObject::m_center(){
	DBG_ENTER("BaseObject.center")
	bb_baseobject_BaseObject *self=this;
	DBG_LOCAL(self,"Self")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/baseobject.monkey<53>");
	if(f__center==0){
		DBG_BLOCK();
		Error(String(L"No size set and center therefore unset."));
	}
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/baseobject.monkey<54>");
	return f__center;
}
void bb_baseobject_BaseObject::m_Center(bb_sizeable_Sizeable* t_entity){
	DBG_ENTER("BaseObject.Center")
	bb_baseobject_BaseObject *self=this;
	DBG_LOCAL(self,"Self")
	DBG_LOCAL(t_entity,"entity")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/baseobject.monkey<30>");
	m_pos2(t_entity->m_center()->m_Copy()->m_Sub(m_center()));
}
void bb_baseobject_BaseObject::m_CenterX(bb_sizeable_Sizeable* t_entity){
	DBG_ENTER("BaseObject.CenterX")
	bb_baseobject_BaseObject *self=this;
	DBG_LOCAL(self,"Self")
	DBG_LOCAL(t_entity,"entity")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/baseobject.monkey<22>");
	m_pos()->f_x=t_entity->m_center()->f_x-m_center()->f_x;
}
void bb_baseobject_BaseObject::mark(){
	bb_partial_Partial::mark();
	gc_mark_q(f__pos);
	gc_mark_q(f__size);
	gc_mark_q(f__center);
}
String bb_baseobject_BaseObject::debug(){
	String t="(BaseObject)\n";
	t=bb_partial_Partial::debug()+t;
	t+=dbg_decl("_pos",&f__pos);
	t+=dbg_decl("_center",&f__center);
	t+=dbg_decl("_size",&f__size);
	return t;
}
bb_sprite_Sprite::bb_sprite_Sprite(){
	f_image=0;
	f_frameCount=0;
	f_frameSpeed=0;
	f_rotation=FLOAT(.0);
	f_scale=(new bb_vector2d_Vector2D)->g_new(FLOAT(1.0),FLOAT(1.0));
	f_currentFrame=0;
	f_loopAnimation=false;
	f_frameTimer=0;
}
void bb_sprite_Sprite::m_InitVectors(int t_width,int t_height,bb_vector2d_Vector2D* t_pos){
	DBG_ENTER("Sprite.InitVectors")
	bb_sprite_Sprite *self=this;
	DBG_LOCAL(self,"Self")
	DBG_LOCAL(t_width,"width")
	DBG_LOCAL(t_height,"height")
	DBG_LOCAL(t_pos,"pos")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/sprite.monkey<85>");
	if(t_pos==0){
		DBG_BLOCK();
		DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/sprite.monkey<86>");
		this->m_pos2((new bb_vector2d_Vector2D)->g_new(FLOAT(0.0),FLOAT(0.0)));
	}else{
		DBG_BLOCK();
		DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/sprite.monkey<88>");
		this->m_pos2(t_pos);
	}
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/sprite.monkey<90>");
	m_size2((new bb_vector2d_Vector2D)->g_new(Float(t_width),Float(t_height)));
}
bb_sprite_Sprite* bb_sprite_Sprite::g_new(String t_imageName,bb_vector2d_Vector2D* t_pos){
	DBG_ENTER("Sprite.new")
	bb_sprite_Sprite *self=this;
	DBG_LOCAL(self,"Self")
	DBG_LOCAL(t_imageName,"imageName")
	DBG_LOCAL(t_pos,"pos")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/sprite.monkey<28>");
	bb_baseobject_BaseObject::g_new();
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/sprite.monkey<29>");
	gc_assign(f_image,bb_graphics_LoadImage(t_imageName,1,bb_graphics_Image::g_DefaultFlags));
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/sprite.monkey<30>");
	m_InitVectors(f_image->m_Width(),f_image->m_Height(),t_pos);
	return this;
}
bb_sprite_Sprite* bb_sprite_Sprite::g_new2(String t_imageName,int t_frameWidth,int t_frameHeight,int t_frameCount,int t_frameSpeed,bb_vector2d_Vector2D* t_pos){
	DBG_ENTER("Sprite.new")
	bb_sprite_Sprite *self=this;
	DBG_LOCAL(self,"Self")
	DBG_LOCAL(t_imageName,"imageName")
	DBG_LOCAL(t_frameWidth,"frameWidth")
	DBG_LOCAL(t_frameHeight,"frameHeight")
	DBG_LOCAL(t_frameCount,"frameCount")
	DBG_LOCAL(t_frameSpeed,"frameSpeed")
	DBG_LOCAL(t_pos,"pos")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/sprite.monkey<33>");
	bb_baseobject_BaseObject::g_new();
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/sprite.monkey<34>");
	this->f_frameCount=t_frameCount-1;
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/sprite.monkey<35>");
	this->f_frameSpeed=t_frameSpeed;
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/sprite.monkey<37>");
	gc_assign(f_image,bb_graphics_LoadImage2(t_imageName,t_frameWidth,t_frameHeight,t_frameCount,bb_graphics_Image::g_DefaultFlags));
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/sprite.monkey<38>");
	m_InitVectors(t_frameWidth,t_frameHeight,t_pos);
	return this;
}
bb_sprite_Sprite* bb_sprite_Sprite::g_new3(){
	DBG_ENTER("Sprite.new")
	bb_sprite_Sprite *self=this;
	DBG_LOCAL(self,"Self")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/sprite.monkey<12>");
	bb_baseobject_BaseObject::g_new();
	return this;
}
void bb_sprite_Sprite::m_OnRender(){
	DBG_ENTER("Sprite.OnRender")
	bb_sprite_Sprite *self=this;
	DBG_LOCAL(self,"Self")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/sprite.monkey<42>");
	bb_partial_Partial::m_OnRender();
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/sprite.monkey<43>");
	bb_graphics_DrawImage2(f_image,m_pos()->f_x,m_pos()->f_y,f_rotation,f_scale->f_x,f_scale->f_y,f_currentFrame);
}
bool bb_sprite_Sprite::m_animationIsDone(){
	DBG_ENTER("Sprite.animationIsDone")
	bb_sprite_Sprite *self=this;
	DBG_LOCAL(self,"Self")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/sprite.monkey<78>");
	if(f_loopAnimation){
		DBG_BLOCK();
		return false;
	}
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/sprite.monkey<79>");
	bool t_=f_currentFrame==f_frameCount;
	return t_;
}
void bb_sprite_Sprite::m_OnUpdate(Float t_delta,Float t_frameTime){
	DBG_ENTER("Sprite.OnUpdate")
	bb_sprite_Sprite *self=this;
	DBG_LOCAL(self,"Self")
	DBG_LOCAL(t_delta,"delta")
	DBG_LOCAL(t_frameTime,"frameTime")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/sprite.monkey<47>");
	bb_partial_Partial::m_OnUpdate(t_delta,t_frameTime);
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/sprite.monkey<49>");
	if(f_frameCount<=0){
		DBG_BLOCK();
		return;
	}
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/sprite.monkey<50>");
	if(m_animationIsDone()){
		DBG_BLOCK();
		return;
	}
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/sprite.monkey<52>");
	if(f_frameTimer<f_frameSpeed){
		DBG_BLOCK();
		DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/sprite.monkey<53>");
		f_frameTimer=int(Float(f_frameTimer)+t_frameTime);
		return;
	}
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/sprite.monkey<57>");
	if(f_currentFrame==f_frameCount){
		DBG_BLOCK();
		DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/sprite.monkey<58>");
		if(f_loopAnimation){
			DBG_BLOCK();
			DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/sprite.monkey<59>");
			f_currentFrame=1;
		}
	}else{
		DBG_BLOCK();
		DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/sprite.monkey<62>");
		f_currentFrame+=1;
	}
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/sprite.monkey<64>");
	f_frameTimer=0;
}
bool bb_sprite_Sprite::m_Collide(bb_vector2d_Vector2D* t_checkPos){
	DBG_ENTER("Sprite.Collide")
	bb_sprite_Sprite *self=this;
	DBG_LOCAL(self,"Self")
	DBG_LOCAL(t_checkPos,"checkPos")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/sprite.monkey<72>");
	if(t_checkPos->f_x<m_pos()->f_x || t_checkPos->f_x>m_pos()->f_x+m_size()->f_x){
		DBG_BLOCK();
		return false;
	}
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/sprite.monkey<73>");
	if(t_checkPos->f_y<m_pos()->f_y || t_checkPos->f_y>m_pos()->f_y+m_size()->f_y){
		DBG_BLOCK();
		return false;
	}
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/sprite.monkey<74>");
	return true;
}
void bb_sprite_Sprite::m_Restart(){
	DBG_ENTER("Sprite.Restart")
	bb_sprite_Sprite *self=this;
	DBG_LOCAL(self,"Self")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/sprite.monkey<68>");
	f_currentFrame=0;
}
void bb_sprite_Sprite::mark(){
	bb_baseobject_BaseObject::mark();
	gc_mark_q(f_image);
	gc_mark_q(f_scale);
}
String bb_sprite_Sprite::debug(){
	String t="(Sprite)\n";
	t=bb_baseobject_BaseObject::debug()+t;
	t+=dbg_decl("image",&f_image);
	t+=dbg_decl("frameTimer",&f_frameTimer);
	t+=dbg_decl("currentFrame",&f_currentFrame);
	t+=dbg_decl("frameCount",&f_frameCount);
	t+=dbg_decl("rotation",&f_rotation);
	t+=dbg_decl("scale",&f_scale);
	t+=dbg_decl("loopAnimation",&f_loopAnimation);
	t+=dbg_decl("frameSpeed",&f_frameSpeed);
	return t;
}
int bb_iap_InitInAppPurchases(String t_bundleID,Array<String > t_productList){
	DBG_ENTER("InitInAppPurchases")
	return 0;
}
int bb_iap_isProductPurchased(String t_product){
	DBG_ENTER("isProductPurchased")
	return 0;
}
bb_appirater_Appirater::bb_appirater_Appirater(){
}
void bb_appirater_Appirater::g_Launched(){
	DBG_ENTER("Appirater.Launched")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/appirater.monkey<14>");
	Print(String(L"Appirater: App launched"));
}
void bb_appirater_Appirater::mark(){
	Object::mark();
}
String bb_appirater_Appirater::debug(){
	String t="(Appirater)\n";
	return t;
}
bb_angelfont2_AngelFont::bb_angelfont2_AngelFont(){
	f_iniText=String();
	f_kernPairs=(new bb_map_StringMap3)->g_new();
	f_chars=Array<bb_char_Char* >(256);
	f_height=0;
	f_heightOffset=9999;
	f_image=0;
	f_name=String();
	f_xOffset=0;
	f_useKerning=true;
}
String bb_angelfont2_AngelFont::g_error;
bb_angelfont2_AngelFont* bb_angelfont2_AngelFont::g_current;
void bb_angelfont2_AngelFont::m_LoadFont(String t_url){
	DBG_ENTER("AngelFont.LoadFont")
	bb_angelfont2_AngelFont *self=this;
	DBG_LOCAL(self,"Self")
	DBG_LOCAL(t_url,"url")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/vendor/angelfont/angelfont.monkey<61>");
	g_error=String();
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/vendor/angelfont/angelfont.monkey<62>");
	gc_assign(g_current,this);
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/vendor/angelfont/angelfont.monkey<63>");
	f_iniText=bb_app_LoadString(t_url+String(L".txt"));
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/vendor/angelfont/angelfont.monkey<64>");
	Array<String > t_lines=f_iniText.Split(String((Char)(10),1));
	DBG_LOCAL(t_lines,"lines")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/vendor/angelfont/angelfont.monkey<65>");
	Array<String > t_=t_lines;
	int t_2=0;
	while(t_2<t_.Length()){
		DBG_BLOCK();
		String t_line=t_.At(t_2);
		t_2=t_2+1;
		DBG_LOCAL(t_line,"line")
		DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/vendor/angelfont/angelfont.monkey<67>");
		t_line=t_line.Trim();
		DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/vendor/angelfont/angelfont.monkey<69>");
		if(t_line.StartsWith(String(L"id,")) || t_line==String()){
			DBG_BLOCK();
			continue;
		}
		DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/vendor/angelfont/angelfont.monkey<70>");
		if(t_line.StartsWith(String(L"first,"))){
			DBG_BLOCK();
			DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/vendor/angelfont/angelfont.monkey<72>");
			continue;
		}
		DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/vendor/angelfont/angelfont.monkey<74>");
		Array<String > t_data=t_line.Split(String(L","));
		DBG_LOCAL(t_data,"data")
		DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/vendor/angelfont/angelfont.monkey<76>");
		for(int t_i=0;t_i<t_data.Length();t_i=t_i+1){
			DBG_BLOCK();
			DBG_LOCAL(t_i,"i")
			DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/vendor/angelfont/angelfont.monkey<77>");
			t_data.At(t_i)=t_data.At(t_i).Trim();
		}
		DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/vendor/angelfont/angelfont.monkey<80>");
		g_error=g_error+(String(t_data.Length())+String(L","));
		DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/vendor/angelfont/angelfont.monkey<81>");
		if(t_data.Length()>0){
			DBG_BLOCK();
			DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/vendor/angelfont/angelfont.monkey<82>");
			if(t_data.Length()==3){
				DBG_BLOCK();
				DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/vendor/angelfont/angelfont.monkey<84>");
				f_kernPairs->m_Insert(String((Char)((t_data.At(0)).ToInt()),1)+String(L"_")+String((Char)((t_data.At(1)).ToInt()),1),(new bb_kernpair_KernPair)->g_new((t_data.At(0)).ToInt(),(t_data.At(1)).ToInt(),(t_data.At(2)).ToInt()));
			}else{
				DBG_BLOCK();
				DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/vendor/angelfont/angelfont.monkey<86>");
				if(t_data.Length()>=8){
					DBG_BLOCK();
					DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/vendor/angelfont/angelfont.monkey<87>");
					gc_assign(f_chars.At((t_data.At(0)).ToInt()),(new bb_char_Char)->g_new((t_data.At(1)).ToInt(),(t_data.At(2)).ToInt(),(t_data.At(3)).ToInt(),(t_data.At(4)).ToInt(),(t_data.At(5)).ToInt(),(t_data.At(6)).ToInt(),(t_data.At(7)).ToInt()));
					DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/vendor/angelfont/angelfont.monkey<88>");
					bb_char_Char* t_ch=f_chars.At((t_data.At(0)).ToInt());
					DBG_LOCAL(t_ch,"ch")
					DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/vendor/angelfont/angelfont.monkey<89>");
					if(t_ch->f_height>this->f_height){
						DBG_BLOCK();
						this->f_height=t_ch->f_height;
					}
					DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/vendor/angelfont/angelfont.monkey<90>");
					if(t_ch->f_yOffset<this->f_heightOffset){
						DBG_BLOCK();
						this->f_heightOffset=t_ch->f_yOffset;
					}
				}
			}
		}
	}
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/vendor/angelfont/angelfont.monkey<97>");
	gc_assign(f_image,bb_graphics_LoadImage(t_url+String(L".png"),1,bb_graphics_Image::g_DefaultFlags));
}
bb_map_StringMap4* bb_angelfont2_AngelFont::g__list;
bb_angelfont2_AngelFont* bb_angelfont2_AngelFont::g_new(String t_url){
	DBG_ENTER("AngelFont.new")
	bb_angelfont2_AngelFont *self=this;
	DBG_LOCAL(self,"Self")
	DBG_LOCAL(t_url,"url")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/vendor/angelfont/angelfont.monkey<48>");
	if(t_url!=String()){
		DBG_BLOCK();
		DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/vendor/angelfont/angelfont.monkey<49>");
		this->m_LoadFont(t_url);
		DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/vendor/angelfont/angelfont.monkey<50>");
		this->f_name=t_url;
		DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/vendor/angelfont/angelfont.monkey<51>");
		g__list->m_Insert2(t_url,this);
	}
	return this;
}
void bb_angelfont2_AngelFont::m_DrawText(String t_txt,int t_x,int t_y){
	DBG_ENTER("AngelFont.DrawText")
	bb_angelfont2_AngelFont *self=this;
	DBG_LOCAL(self,"Self")
	DBG_LOCAL(t_txt,"txt")
	DBG_LOCAL(t_x,"x")
	DBG_LOCAL(t_y,"y")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/vendor/angelfont/angelfont.monkey<134>");
	String t_prevChar=String();
	DBG_LOCAL(t_prevChar,"prevChar")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/vendor/angelfont/angelfont.monkey<135>");
	f_xOffset=0;
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/vendor/angelfont/angelfont.monkey<137>");
	for(int t_i=0;t_i<t_txt.Length();t_i=t_i+1){
		DBG_BLOCK();
		DBG_LOCAL(t_i,"i")
		DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/vendor/angelfont/angelfont.monkey<138>");
		int t_asc=(int)t_txt[t_i];
		DBG_LOCAL(t_asc,"asc")
		DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/vendor/angelfont/angelfont.monkey<139>");
		bb_char_Char* t_ac=f_chars.At(t_asc);
		DBG_LOCAL(t_ac,"ac")
		DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/vendor/angelfont/angelfont.monkey<140>");
		String t_thisChar=String((Char)(t_asc),1);
		DBG_LOCAL(t_thisChar,"thisChar")
		DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/vendor/angelfont/angelfont.monkey<141>");
		if(t_ac!=0){
			DBG_BLOCK();
			DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/vendor/angelfont/angelfont.monkey<142>");
			if(f_useKerning){
				DBG_BLOCK();
				DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/vendor/angelfont/angelfont.monkey<143>");
				String t_key=t_prevChar+String(L"_")+t_thisChar;
				DBG_LOCAL(t_key,"key")
				DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/vendor/angelfont/angelfont.monkey<144>");
				if(f_kernPairs->m_Contains(t_key)){
					DBG_BLOCK();
					DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/vendor/angelfont/angelfont.monkey<145>");
					f_xOffset+=f_kernPairs->m_Get(t_key)->f_amount;
				}
			}
			DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/vendor/angelfont/angelfont.monkey<148>");
			t_ac->m_Draw(f_image,t_x+f_xOffset,t_y);
			DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/vendor/angelfont/angelfont.monkey<149>");
			f_xOffset+=t_ac->f_xAdvance;
			DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/vendor/angelfont/angelfont.monkey<150>");
			t_prevChar=t_thisChar;
		}
	}
}
int bb_angelfont2_AngelFont::m_TextWidth(String t_txt){
	DBG_ENTER("AngelFont.TextWidth")
	bb_angelfont2_AngelFont *self=this;
	DBG_LOCAL(self,"Self")
	DBG_LOCAL(t_txt,"txt")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/vendor/angelfont/angelfont.monkey<250>");
	String t_prevChar=String();
	DBG_LOCAL(t_prevChar,"prevChar")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/vendor/angelfont/angelfont.monkey<251>");
	int t_width=0;
	DBG_LOCAL(t_width,"width")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/vendor/angelfont/angelfont.monkey<252>");
	for(int t_i=0;t_i<t_txt.Length();t_i=t_i+1){
		DBG_BLOCK();
		DBG_LOCAL(t_i,"i")
		DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/vendor/angelfont/angelfont.monkey<253>");
		int t_asc=(int)t_txt[t_i];
		DBG_LOCAL(t_asc,"asc")
		DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/vendor/angelfont/angelfont.monkey<254>");
		bb_char_Char* t_ac=f_chars.At(t_asc);
		DBG_LOCAL(t_ac,"ac")
		DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/vendor/angelfont/angelfont.monkey<255>");
		String t_thisChar=String((Char)(t_asc),1);
		DBG_LOCAL(t_thisChar,"thisChar")
		DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/vendor/angelfont/angelfont.monkey<256>");
		if(t_ac!=0){
			DBG_BLOCK();
			DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/vendor/angelfont/angelfont.monkey<257>");
			if(f_useKerning){
				DBG_BLOCK();
				DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/vendor/angelfont/angelfont.monkey<258>");
				String t_key=t_prevChar+String(L"_")+t_thisChar;
				DBG_LOCAL(t_key,"key")
				DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/vendor/angelfont/angelfont.monkey<259>");
				if(f_kernPairs->m_Contains(t_key)){
					DBG_BLOCK();
					DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/vendor/angelfont/angelfont.monkey<261>");
					t_width+=f_kernPairs->m_Get(t_key)->f_amount;
				}
			}
			DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/vendor/angelfont/angelfont.monkey<265>");
			t_width+=t_ac->f_xAdvance;
			DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/vendor/angelfont/angelfont.monkey<266>");
			t_prevChar=t_thisChar;
		}
	}
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/vendor/angelfont/angelfont.monkey<269>");
	return t_width;
}
void bb_angelfont2_AngelFont::m_DrawText2(String t_txt,int t_x,int t_y,int t_align){
	DBG_ENTER("AngelFont.DrawText")
	bb_angelfont2_AngelFont *self=this;
	DBG_LOCAL(self,"Self")
	DBG_LOCAL(t_txt,"txt")
	DBG_LOCAL(t_x,"x")
	DBG_LOCAL(t_y,"y")
	DBG_LOCAL(t_align,"align")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/vendor/angelfont/angelfont.monkey<156>");
	f_xOffset=0;
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/vendor/angelfont/angelfont.monkey<157>");
	int t_1=t_align;
	DBG_LOCAL(t_1,"1")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/vendor/angelfont/angelfont.monkey<158>");
	if(t_1==1){
		DBG_BLOCK();
		DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/vendor/angelfont/angelfont.monkey<159>");
		m_DrawText(t_txt,t_x-m_TextWidth(t_txt)/2,t_y);
	}else{
		DBG_BLOCK();
		DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/vendor/angelfont/angelfont.monkey<160>");
		if(t_1==2){
			DBG_BLOCK();
			DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/vendor/angelfont/angelfont.monkey<161>");
			m_DrawText(t_txt,t_x-m_TextWidth(t_txt),t_y);
		}else{
			DBG_BLOCK();
			DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/vendor/angelfont/angelfont.monkey<162>");
			if(t_1==0){
				DBG_BLOCK();
				DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/vendor/angelfont/angelfont.monkey<164>");
				m_DrawText(t_txt,t_x,t_y);
			}
		}
	}
}
void bb_angelfont2_AngelFont::mark(){
	Object::mark();
	gc_mark_q(f_kernPairs);
	gc_mark_q(f_chars);
	gc_mark_q(f_image);
}
String bb_angelfont2_AngelFont::debug(){
	String t="(AngelFont)\n";
	t+=dbg_decl("_list",&bb_angelfont2_AngelFont::g__list);
	t+=dbg_decl("image",&f_image);
	t+=dbg_decl("chars",&f_chars);
	t+=dbg_decl("kernPairs",&f_kernPairs);
	t+=dbg_decl("iniText",&f_iniText);
	t+=dbg_decl("xOffset",&f_xOffset);
	t+=dbg_decl("current",&bb_angelfont2_AngelFont::g_current);
	t+=dbg_decl("error",&bb_angelfont2_AngelFont::g_error);
	t+=dbg_decl("name",&f_name);
	t+=dbg_decl("useKerning",&f_useKerning);
	t+=dbg_decl("height",&f_height);
	t+=dbg_decl("heightOffset",&f_heightOffset);
	return t;
}
String bb_app_LoadString(String t_path){
	DBG_ENTER("LoadString")
	DBG_LOCAL(t_path,"path")
	DBG_INFO("/Applications/Monkey/modules/mojo/app.monkey<137>");
	String t_=bb_app_device->LoadString(t_path);
	return t_;
}
bb_kernpair_KernPair::bb_kernpair_KernPair(){
	f_first=String();
	f_second=String();
	f_amount=0;
}
bb_kernpair_KernPair* bb_kernpair_KernPair::g_new(int t_first,int t_second,int t_amount){
	DBG_ENTER("KernPair.new")
	bb_kernpair_KernPair *self=this;
	DBG_LOCAL(self,"Self")
	DBG_LOCAL(t_first,"first")
	DBG_LOCAL(t_second,"second")
	DBG_LOCAL(t_amount,"amount")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/vendor/angelfont/kernpair.monkey<9>");
	this->f_first=String(t_first);
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/vendor/angelfont/kernpair.monkey<10>");
	this->f_second=String(t_second);
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/vendor/angelfont/kernpair.monkey<11>");
	this->f_amount=t_amount;
	return this;
}
bb_kernpair_KernPair* bb_kernpair_KernPair::g_new2(){
	DBG_ENTER("KernPair.new")
	bb_kernpair_KernPair *self=this;
	DBG_LOCAL(self,"Self")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/vendor/angelfont/kernpair.monkey<2>");
	return this;
}
void bb_kernpair_KernPair::mark(){
	Object::mark();
}
String bb_kernpair_KernPair::debug(){
	String t="(KernPair)\n";
	t+=dbg_decl("first",&f_first);
	t+=dbg_decl("second",&f_second);
	t+=dbg_decl("amount",&f_amount);
	return t;
}
bb_map_Map3::bb_map_Map3(){
	f_root=0;
}
bb_map_Map3* bb_map_Map3::g_new(){
	DBG_ENTER("Map.new")
	bb_map_Map3 *self=this;
	DBG_LOCAL(self,"Self")
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<7>");
	return this;
}
int bb_map_Map3::m_RotateLeft3(bb_map_Node3* t_node){
	DBG_ENTER("Map.RotateLeft")
	bb_map_Map3 *self=this;
	DBG_LOCAL(self,"Self")
	DBG_LOCAL(t_node,"node")
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<251>");
	bb_map_Node3* t_child=t_node->f_right;
	DBG_LOCAL(t_child,"child")
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<252>");
	gc_assign(t_node->f_right,t_child->f_left);
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<253>");
	if((t_child->f_left)!=0){
		DBG_BLOCK();
		DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<254>");
		gc_assign(t_child->f_left->f_parent,t_node);
	}
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<256>");
	gc_assign(t_child->f_parent,t_node->f_parent);
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<257>");
	if((t_node->f_parent)!=0){
		DBG_BLOCK();
		DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<258>");
		if(t_node==t_node->f_parent->f_left){
			DBG_BLOCK();
			DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<259>");
			gc_assign(t_node->f_parent->f_left,t_child);
		}else{
			DBG_BLOCK();
			DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<261>");
			gc_assign(t_node->f_parent->f_right,t_child);
		}
	}else{
		DBG_BLOCK();
		DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<264>");
		gc_assign(f_root,t_child);
	}
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<266>");
	gc_assign(t_child->f_left,t_node);
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<267>");
	gc_assign(t_node->f_parent,t_child);
	return 0;
}
int bb_map_Map3::m_RotateRight3(bb_map_Node3* t_node){
	DBG_ENTER("Map.RotateRight")
	bb_map_Map3 *self=this;
	DBG_LOCAL(self,"Self")
	DBG_LOCAL(t_node,"node")
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<271>");
	bb_map_Node3* t_child=t_node->f_left;
	DBG_LOCAL(t_child,"child")
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<272>");
	gc_assign(t_node->f_left,t_child->f_right);
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<273>");
	if((t_child->f_right)!=0){
		DBG_BLOCK();
		DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<274>");
		gc_assign(t_child->f_right->f_parent,t_node);
	}
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<276>");
	gc_assign(t_child->f_parent,t_node->f_parent);
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<277>");
	if((t_node->f_parent)!=0){
		DBG_BLOCK();
		DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<278>");
		if(t_node==t_node->f_parent->f_right){
			DBG_BLOCK();
			DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<279>");
			gc_assign(t_node->f_parent->f_right,t_child);
		}else{
			DBG_BLOCK();
			DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<281>");
			gc_assign(t_node->f_parent->f_left,t_child);
		}
	}else{
		DBG_BLOCK();
		DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<284>");
		gc_assign(f_root,t_child);
	}
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<286>");
	gc_assign(t_child->f_right,t_node);
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<287>");
	gc_assign(t_node->f_parent,t_child);
	return 0;
}
int bb_map_Map3::m_InsertFixup3(bb_map_Node3* t_node){
	DBG_ENTER("Map.InsertFixup")
	bb_map_Map3 *self=this;
	DBG_LOCAL(self,"Self")
	DBG_LOCAL(t_node,"node")
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<212>");
	while(((t_node->f_parent)!=0) && t_node->f_parent->f_color==-1 && ((t_node->f_parent->f_parent)!=0)){
		DBG_BLOCK();
		DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<213>");
		if(t_node->f_parent==t_node->f_parent->f_parent->f_left){
			DBG_BLOCK();
			DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<214>");
			bb_map_Node3* t_uncle=t_node->f_parent->f_parent->f_right;
			DBG_LOCAL(t_uncle,"uncle")
			DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<215>");
			if(((t_uncle)!=0) && t_uncle->f_color==-1){
				DBG_BLOCK();
				DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<216>");
				t_node->f_parent->f_color=1;
				DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<217>");
				t_uncle->f_color=1;
				DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<218>");
				t_uncle->f_parent->f_color=-1;
				DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<219>");
				t_node=t_uncle->f_parent;
			}else{
				DBG_BLOCK();
				DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<221>");
				if(t_node==t_node->f_parent->f_right){
					DBG_BLOCK();
					DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<222>");
					t_node=t_node->f_parent;
					DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<223>");
					m_RotateLeft3(t_node);
				}
				DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<225>");
				t_node->f_parent->f_color=1;
				DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<226>");
				t_node->f_parent->f_parent->f_color=-1;
				DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<227>");
				m_RotateRight3(t_node->f_parent->f_parent);
			}
		}else{
			DBG_BLOCK();
			DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<230>");
			bb_map_Node3* t_uncle2=t_node->f_parent->f_parent->f_left;
			DBG_LOCAL(t_uncle2,"uncle")
			DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<231>");
			if(((t_uncle2)!=0) && t_uncle2->f_color==-1){
				DBG_BLOCK();
				DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<232>");
				t_node->f_parent->f_color=1;
				DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<233>");
				t_uncle2->f_color=1;
				DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<234>");
				t_uncle2->f_parent->f_color=-1;
				DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<235>");
				t_node=t_uncle2->f_parent;
			}else{
				DBG_BLOCK();
				DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<237>");
				if(t_node==t_node->f_parent->f_left){
					DBG_BLOCK();
					DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<238>");
					t_node=t_node->f_parent;
					DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<239>");
					m_RotateRight3(t_node);
				}
				DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<241>");
				t_node->f_parent->f_color=1;
				DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<242>");
				t_node->f_parent->f_parent->f_color=-1;
				DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<243>");
				m_RotateLeft3(t_node->f_parent->f_parent);
			}
		}
	}
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<247>");
	f_root->f_color=1;
	return 0;
}
bool bb_map_Map3::m_Set3(String t_key,bb_kernpair_KernPair* t_value){
	DBG_ENTER("Map.Set")
	bb_map_Map3 *self=this;
	DBG_LOCAL(self,"Self")
	DBG_LOCAL(t_key,"key")
	DBG_LOCAL(t_value,"value")
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<29>");
	bb_map_Node3* t_node=f_root;
	DBG_LOCAL(t_node,"node")
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<30>");
	bb_map_Node3* t_parent=0;
	int t_cmp=0;
	DBG_LOCAL(t_parent,"parent")
	DBG_LOCAL(t_cmp,"cmp")
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<32>");
	while((t_node)!=0){
		DBG_BLOCK();
		DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<33>");
		t_parent=t_node;
		DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<34>");
		t_cmp=m_Compare(t_key,t_node->f_key);
		DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<35>");
		if(t_cmp>0){
			DBG_BLOCK();
			DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<36>");
			t_node=t_node->f_right;
		}else{
			DBG_BLOCK();
			DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<37>");
			if(t_cmp<0){
				DBG_BLOCK();
				DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<38>");
				t_node=t_node->f_left;
			}else{
				DBG_BLOCK();
				DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<40>");
				gc_assign(t_node->f_value,t_value);
				DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<41>");
				return false;
			}
		}
	}
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<45>");
	t_node=(new bb_map_Node3)->g_new(t_key,t_value,-1,t_parent);
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<47>");
	if((t_parent)!=0){
		DBG_BLOCK();
		DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<48>");
		if(t_cmp>0){
			DBG_BLOCK();
			DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<49>");
			gc_assign(t_parent->f_right,t_node);
		}else{
			DBG_BLOCK();
			DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<51>");
			gc_assign(t_parent->f_left,t_node);
		}
		DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<53>");
		m_InsertFixup3(t_node);
	}else{
		DBG_BLOCK();
		DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<55>");
		gc_assign(f_root,t_node);
	}
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<57>");
	return true;
}
bool bb_map_Map3::m_Insert(String t_key,bb_kernpair_KernPair* t_value){
	DBG_ENTER("Map.Insert")
	bb_map_Map3 *self=this;
	DBG_LOCAL(self,"Self")
	DBG_LOCAL(t_key,"key")
	DBG_LOCAL(t_value,"value")
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<126>");
	bool t_=m_Set3(t_key,t_value);
	return t_;
}
bb_map_Node3* bb_map_Map3::m_FindNode(String t_key){
	DBG_ENTER("Map.FindNode")
	bb_map_Map3 *self=this;
	DBG_LOCAL(self,"Self")
	DBG_LOCAL(t_key,"key")
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<157>");
	bb_map_Node3* t_node=f_root;
	DBG_LOCAL(t_node,"node")
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<159>");
	while((t_node)!=0){
		DBG_BLOCK();
		DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<160>");
		int t_cmp=m_Compare(t_key,t_node->f_key);
		DBG_LOCAL(t_cmp,"cmp")
		DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<161>");
		if(t_cmp>0){
			DBG_BLOCK();
			DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<162>");
			t_node=t_node->f_right;
		}else{
			DBG_BLOCK();
			DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<163>");
			if(t_cmp<0){
				DBG_BLOCK();
				DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<164>");
				t_node=t_node->f_left;
			}else{
				DBG_BLOCK();
				DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<166>");
				return t_node;
			}
		}
	}
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<169>");
	return t_node;
}
bool bb_map_Map3::m_Contains(String t_key){
	DBG_ENTER("Map.Contains")
	bb_map_Map3 *self=this;
	DBG_LOCAL(self,"Self")
	DBG_LOCAL(t_key,"key")
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<25>");
	bool t_=m_FindNode(t_key)!=0;
	return t_;
}
bb_kernpair_KernPair* bb_map_Map3::m_Get(String t_key){
	DBG_ENTER("Map.Get")
	bb_map_Map3 *self=this;
	DBG_LOCAL(self,"Self")
	DBG_LOCAL(t_key,"key")
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<101>");
	bb_map_Node3* t_node=m_FindNode(t_key);
	DBG_LOCAL(t_node,"node")
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<102>");
	if((t_node)!=0){
		DBG_BLOCK();
		return t_node->f_value;
	}
	return 0;
}
void bb_map_Map3::mark(){
	Object::mark();
	gc_mark_q(f_root);
}
String bb_map_Map3::debug(){
	String t="(Map)\n";
	t+=dbg_decl("root",&f_root);
	return t;
}
bb_map_StringMap3::bb_map_StringMap3(){
}
bb_map_StringMap3* bb_map_StringMap3::g_new(){
	DBG_ENTER("StringMap.new")
	bb_map_StringMap3 *self=this;
	DBG_LOCAL(self,"Self")
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<551>");
	bb_map_Map3::g_new();
	return this;
}
int bb_map_StringMap3::m_Compare(String t_lhs,String t_rhs){
	DBG_ENTER("StringMap.Compare")
	bb_map_StringMap3 *self=this;
	DBG_LOCAL(self,"Self")
	DBG_LOCAL(t_lhs,"lhs")
	DBG_LOCAL(t_rhs,"rhs")
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<554>");
	int t_=t_lhs.Compare(t_rhs);
	return t_;
}
void bb_map_StringMap3::mark(){
	bb_map_Map3::mark();
}
String bb_map_StringMap3::debug(){
	String t="(StringMap)\n";
	t=bb_map_Map3::debug()+t;
	return t;
}
bb_map_Node3::bb_map_Node3(){
	f_key=String();
	f_right=0;
	f_left=0;
	f_value=0;
	f_color=0;
	f_parent=0;
}
bb_map_Node3* bb_map_Node3::g_new(String t_key,bb_kernpair_KernPair* t_value,int t_color,bb_map_Node3* t_parent){
	DBG_ENTER("Node.new")
	bb_map_Node3 *self=this;
	DBG_LOCAL(self,"Self")
	DBG_LOCAL(t_key,"key")
	DBG_LOCAL(t_value,"value")
	DBG_LOCAL(t_color,"color")
	DBG_LOCAL(t_parent,"parent")
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<364>");
	this->f_key=t_key;
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<365>");
	gc_assign(this->f_value,t_value);
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<366>");
	this->f_color=t_color;
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<367>");
	gc_assign(this->f_parent,t_parent);
	return this;
}
bb_map_Node3* bb_map_Node3::g_new2(){
	DBG_ENTER("Node.new")
	bb_map_Node3 *self=this;
	DBG_LOCAL(self,"Self")
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<361>");
	return this;
}
void bb_map_Node3::mark(){
	Object::mark();
	gc_mark_q(f_right);
	gc_mark_q(f_left);
	gc_mark_q(f_value);
	gc_mark_q(f_parent);
}
String bb_map_Node3::debug(){
	String t="(Node)\n";
	t+=dbg_decl("key",&f_key);
	t+=dbg_decl("value",&f_value);
	t+=dbg_decl("color",&f_color);
	t+=dbg_decl("parent",&f_parent);
	t+=dbg_decl("left",&f_left);
	t+=dbg_decl("right",&f_right);
	return t;
}
bb_char_Char::bb_char_Char(){
	f_x=0;
	f_y=0;
	f_width=0;
	f_height=0;
	f_xOffset=0;
	f_yOffset=0;
	f_xAdvance=0;
}
bb_char_Char* bb_char_Char::g_new(int t_x,int t_y,int t_w,int t_h,int t_xoff,int t_yoff,int t_xadv){
	DBG_ENTER("Char.new")
	bb_char_Char *self=this;
	DBG_LOCAL(self,"Self")
	DBG_LOCAL(t_x,"x")
	DBG_LOCAL(t_y,"y")
	DBG_LOCAL(t_w,"w")
	DBG_LOCAL(t_h,"h")
	DBG_LOCAL(t_xoff,"xoff")
	DBG_LOCAL(t_yoff,"yoff")
	DBG_LOCAL(t_xadv,"xadv")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/vendor/angelfont/char.monkey<17>");
	this->f_x=t_x;
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/vendor/angelfont/char.monkey<18>");
	this->f_y=t_y;
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/vendor/angelfont/char.monkey<19>");
	this->f_width=t_w;
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/vendor/angelfont/char.monkey<20>");
	this->f_height=t_h;
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/vendor/angelfont/char.monkey<22>");
	this->f_xOffset=t_xoff;
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/vendor/angelfont/char.monkey<23>");
	this->f_yOffset=t_yoff;
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/vendor/angelfont/char.monkey<24>");
	this->f_xAdvance=t_xadv;
	return this;
}
bb_char_Char* bb_char_Char::g_new2(){
	DBG_ENTER("Char.new")
	bb_char_Char *self=this;
	DBG_LOCAL(self,"Self")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/vendor/angelfont/char.monkey<3>");
	return this;
}
int bb_char_Char::m_Draw(bb_graphics_Image* t_fontImage,int t_linex,int t_liney){
	DBG_ENTER("Char.Draw")
	bb_char_Char *self=this;
	DBG_LOCAL(self,"Self")
	DBG_LOCAL(t_fontImage,"fontImage")
	DBG_LOCAL(t_linex,"linex")
	DBG_LOCAL(t_liney,"liney")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/vendor/angelfont/char.monkey<28>");
	bb_graphics_DrawImageRect(t_fontImage,Float(t_linex+f_xOffset),Float(t_liney+f_yOffset),f_x,f_y,f_width,f_height,0);
	return 0;
}
void bb_char_Char::mark(){
	Object::mark();
}
String bb_char_Char::debug(){
	String t="(Char)\n";
	t+=dbg_decl("x",&f_x);
	t+=dbg_decl("y",&f_y);
	t+=dbg_decl("width",&f_width);
	t+=dbg_decl("height",&f_height);
	t+=dbg_decl("xOffset",&f_xOffset);
	t+=dbg_decl("yOffset",&f_yOffset);
	t+=dbg_decl("xAdvance",&f_xAdvance);
	return t;
}
bb_map_Map4::bb_map_Map4(){
	f_root=0;
}
bb_map_Map4* bb_map_Map4::g_new(){
	DBG_ENTER("Map.new")
	bb_map_Map4 *self=this;
	DBG_LOCAL(self,"Self")
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<7>");
	return this;
}
int bb_map_Map4::m_RotateLeft4(bb_map_Node4* t_node){
	DBG_ENTER("Map.RotateLeft")
	bb_map_Map4 *self=this;
	DBG_LOCAL(self,"Self")
	DBG_LOCAL(t_node,"node")
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<251>");
	bb_map_Node4* t_child=t_node->f_right;
	DBG_LOCAL(t_child,"child")
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<252>");
	gc_assign(t_node->f_right,t_child->f_left);
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<253>");
	if((t_child->f_left)!=0){
		DBG_BLOCK();
		DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<254>");
		gc_assign(t_child->f_left->f_parent,t_node);
	}
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<256>");
	gc_assign(t_child->f_parent,t_node->f_parent);
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<257>");
	if((t_node->f_parent)!=0){
		DBG_BLOCK();
		DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<258>");
		if(t_node==t_node->f_parent->f_left){
			DBG_BLOCK();
			DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<259>");
			gc_assign(t_node->f_parent->f_left,t_child);
		}else{
			DBG_BLOCK();
			DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<261>");
			gc_assign(t_node->f_parent->f_right,t_child);
		}
	}else{
		DBG_BLOCK();
		DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<264>");
		gc_assign(f_root,t_child);
	}
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<266>");
	gc_assign(t_child->f_left,t_node);
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<267>");
	gc_assign(t_node->f_parent,t_child);
	return 0;
}
int bb_map_Map4::m_RotateRight4(bb_map_Node4* t_node){
	DBG_ENTER("Map.RotateRight")
	bb_map_Map4 *self=this;
	DBG_LOCAL(self,"Self")
	DBG_LOCAL(t_node,"node")
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<271>");
	bb_map_Node4* t_child=t_node->f_left;
	DBG_LOCAL(t_child,"child")
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<272>");
	gc_assign(t_node->f_left,t_child->f_right);
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<273>");
	if((t_child->f_right)!=0){
		DBG_BLOCK();
		DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<274>");
		gc_assign(t_child->f_right->f_parent,t_node);
	}
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<276>");
	gc_assign(t_child->f_parent,t_node->f_parent);
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<277>");
	if((t_node->f_parent)!=0){
		DBG_BLOCK();
		DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<278>");
		if(t_node==t_node->f_parent->f_right){
			DBG_BLOCK();
			DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<279>");
			gc_assign(t_node->f_parent->f_right,t_child);
		}else{
			DBG_BLOCK();
			DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<281>");
			gc_assign(t_node->f_parent->f_left,t_child);
		}
	}else{
		DBG_BLOCK();
		DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<284>");
		gc_assign(f_root,t_child);
	}
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<286>");
	gc_assign(t_child->f_right,t_node);
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<287>");
	gc_assign(t_node->f_parent,t_child);
	return 0;
}
int bb_map_Map4::m_InsertFixup4(bb_map_Node4* t_node){
	DBG_ENTER("Map.InsertFixup")
	bb_map_Map4 *self=this;
	DBG_LOCAL(self,"Self")
	DBG_LOCAL(t_node,"node")
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<212>");
	while(((t_node->f_parent)!=0) && t_node->f_parent->f_color==-1 && ((t_node->f_parent->f_parent)!=0)){
		DBG_BLOCK();
		DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<213>");
		if(t_node->f_parent==t_node->f_parent->f_parent->f_left){
			DBG_BLOCK();
			DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<214>");
			bb_map_Node4* t_uncle=t_node->f_parent->f_parent->f_right;
			DBG_LOCAL(t_uncle,"uncle")
			DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<215>");
			if(((t_uncle)!=0) && t_uncle->f_color==-1){
				DBG_BLOCK();
				DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<216>");
				t_node->f_parent->f_color=1;
				DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<217>");
				t_uncle->f_color=1;
				DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<218>");
				t_uncle->f_parent->f_color=-1;
				DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<219>");
				t_node=t_uncle->f_parent;
			}else{
				DBG_BLOCK();
				DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<221>");
				if(t_node==t_node->f_parent->f_right){
					DBG_BLOCK();
					DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<222>");
					t_node=t_node->f_parent;
					DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<223>");
					m_RotateLeft4(t_node);
				}
				DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<225>");
				t_node->f_parent->f_color=1;
				DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<226>");
				t_node->f_parent->f_parent->f_color=-1;
				DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<227>");
				m_RotateRight4(t_node->f_parent->f_parent);
			}
		}else{
			DBG_BLOCK();
			DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<230>");
			bb_map_Node4* t_uncle2=t_node->f_parent->f_parent->f_left;
			DBG_LOCAL(t_uncle2,"uncle")
			DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<231>");
			if(((t_uncle2)!=0) && t_uncle2->f_color==-1){
				DBG_BLOCK();
				DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<232>");
				t_node->f_parent->f_color=1;
				DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<233>");
				t_uncle2->f_color=1;
				DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<234>");
				t_uncle2->f_parent->f_color=-1;
				DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<235>");
				t_node=t_uncle2->f_parent;
			}else{
				DBG_BLOCK();
				DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<237>");
				if(t_node==t_node->f_parent->f_left){
					DBG_BLOCK();
					DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<238>");
					t_node=t_node->f_parent;
					DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<239>");
					m_RotateRight4(t_node);
				}
				DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<241>");
				t_node->f_parent->f_color=1;
				DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<242>");
				t_node->f_parent->f_parent->f_color=-1;
				DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<243>");
				m_RotateLeft4(t_node->f_parent->f_parent);
			}
		}
	}
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<247>");
	f_root->f_color=1;
	return 0;
}
bool bb_map_Map4::m_Set4(String t_key,bb_angelfont2_AngelFont* t_value){
	DBG_ENTER("Map.Set")
	bb_map_Map4 *self=this;
	DBG_LOCAL(self,"Self")
	DBG_LOCAL(t_key,"key")
	DBG_LOCAL(t_value,"value")
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<29>");
	bb_map_Node4* t_node=f_root;
	DBG_LOCAL(t_node,"node")
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<30>");
	bb_map_Node4* t_parent=0;
	int t_cmp=0;
	DBG_LOCAL(t_parent,"parent")
	DBG_LOCAL(t_cmp,"cmp")
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<32>");
	while((t_node)!=0){
		DBG_BLOCK();
		DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<33>");
		t_parent=t_node;
		DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<34>");
		t_cmp=m_Compare(t_key,t_node->f_key);
		DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<35>");
		if(t_cmp>0){
			DBG_BLOCK();
			DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<36>");
			t_node=t_node->f_right;
		}else{
			DBG_BLOCK();
			DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<37>");
			if(t_cmp<0){
				DBG_BLOCK();
				DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<38>");
				t_node=t_node->f_left;
			}else{
				DBG_BLOCK();
				DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<40>");
				gc_assign(t_node->f_value,t_value);
				DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<41>");
				return false;
			}
		}
	}
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<45>");
	t_node=(new bb_map_Node4)->g_new(t_key,t_value,-1,t_parent);
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<47>");
	if((t_parent)!=0){
		DBG_BLOCK();
		DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<48>");
		if(t_cmp>0){
			DBG_BLOCK();
			DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<49>");
			gc_assign(t_parent->f_right,t_node);
		}else{
			DBG_BLOCK();
			DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<51>");
			gc_assign(t_parent->f_left,t_node);
		}
		DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<53>");
		m_InsertFixup4(t_node);
	}else{
		DBG_BLOCK();
		DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<55>");
		gc_assign(f_root,t_node);
	}
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<57>");
	return true;
}
bool bb_map_Map4::m_Insert2(String t_key,bb_angelfont2_AngelFont* t_value){
	DBG_ENTER("Map.Insert")
	bb_map_Map4 *self=this;
	DBG_LOCAL(self,"Self")
	DBG_LOCAL(t_key,"key")
	DBG_LOCAL(t_value,"value")
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<126>");
	bool t_=m_Set4(t_key,t_value);
	return t_;
}
void bb_map_Map4::mark(){
	Object::mark();
	gc_mark_q(f_root);
}
String bb_map_Map4::debug(){
	String t="(Map)\n";
	t+=dbg_decl("root",&f_root);
	return t;
}
bb_map_StringMap4::bb_map_StringMap4(){
}
bb_map_StringMap4* bb_map_StringMap4::g_new(){
	DBG_ENTER("StringMap.new")
	bb_map_StringMap4 *self=this;
	DBG_LOCAL(self,"Self")
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<551>");
	bb_map_Map4::g_new();
	return this;
}
int bb_map_StringMap4::m_Compare(String t_lhs,String t_rhs){
	DBG_ENTER("StringMap.Compare")
	bb_map_StringMap4 *self=this;
	DBG_LOCAL(self,"Self")
	DBG_LOCAL(t_lhs,"lhs")
	DBG_LOCAL(t_rhs,"rhs")
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<554>");
	int t_=t_lhs.Compare(t_rhs);
	return t_;
}
void bb_map_StringMap4::mark(){
	bb_map_Map4::mark();
}
String bb_map_StringMap4::debug(){
	String t="(StringMap)\n";
	t=bb_map_Map4::debug()+t;
	return t;
}
bb_map_Node4::bb_map_Node4(){
	f_key=String();
	f_right=0;
	f_left=0;
	f_value=0;
	f_color=0;
	f_parent=0;
}
bb_map_Node4* bb_map_Node4::g_new(String t_key,bb_angelfont2_AngelFont* t_value,int t_color,bb_map_Node4* t_parent){
	DBG_ENTER("Node.new")
	bb_map_Node4 *self=this;
	DBG_LOCAL(self,"Self")
	DBG_LOCAL(t_key,"key")
	DBG_LOCAL(t_value,"value")
	DBG_LOCAL(t_color,"color")
	DBG_LOCAL(t_parent,"parent")
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<364>");
	this->f_key=t_key;
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<365>");
	gc_assign(this->f_value,t_value);
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<366>");
	this->f_color=t_color;
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<367>");
	gc_assign(this->f_parent,t_parent);
	return this;
}
bb_map_Node4* bb_map_Node4::g_new2(){
	DBG_ENTER("Node.new")
	bb_map_Node4 *self=this;
	DBG_LOCAL(self,"Self")
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<361>");
	return this;
}
void bb_map_Node4::mark(){
	Object::mark();
	gc_mark_q(f_right);
	gc_mark_q(f_left);
	gc_mark_q(f_value);
	gc_mark_q(f_parent);
}
String bb_map_Node4::debug(){
	String t="(Node)\n";
	t+=dbg_decl("key",&f_key);
	t+=dbg_decl("value",&f_value);
	t+=dbg_decl("color",&f_color);
	t+=dbg_decl("parent",&f_parent);
	t+=dbg_decl("left",&f_left);
	t+=dbg_decl("right",&f_right);
	return t;
}
bb_highscore_Highscore::bb_highscore_Highscore(){
	f__maxCount=0;
	f_objects=(new bb_list_List3)->g_new();
}
bb_highscore_Highscore* bb_highscore_Highscore::g_new(int t_maxCount){
	DBG_ENTER("Highscore.new")
	bb_highscore_Highscore *self=this;
	DBG_LOCAL(self,"Self")
	DBG_LOCAL(t_maxCount,"maxCount")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/highscore.monkey<19>");
	f__maxCount=t_maxCount;
	return this;
}
bb_highscore_Highscore* bb_highscore_Highscore::g_new2(){
	DBG_ENTER("Highscore.new")
	bb_highscore_Highscore *self=this;
	DBG_LOCAL(self,"Self")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/highscore.monkey<10>");
	return this;
}
int bb_highscore_Highscore::m_Count(){
	DBG_ENTER("Highscore.Count")
	bb_highscore_Highscore *self=this;
	DBG_LOCAL(self,"Self")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/highscore.monkey<33>");
	int t_=f_objects->m_Count();
	return t_;
}
int bb_highscore_Highscore::m_maxCount(){
	DBG_ENTER("Highscore.maxCount")
	bb_highscore_Highscore *self=this;
	DBG_LOCAL(self,"Self")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/highscore.monkey<74>");
	return f__maxCount;
}
void bb_highscore_Highscore::m_Sort(){
	DBG_ENTER("Highscore.Sort")
	bb_highscore_Highscore *self=this;
	DBG_LOCAL(self,"Self")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/highscore.monkey<86>");
	if(f_objects->m_Count()<2){
		DBG_BLOCK();
		return;
	}
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/highscore.monkey<88>");
	bb_list_List3* t_newList=(new bb_list_List3)->g_new();
	DBG_LOCAL(t_newList,"newList")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/highscore.monkey<89>");
	bb_score_Score* t_current=0;
	DBG_LOCAL(t_current,"current")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/highscore.monkey<91>");
	while(f_objects->m_Count()>0){
		DBG_BLOCK();
		DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/highscore.monkey<92>");
		t_current=f_objects->m_First();
		DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/highscore.monkey<93>");
		bb_list_Enumerator2* t_=f_objects->m_ObjectEnumerator();
		while(t_->m_HasNext()){
			DBG_BLOCK();
			bb_score_Score* t_check=t_->m_NextObject();
			DBG_LOCAL(t_check,"check")
			DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/highscore.monkey<94>");
			if(t_check->f_value<t_current->f_value){
				DBG_BLOCK();
				DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/highscore.monkey<95>");
				t_current=t_check;
			}
		}
		DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/highscore.monkey<99>");
		t_newList->m_AddFirst(t_current);
		DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/highscore.monkey<100>");
		f_objects->m_Remove3(t_current);
	}
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/highscore.monkey<103>");
	f_objects->m_Clear();
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/highscore.monkey<104>");
	gc_assign(f_objects,t_newList);
}
void bb_highscore_Highscore::m_SizeTrim(){
	DBG_ENTER("Highscore.SizeTrim")
	bb_highscore_Highscore *self=this;
	DBG_LOCAL(self,"Self")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/highscore.monkey<80>");
	while(f_objects->m_Count()>f__maxCount){
		DBG_BLOCK();
		DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/highscore.monkey<81>");
		f_objects->m_RemoveLast();
	}
}
void bb_highscore_Highscore::m_Add5(String t_key,int t_value){
	DBG_ENTER("Highscore.Add")
	bb_highscore_Highscore *self=this;
	DBG_LOCAL(self,"Self")
	DBG_LOCAL(t_key,"key")
	DBG_LOCAL(t_value,"value")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/highscore.monkey<23>");
	f_objects->m_AddLast3((new bb_score_Score)->g_new(t_key,t_value));
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/highscore.monkey<24>");
	m_Sort();
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/highscore.monkey<25>");
	m_SizeTrim();
}
bb_score_Score* bb_highscore_Highscore::m_Last(){
	DBG_ENTER("Highscore.Last")
	bb_highscore_Highscore *self=this;
	DBG_LOCAL(self,"Self")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/highscore.monkey<69>");
	if(f_objects->m_Count()==0){
		DBG_BLOCK();
		bb_score_Score* t_=(new bb_score_Score)->g_new(String(),0);
		return t_;
	}
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/highscore.monkey<70>");
	bb_score_Score* t_2=f_objects->m_Last();
	return t_2;
}
void bb_highscore_Highscore::m_FromString(String t_input){
	DBG_ENTER("Highscore.FromString")
	bb_highscore_Highscore *self=this;
	DBG_LOCAL(self,"Self")
	DBG_LOCAL(t_input,"input")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/highscore.monkey<37>");
	f_objects->m_Clear();
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/highscore.monkey<38>");
	String t_key=String();
	DBG_LOCAL(t_key,"key")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/highscore.monkey<39>");
	int t_value=0;
	DBG_LOCAL(t_value,"value")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/highscore.monkey<40>");
	Array<String > t_splitted=t_input.Split(String(L","));
	DBG_LOCAL(t_splitted,"splitted")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/highscore.monkey<42>");
	for(int t_count=0;t_count<=t_splitted.Length()-2;t_count=t_count+2){
		DBG_BLOCK();
		DBG_LOCAL(t_count,"count")
		DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/highscore.monkey<43>");
		t_key=t_splitted.At(t_count).Replace(String(L"[COMMA]"),String(L","));
		DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/highscore.monkey<44>");
		t_value=(t_splitted.At(t_count+1)).ToInt();
		DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/highscore.monkey<45>");
		f_objects->m_AddLast3((new bb_score_Score)->g_new(t_key,t_value));
	}
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/highscore.monkey<48>");
	m_Sort();
}
bb_list_Enumerator2* bb_highscore_Highscore::m_ObjectEnumerator(){
	DBG_ENTER("Highscore.ObjectEnumerator")
	bb_highscore_Highscore *self=this;
	DBG_LOCAL(self,"Self")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/highscore.monkey<60>");
	bb_list_Enumerator2* t_=f_objects->m_ObjectEnumerator();
	return t_;
}
String bb_highscore_Highscore::m_ToString(){
	DBG_ENTER("Highscore.ToString")
	bb_highscore_Highscore *self=this;
	DBG_LOCAL(self,"Self")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/highscore.monkey<52>");
	String t_result=String();
	DBG_LOCAL(t_result,"result")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/highscore.monkey<53>");
	bb_list_Enumerator2* t_=this->m_ObjectEnumerator();
	while(t_->m_HasNext()){
		DBG_BLOCK();
		bb_score_Score* t_score=t_->m_NextObject();
		DBG_LOCAL(t_score,"score")
		DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/highscore.monkey<54>");
		t_result=t_result+(t_score->f_key.Replace(String(L","),String(L"[COMMA]"))+String(L",")+String(t_score->f_value)+String(L","));
	}
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/highscore.monkey<56>");
	return t_result;
}
void bb_highscore_Highscore::mark(){
	Object::mark();
	gc_mark_q(f_objects);
}
String bb_highscore_Highscore::debug(){
	String t="(Highscore)\n";
	t+=dbg_decl("objects",&f_objects);
	t+=dbg_decl("_maxCount",&f__maxCount);
	return t;
}
bb_highscore_IntHighscore::bb_highscore_IntHighscore(){
}
bb_highscore_IntHighscore* bb_highscore_IntHighscore::g_new(int t_maxCount){
	DBG_ENTER("IntHighscore.new")
	bb_highscore_IntHighscore *self=this;
	DBG_LOCAL(self,"Self")
	DBG_LOCAL(t_maxCount,"maxCount")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/highscore.monkey<110>");
	bb_highscore_Highscore::g_new(t_maxCount);
	return this;
}
bb_highscore_IntHighscore* bb_highscore_IntHighscore::g_new2(){
	DBG_ENTER("IntHighscore.new")
	bb_highscore_IntHighscore *self=this;
	DBG_LOCAL(self,"Self")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/highscore.monkey<108>");
	bb_highscore_Highscore::g_new2();
	return this;
}
void bb_highscore_IntHighscore::mark(){
	bb_highscore_Highscore::mark();
}
String bb_highscore_IntHighscore::debug(){
	String t="(IntHighscore)\n";
	t=bb_highscore_Highscore::debug()+t;
	return t;
}
bb_gamehighscore_GameHighscore::bb_gamehighscore_GameHighscore(){
}
Array<int > bb_gamehighscore_GameHighscore::g_scores;
void bb_gamehighscore_GameHighscore::m_LoadNamesAndScores(){
	DBG_ENTER("GameHighscore.LoadNamesAndScores")
	bb_gamehighscore_GameHighscore *self=this;
	DBG_LOCAL(self,"Self")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/gamehighscore.monkey<32>");
	int t_[]={1000,900,800,700,600,500,400,300,200,100};
	gc_assign(g_scores,Array<int >(t_,10));
}
Array<String > bb_gamehighscore_GameHighscore::g_names;
void bb_gamehighscore_GameHighscore::m_PrefillMissing(){
	DBG_ENTER("GameHighscore.PrefillMissing")
	bb_gamehighscore_GameHighscore *self=this;
	DBG_LOCAL(self,"Self")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/gamehighscore.monkey<36>");
	if(m_Count()>=m_maxCount()){
		DBG_BLOCK();
		return;
	}
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/gamehighscore.monkey<37>");
	for(int t_i=0;t_i<m_maxCount();t_i=t_i+1){
		DBG_BLOCK();
		DBG_LOCAL(t_i,"i")
		DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/gamehighscore.monkey<38>");
		m_Add5(String(L"easy ")+g_names.At(t_i),g_scores.At(t_i));
	}
}
bb_gamehighscore_GameHighscore* bb_gamehighscore_GameHighscore::g_new(){
	DBG_ENTER("GameHighscore.new")
	bb_gamehighscore_GameHighscore *self=this;
	DBG_LOCAL(self,"Self")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/gamehighscore.monkey<18>");
	bb_highscore_IntHighscore::g_new(10);
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/gamehighscore.monkey<19>");
	m_LoadNamesAndScores();
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/gamehighscore.monkey<20>");
	m_PrefillMissing();
	return this;
}
void bb_gamehighscore_GameHighscore::m_FromString(String t_input){
	DBG_ENTER("GameHighscore.FromString")
	bb_gamehighscore_GameHighscore *self=this;
	DBG_LOCAL(self,"Self")
	DBG_LOCAL(t_input,"input")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/gamehighscore.monkey<24>");
	bb_highscore_Highscore::m_FromString(t_input);
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/gamehighscore.monkey<25>");
	m_PrefillMissing();
}
void bb_gamehighscore_GameHighscore::mark(){
	bb_highscore_IntHighscore::mark();
}
String bb_gamehighscore_GameHighscore::debug(){
	String t="(GameHighscore)\n";
	t=bb_highscore_IntHighscore::debug()+t;
	t+=dbg_decl("names",&bb_gamehighscore_GameHighscore::g_names);
	t+=dbg_decl("scores",&bb_gamehighscore_GameHighscore::g_scores);
	return t;
}
bb_score_Score::bb_score_Score(){
	f_key=String();
	f_value=0;
}
bb_score_Score* bb_score_Score::g_new(String t_key,int t_value){
	DBG_ENTER("Score.new")
	bb_score_Score *self=this;
	DBG_LOCAL(self,"Self")
	DBG_LOCAL(t_key,"key")
	DBG_LOCAL(t_value,"value")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/score.monkey<8>");
	this->f_key=t_key;
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/score.monkey<9>");
	this->f_value=t_value;
	return this;
}
bb_score_Score* bb_score_Score::g_new2(){
	DBG_ENTER("Score.new")
	bb_score_Score *self=this;
	DBG_LOCAL(self,"Self")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/score.monkey<3>");
	return this;
}
void bb_score_Score::mark(){
	Object::mark();
}
String bb_score_Score::debug(){
	String t="(Score)\n";
	t+=dbg_decl("key",&f_key);
	t+=dbg_decl("value",&f_value);
	return t;
}
bb_list_List3::bb_list_List3(){
	f__head=((new bb_list_HeadNode3)->g_new());
}
bb_list_List3* bb_list_List3::g_new(){
	DBG_ENTER("List.new")
	bb_list_List3 *self=this;
	DBG_LOCAL(self,"Self")
	return this;
}
bb_list_Node3* bb_list_List3::m_AddLast3(bb_score_Score* t_data){
	DBG_ENTER("List.AddLast")
	bb_list_List3 *self=this;
	DBG_LOCAL(self,"Self")
	DBG_LOCAL(t_data,"data")
	DBG_INFO("/Applications/Monkey/modules/monkey/list.monkey<120>");
	bb_list_Node3* t_=(new bb_list_Node3)->g_new(f__head,f__head->f__pred,t_data);
	return t_;
}
bb_list_List3* bb_list_List3::g_new2(Array<bb_score_Score* > t_data){
	DBG_ENTER("List.new")
	bb_list_List3 *self=this;
	DBG_LOCAL(self,"Self")
	DBG_LOCAL(t_data,"data")
	DBG_INFO("/Applications/Monkey/modules/monkey/list.monkey<13>");
	Array<bb_score_Score* > t_=t_data;
	int t_2=0;
	while(t_2<t_.Length()){
		DBG_BLOCK();
		bb_score_Score* t_t=t_.At(t_2);
		t_2=t_2+1;
		DBG_LOCAL(t_t,"t")
		DBG_INFO("/Applications/Monkey/modules/monkey/list.monkey<14>");
		m_AddLast3(t_t);
	}
	return this;
}
int bb_list_List3::m_Count(){
	DBG_ENTER("List.Count")
	bb_list_List3 *self=this;
	DBG_LOCAL(self,"Self")
	DBG_INFO("/Applications/Monkey/modules/monkey/list.monkey<41>");
	int t_n=0;
	bb_list_Node3* t_node=f__head->f__succ;
	DBG_LOCAL(t_n,"n")
	DBG_LOCAL(t_node,"node")
	DBG_INFO("/Applications/Monkey/modules/monkey/list.monkey<42>");
	while(t_node!=f__head){
		DBG_BLOCK();
		DBG_INFO("/Applications/Monkey/modules/monkey/list.monkey<43>");
		t_node=t_node->f__succ;
		DBG_INFO("/Applications/Monkey/modules/monkey/list.monkey<44>");
		t_n+=1;
	}
	DBG_INFO("/Applications/Monkey/modules/monkey/list.monkey<46>");
	return t_n;
}
bool bb_list_List3::m_IsEmpty(){
	DBG_ENTER("List.IsEmpty")
	bb_list_List3 *self=this;
	DBG_LOCAL(self,"Self")
	DBG_INFO("/Applications/Monkey/modules/monkey/list.monkey<50>");
	bool t_=f__head->f__succ==f__head;
	return t_;
}
bb_score_Score* bb_list_List3::m_First(){
	DBG_ENTER("List.First")
	bb_list_List3 *self=this;
	DBG_LOCAL(self,"Self")
	DBG_INFO("/Applications/Monkey/modules/monkey/list.monkey<71>");
	if(m_IsEmpty()){
		DBG_BLOCK();
		Error(String(L"Illegal operation on empty list"));
	}
	DBG_INFO("/Applications/Monkey/modules/monkey/list.monkey<73>");
	bb_score_Score* t_=f__head->m_NextNode()->f__data;
	return t_;
}
bb_list_Enumerator2* bb_list_List3::m_ObjectEnumerator(){
	DBG_ENTER("List.ObjectEnumerator")
	bb_list_List3 *self=this;
	DBG_LOCAL(self,"Self")
	DBG_INFO("/Applications/Monkey/modules/monkey/list.monkey<124>");
	bb_list_Enumerator2* t_=(new bb_list_Enumerator2)->g_new(this);
	return t_;
}
bb_list_Node3* bb_list_List3::m_AddFirst(bb_score_Score* t_data){
	DBG_ENTER("List.AddFirst")
	bb_list_List3 *self=this;
	DBG_LOCAL(self,"Self")
	DBG_LOCAL(t_data,"data")
	DBG_INFO("/Applications/Monkey/modules/monkey/list.monkey<116>");
	bb_list_Node3* t_=(new bb_list_Node3)->g_new(f__head->f__succ,f__head,t_data);
	return t_;
}
bool bb_list_List3::m_Equals3(bb_score_Score* t_lhs,bb_score_Score* t_rhs){
	DBG_ENTER("List.Equals")
	bb_list_List3 *self=this;
	DBG_LOCAL(self,"Self")
	DBG_LOCAL(t_lhs,"lhs")
	DBG_LOCAL(t_rhs,"rhs")
	DBG_INFO("/Applications/Monkey/modules/monkey/list.monkey<28>");
	bool t_=t_lhs==t_rhs;
	return t_;
}
int bb_list_List3::m_RemoveEach2(bb_score_Score* t_value){
	DBG_ENTER("List.RemoveEach")
	bb_list_List3 *self=this;
	DBG_LOCAL(self,"Self")
	DBG_LOCAL(t_value,"value")
	DBG_INFO("/Applications/Monkey/modules/monkey/list.monkey<107>");
	bb_list_Node3* t_node=f__head->f__succ;
	DBG_LOCAL(t_node,"node")
	DBG_INFO("/Applications/Monkey/modules/monkey/list.monkey<108>");
	while(t_node!=f__head){
		DBG_BLOCK();
		DBG_INFO("/Applications/Monkey/modules/monkey/list.monkey<109>");
		bb_list_Node3* t_succ=t_node->f__succ;
		DBG_LOCAL(t_succ,"succ")
		DBG_INFO("/Applications/Monkey/modules/monkey/list.monkey<110>");
		if(m_Equals3(t_node->f__data,t_value)){
			DBG_BLOCK();
			t_node->m_Remove2();
		}
		DBG_INFO("/Applications/Monkey/modules/monkey/list.monkey<111>");
		t_node=t_succ;
	}
	return 0;
}
int bb_list_List3::m_Remove3(bb_score_Score* t_value){
	DBG_ENTER("List.Remove")
	bb_list_List3 *self=this;
	DBG_LOCAL(self,"Self")
	DBG_LOCAL(t_value,"value")
	DBG_INFO("/Applications/Monkey/modules/monkey/list.monkey<103>");
	m_RemoveEach2(t_value);
	return 0;
}
int bb_list_List3::m_Clear(){
	DBG_ENTER("List.Clear")
	bb_list_List3 *self=this;
	DBG_LOCAL(self,"Self")
	DBG_INFO("/Applications/Monkey/modules/monkey/list.monkey<36>");
	gc_assign(f__head->f__succ,f__head);
	DBG_INFO("/Applications/Monkey/modules/monkey/list.monkey<37>");
	gc_assign(f__head->f__pred,f__head);
	return 0;
}
bb_score_Score* bb_list_List3::m_RemoveLast(){
	DBG_ENTER("List.RemoveLast")
	bb_list_List3 *self=this;
	DBG_LOCAL(self,"Self")
	DBG_INFO("/Applications/Monkey/modules/monkey/list.monkey<94>");
	if(m_IsEmpty()){
		DBG_BLOCK();
		Error(String(L"Illegal operation on empty list"));
	}
	DBG_INFO("/Applications/Monkey/modules/monkey/list.monkey<96>");
	bb_score_Score* t_data=f__head->m_PrevNode()->f__data;
	DBG_LOCAL(t_data,"data")
	DBG_INFO("/Applications/Monkey/modules/monkey/list.monkey<97>");
	f__head->f__pred->m_Remove2();
	DBG_INFO("/Applications/Monkey/modules/monkey/list.monkey<98>");
	return t_data;
}
bb_score_Score* bb_list_List3::m_Last(){
	DBG_ENTER("List.Last")
	bb_list_List3 *self=this;
	DBG_LOCAL(self,"Self")
	DBG_INFO("/Applications/Monkey/modules/monkey/list.monkey<78>");
	if(m_IsEmpty()){
		DBG_BLOCK();
		Error(String(L"Illegal operation on empty list"));
	}
	DBG_INFO("/Applications/Monkey/modules/monkey/list.monkey<80>");
	bb_score_Score* t_=f__head->m_PrevNode()->f__data;
	return t_;
}
void bb_list_List3::mark(){
	Object::mark();
	gc_mark_q(f__head);
}
String bb_list_List3::debug(){
	String t="(List)\n";
	t+=dbg_decl("_head",&f__head);
	return t;
}
bb_list_Node3::bb_list_Node3(){
	f__succ=0;
	f__pred=0;
	f__data=0;
}
bb_list_Node3* bb_list_Node3::g_new(bb_list_Node3* t_succ,bb_list_Node3* t_pred,bb_score_Score* t_data){
	DBG_ENTER("Node.new")
	bb_list_Node3 *self=this;
	DBG_LOCAL(self,"Self")
	DBG_LOCAL(t_succ,"succ")
	DBG_LOCAL(t_pred,"pred")
	DBG_LOCAL(t_data,"data")
	DBG_INFO("/Applications/Monkey/modules/monkey/list.monkey<199>");
	gc_assign(f__succ,t_succ);
	DBG_INFO("/Applications/Monkey/modules/monkey/list.monkey<200>");
	gc_assign(f__pred,t_pred);
	DBG_INFO("/Applications/Monkey/modules/monkey/list.monkey<201>");
	gc_assign(f__succ->f__pred,this);
	DBG_INFO("/Applications/Monkey/modules/monkey/list.monkey<202>");
	gc_assign(f__pred->f__succ,this);
	DBG_INFO("/Applications/Monkey/modules/monkey/list.monkey<203>");
	gc_assign(f__data,t_data);
	return this;
}
bb_list_Node3* bb_list_Node3::g_new2(){
	DBG_ENTER("Node.new")
	bb_list_Node3 *self=this;
	DBG_LOCAL(self,"Self")
	DBG_INFO("/Applications/Monkey/modules/monkey/list.monkey<196>");
	return this;
}
bb_list_Node3* bb_list_Node3::m_GetNode(){
	DBG_ENTER("Node.GetNode")
	bb_list_Node3 *self=this;
	DBG_LOCAL(self,"Self")
	DBG_INFO("/Applications/Monkey/modules/monkey/list.monkey<239>");
	return this;
}
bb_list_Node3* bb_list_Node3::m_NextNode(){
	DBG_ENTER("Node.NextNode")
	bb_list_Node3 *self=this;
	DBG_LOCAL(self,"Self")
	DBG_INFO("/Applications/Monkey/modules/monkey/list.monkey<220>");
	if(f__succ->f__pred!=this){
		DBG_BLOCK();
		Error(String(L"Illegal operation on removed node"));
	}
	DBG_INFO("/Applications/Monkey/modules/monkey/list.monkey<222>");
	bb_list_Node3* t_=f__succ->m_GetNode();
	return t_;
}
int bb_list_Node3::m_Remove2(){
	DBG_ENTER("Node.Remove")
	bb_list_Node3 *self=this;
	DBG_LOCAL(self,"Self")
	DBG_INFO("/Applications/Monkey/modules/monkey/list.monkey<212>");
	if(f__succ->f__pred!=this){
		DBG_BLOCK();
		Error(String(L"Illegal operation on removed node"));
	}
	DBG_INFO("/Applications/Monkey/modules/monkey/list.monkey<214>");
	gc_assign(f__succ->f__pred,f__pred);
	DBG_INFO("/Applications/Monkey/modules/monkey/list.monkey<215>");
	gc_assign(f__pred->f__succ,f__succ);
	return 0;
}
bb_list_Node3* bb_list_Node3::m_PrevNode(){
	DBG_ENTER("Node.PrevNode")
	bb_list_Node3 *self=this;
	DBG_LOCAL(self,"Self")
	DBG_INFO("/Applications/Monkey/modules/monkey/list.monkey<227>");
	if(f__succ->f__pred!=this){
		DBG_BLOCK();
		Error(String(L"Illegal operation on removed node"));
	}
	DBG_INFO("/Applications/Monkey/modules/monkey/list.monkey<229>");
	bb_list_Node3* t_=f__pred->m_GetNode();
	return t_;
}
void bb_list_Node3::mark(){
	Object::mark();
	gc_mark_q(f__succ);
	gc_mark_q(f__pred);
	gc_mark_q(f__data);
}
String bb_list_Node3::debug(){
	String t="(Node)\n";
	t+=dbg_decl("_succ",&f__succ);
	t+=dbg_decl("_pred",&f__pred);
	t+=dbg_decl("_data",&f__data);
	return t;
}
bb_list_HeadNode3::bb_list_HeadNode3(){
}
bb_list_HeadNode3* bb_list_HeadNode3::g_new(){
	DBG_ENTER("HeadNode.new")
	bb_list_HeadNode3 *self=this;
	DBG_LOCAL(self,"Self")
	DBG_INFO("/Applications/Monkey/modules/monkey/list.monkey<248>");
	bb_list_Node3::g_new2();
	DBG_INFO("/Applications/Monkey/modules/monkey/list.monkey<249>");
	gc_assign(f__succ,(this));
	DBG_INFO("/Applications/Monkey/modules/monkey/list.monkey<250>");
	gc_assign(f__pred,(this));
	return this;
}
bb_list_Node3* bb_list_HeadNode3::m_GetNode(){
	DBG_ENTER("HeadNode.GetNode")
	bb_list_HeadNode3 *self=this;
	DBG_LOCAL(self,"Self")
	DBG_INFO("/Applications/Monkey/modules/monkey/list.monkey<254>");
	return 0;
}
void bb_list_HeadNode3::mark(){
	bb_list_Node3::mark();
}
String bb_list_HeadNode3::debug(){
	String t="(HeadNode)\n";
	t=bb_list_Node3::debug()+t;
	return t;
}
bb_list_Enumerator2::bb_list_Enumerator2(){
	f__list=0;
	f__curr=0;
}
bb_list_Enumerator2* bb_list_Enumerator2::g_new(bb_list_List3* t_list){
	DBG_ENTER("Enumerator.new")
	bb_list_Enumerator2 *self=this;
	DBG_LOCAL(self,"Self")
	DBG_LOCAL(t_list,"list")
	DBG_INFO("/Applications/Monkey/modules/monkey/list.monkey<264>");
	gc_assign(f__list,t_list);
	DBG_INFO("/Applications/Monkey/modules/monkey/list.monkey<265>");
	gc_assign(f__curr,t_list->f__head->f__succ);
	return this;
}
bb_list_Enumerator2* bb_list_Enumerator2::g_new2(){
	DBG_ENTER("Enumerator.new")
	bb_list_Enumerator2 *self=this;
	DBG_LOCAL(self,"Self")
	DBG_INFO("/Applications/Monkey/modules/monkey/list.monkey<261>");
	return this;
}
bool bb_list_Enumerator2::m_HasNext(){
	DBG_ENTER("Enumerator.HasNext")
	bb_list_Enumerator2 *self=this;
	DBG_LOCAL(self,"Self")
	DBG_INFO("/Applications/Monkey/modules/monkey/list.monkey<269>");
	while(f__curr->f__succ->f__pred!=f__curr){
		DBG_BLOCK();
		DBG_INFO("/Applications/Monkey/modules/monkey/list.monkey<270>");
		gc_assign(f__curr,f__curr->f__succ);
	}
	DBG_INFO("/Applications/Monkey/modules/monkey/list.monkey<272>");
	bool t_=f__curr!=f__list->f__head;
	return t_;
}
bb_score_Score* bb_list_Enumerator2::m_NextObject(){
	DBG_ENTER("Enumerator.NextObject")
	bb_list_Enumerator2 *self=this;
	DBG_LOCAL(self,"Self")
	DBG_INFO("/Applications/Monkey/modules/monkey/list.monkey<276>");
	bb_score_Score* t_data=f__curr->f__data;
	DBG_LOCAL(t_data,"data")
	DBG_INFO("/Applications/Monkey/modules/monkey/list.monkey<277>");
	gc_assign(f__curr,f__curr->f__succ);
	DBG_INFO("/Applications/Monkey/modules/monkey/list.monkey<278>");
	return t_data;
}
void bb_list_Enumerator2::mark(){
	Object::mark();
	gc_mark_q(f__list);
	gc_mark_q(f__curr);
}
String bb_list_Enumerator2::debug(){
	String t="(Enumerator)\n";
	t+=dbg_decl("_list",&f__list);
	t+=dbg_decl("_curr",&f__curr);
	return t;
}
bb_statestore_StateStore::bb_statestore_StateStore(){
}
void bb_statestore_StateStore::g_Load(bb_persistable_Persistable* t_obj){
	DBG_ENTER("StateStore.Load")
	DBG_LOCAL(t_obj,"obj")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/statestore.monkey<19>");
	t_obj->m_FromString(bb_app_LoadState());
}
void bb_statestore_StateStore::g_Save(bb_persistable_Persistable* t_obj){
	DBG_ENTER("StateStore.Save")
	DBG_LOCAL(t_obj,"obj")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/statestore.monkey<23>");
	bb_app_SaveState(t_obj->m_ToString());
}
void bb_statestore_StateStore::mark(){
	Object::mark();
}
String bb_statestore_StateStore::debug(){
	String t="(StateStore)\n";
	return t;
}
String bb_app_LoadState(){
	DBG_ENTER("LoadState")
	DBG_INFO("/Applications/Monkey/modules/mojo/app.monkey<129>");
	String t_=bb_app_device->LoadState();
	return t_;
}
bb_chute_Chute::bb_chute_Chute(){
	f_height=0;
	f_bg=0;
	f_width=0;
	f_bottom=0;
	f_severity=0;
}
bb_chute_Chute* bb_chute_Chute::g_new(){
	DBG_ENTER("Chute.new")
	bb_chute_Chute *self=this;
	DBG_LOCAL(self,"Self")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/chute.monkey<11>");
	bb_baseobject_BaseObject::g_new();
	return this;
}
void bb_chute_Chute::m_Restart(){
	DBG_ENTER("Chute.Restart")
	bb_chute_Chute *self=this;
	DBG_LOCAL(self,"Self")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/chute.monkey<33>");
	f_height=75;
}
void bb_chute_Chute::m_OnCreate(bb_director_Director* t_director){
	DBG_ENTER("Chute.OnCreate")
	bb_chute_Chute *self=this;
	DBG_LOCAL(self,"Self")
	DBG_LOCAL(t_director,"director")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/chute.monkey<24>");
	gc_assign(f_bg,bb_graphics_LoadImage(String(L"chute-bg.png"),1,bb_graphics_Image::g_DefaultFlags));
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/chute.monkey<25>");
	f_width=f_bg->m_Width()+4;
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/chute.monkey<26>");
	gc_assign(f_bottom,bb_graphics_LoadImage(String(L"chute-bottom.png"),1,bb_graphics_Image::g_DefaultFlags));
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/chute.monkey<27>");
	gc_assign(f_severity,bb_severity_CurrentSeverity());
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/chute.monkey<28>");
	m_Restart();
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/chute.monkey<29>");
	bb_partial_Partial::m_OnCreate(t_director);
}
void bb_chute_Chute::m_OnUpdate(Float t_delta,Float t_frameTime){
	DBG_ENTER("Chute.OnUpdate")
	bb_chute_Chute *self=this;
	DBG_LOCAL(self,"Self")
	DBG_LOCAL(t_delta,"delta")
	DBG_LOCAL(t_frameTime,"frameTime")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/chute.monkey<41>");
	if(f_severity->m_ChuteShouldAdvance()){
		DBG_BLOCK();
		DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/chute.monkey<42>");
		f_height+=f_severity->m_ChuteAdvanceHeight();
		DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/chute.monkey<43>");
		f_severity->m_ChuteMarkAsAdvanced();
	}
}
void bb_chute_Chute::m_OnRender(){
	DBG_ENTER("Chute.OnRender")
	bb_chute_Chute *self=this;
	DBG_LOCAL(self,"Self")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/chute.monkey<48>");
	for(Float t_posY=FLOAT(0.0);t_posY<=Float(f_height);t_posY=t_posY+FLOAT(6.0)){
		DBG_BLOCK();
		DBG_LOCAL(t_posY,"posY")
		DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/chute.monkey<49>");
		bb_graphics_DrawImage(f_bg,Float(44+f_width*0),t_posY,0);
		DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/chute.monkey<50>");
		bb_graphics_DrawImage(f_bg,Float(44+f_width*1),t_posY,0);
		DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/chute.monkey<51>");
		bb_graphics_DrawImage(f_bg,Float(44+f_width*2),t_posY,0);
		DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/chute.monkey<52>");
		bb_graphics_DrawImage(f_bg,Float(44+f_width*3),t_posY,0);
	}
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/chute.monkey<57>");
	bb_graphics_DrawImage(f_bottom,Float(42+f_width*0),Float(f_height),0);
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/chute.monkey<58>");
	bb_graphics_DrawImage(f_bottom,Float(42+f_width*1),Float(f_height),0);
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/chute.monkey<59>");
	bb_graphics_DrawImage(f_bottom,Float(42+f_width*2),Float(f_height),0);
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/chute.monkey<60>");
	bb_graphics_DrawImage(f_bottom,Float(42+f_width*3),Float(f_height),0);
}
int bb_chute_Chute::m_Height(){
	DBG_ENTER("Chute.Height")
	bb_chute_Chute *self=this;
	DBG_LOCAL(self,"Self")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/chute.monkey<37>");
	return f_height;
}
void bb_chute_Chute::mark(){
	bb_baseobject_BaseObject::mark();
	gc_mark_q(f_bg);
	gc_mark_q(f_bottom);
	gc_mark_q(f_severity);
}
String bb_chute_Chute::debug(){
	String t="(Chute)\n";
	t=bb_baseobject_BaseObject::debug()+t;
	t+=dbg_decl("bottom",&f_bottom);
	t+=dbg_decl("severity",&f_severity);
	t+=dbg_decl("width",&f_width);
	t+=dbg_decl("height",&f_height);
	t+=dbg_decl("bg",&f_bg);
	return t;
}
bb_severity_Severity::bb_severity_Severity(){
	f_nextChuteAdvanceTime=0;
	f_nextShapeDropTime=0;
	f_lastTime=0;
	f_level=0;
	f_activatedShapes=0;
	f_slowDownDuration=0;
	f_lastTypes=(new bb_stack_IntStack)->g_new();
	f_progress=FLOAT(1.0);
	int t_[]={0,1,2,3};
	f_shapeTypes=Array<int >(t_,4);
	f_startTime=0;
	int t_2[]={0,0,0,0};
	f_laneTimes=Array<int >(t_2,4);
}
bb_severity_Severity* bb_severity_Severity::g_new(){
	DBG_ENTER("Severity.new")
	bb_severity_Severity *self=this;
	DBG_LOCAL(self,"Self")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/severity.monkey<24>");
	return this;
}
void bb_severity_Severity::m_WarpTime(int t_diff){
	DBG_ENTER("Severity.WarpTime")
	bb_severity_Severity *self=this;
	DBG_LOCAL(self,"Self")
	DBG_LOCAL(t_diff,"diff")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/severity.monkey<79>");
	f_nextChuteAdvanceTime+=t_diff;
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/severity.monkey<80>");
	f_nextShapeDropTime+=t_diff;
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/severity.monkey<81>");
	f_lastTime+=t_diff;
}
void bb_severity_Severity::m_ChuteMarkAsAdvanced(){
	DBG_ENTER("Severity.ChuteMarkAsAdvanced")
	bb_severity_Severity *self=this;
	DBG_LOCAL(self,"Self")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/severity.monkey<101>");
	f_nextChuteAdvanceTime=int(bb_random_Rnd2(FLOAT(2000.0),FLOAT(4000.0)));
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/severity.monkey<103>");
	int t_2=f_level;
	DBG_LOCAL(t_2,"2")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/severity.monkey<104>");
	if(t_2==0){
		DBG_BLOCK();
		DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/severity.monkey<105>");
		f_nextChuteAdvanceTime=int(Float(f_nextChuteAdvanceTime)+FLOAT(5000.0)*f_progress);
	}else{
		DBG_BLOCK();
		DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/severity.monkey<106>");
		if(t_2==1){
			DBG_BLOCK();
			DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/severity.monkey<107>");
			f_nextChuteAdvanceTime=int(Float(f_nextChuteAdvanceTime)+FLOAT(5000.0)*f_progress);
		}else{
			DBG_BLOCK();
			DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/severity.monkey<108>");
			if(t_2==2){
				DBG_BLOCK();
				DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/severity.monkey<109>");
				f_nextChuteAdvanceTime=int(Float(f_nextChuteAdvanceTime)+FLOAT(5000.0)*f_progress);
			}
		}
	}
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/severity.monkey<112>");
	f_nextChuteAdvanceTime*=2;
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/severity.monkey<113>");
	f_nextChuteAdvanceTime+=f_lastTime;
}
void bb_severity_Severity::m_ShapeDropped(){
	DBG_ENTER("Severity.ShapeDropped")
	bb_severity_Severity *self=this;
	DBG_LOCAL(self,"Self")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/severity.monkey<121>");
	int t_3=f_level;
	DBG_LOCAL(t_3,"3")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/severity.monkey<122>");
	if(t_3==0){
		DBG_BLOCK();
		DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/severity.monkey<123>");
		f_nextShapeDropTime=int(Float(f_lastTime)+bb_random_Rnd2(FLOAT(450.0),FLOAT(1800.0)+FLOAT(2500.0)*f_progress));
	}else{
		DBG_BLOCK();
		DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/severity.monkey<124>");
		if(t_3==1){
			DBG_BLOCK();
			DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/severity.monkey<125>");
			f_nextShapeDropTime=int(Float(f_lastTime)+bb_random_Rnd2(FLOAT(375.0),FLOAT(1800.0)+FLOAT(2500.0)*f_progress));
		}else{
			DBG_BLOCK();
			DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/severity.monkey<126>");
			if(t_3==2){
				DBG_BLOCK();
				DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/severity.monkey<127>");
				f_nextShapeDropTime=int(Float(f_lastTime)+bb_random_Rnd2(FLOAT(300.0),FLOAT(1800.0)+FLOAT(2500.0)*f_progress));
			}
		}
	}
}
void bb_severity_Severity::m_RandomizeShapeTypes(){
	DBG_ENTER("Severity.RandomizeShapeTypes")
	bb_severity_Severity *self=this;
	DBG_LOCAL(self,"Self")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/severity.monkey<200>");
	int t_swapIndex=0;
	DBG_LOCAL(t_swapIndex,"swapIndex")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/severity.monkey<201>");
	int t_tmpType=0;
	DBG_LOCAL(t_tmpType,"tmpType")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/severity.monkey<203>");
	for(int t_i=0;t_i<f_shapeTypes.Length();t_i=t_i+1){
		DBG_BLOCK();
		DBG_LOCAL(t_i,"i")
		DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/severity.monkey<206>");
		do{
			DBG_BLOCK();
			DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/severity.monkey<205>");
			t_swapIndex=int(bb_random_Rnd2(FLOAT(0.0),Float(f_shapeTypes.Length())));
		}while(!(t_swapIndex!=t_i));
		DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/severity.monkey<208>");
		t_tmpType=f_shapeTypes.At(t_i);
		DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/severity.monkey<209>");
		f_shapeTypes.At(t_i)=f_shapeTypes.At(t_swapIndex);
		DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/severity.monkey<210>");
		f_shapeTypes.At(t_swapIndex)=t_tmpType;
	}
}
void bb_severity_Severity::m_Restart(){
	DBG_ENTER("Severity.Restart")
	bb_severity_Severity *self=this;
	DBG_LOCAL(self,"Self")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/severity.monkey<58>");
	int t_1=f_level;
	DBG_LOCAL(t_1,"1")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/severity.monkey<59>");
	if(t_1==0){
		DBG_BLOCK();
		DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/severity.monkey<60>");
		f_activatedShapes=2;
		DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/severity.monkey<61>");
		f_slowDownDuration=160000;
	}else{
		DBG_BLOCK();
		DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/severity.monkey<62>");
		if(t_1==1){
			DBG_BLOCK();
			DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/severity.monkey<63>");
			f_activatedShapes=3;
			DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/severity.monkey<64>");
			f_slowDownDuration=140000;
		}else{
			DBG_BLOCK();
			DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/severity.monkey<65>");
			if(t_1==2){
				DBG_BLOCK();
				DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/severity.monkey<66>");
				f_activatedShapes=4;
				DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/severity.monkey<67>");
				f_slowDownDuration=120000;
			}
		}
	}
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/severity.monkey<70>");
	f_lastTypes->m_Clear();
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/severity.monkey<71>");
	m_ChuteMarkAsAdvanced();
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/severity.monkey<72>");
	m_ShapeDropped();
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/severity.monkey<73>");
	m_RandomizeShapeTypes();
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/severity.monkey<74>");
	f_progress=FLOAT(1.0);
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/severity.monkey<75>");
	f_startTime=bb_app_Millisecs();
}
int bb_severity_Severity::m_MinSliderTypes(){
	DBG_ENTER("Severity.MinSliderTypes")
	bb_severity_Severity *self=this;
	DBG_LOCAL(self,"Self")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/severity.monkey<132>");
	if(f_level==0){
		DBG_BLOCK();
		DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/severity.monkey<133>");
		return 2;
	}else{
		DBG_BLOCK();
		DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/severity.monkey<134>");
		if(f_level==1){
			DBG_BLOCK();
			DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/severity.monkey<135>");
			return 3;
		}else{
			DBG_BLOCK();
			DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/severity.monkey<137>");
			return 4;
		}
	}
}
void bb_severity_Severity::m_ConfigureSlider(bb_list_IntList* t_config){
	DBG_ENTER("Severity.ConfigureSlider")
	bb_severity_Severity *self=this;
	DBG_LOCAL(self,"Self")
	DBG_LOCAL(t_config,"config")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/severity.monkey<164>");
	bb_set_IntSet* t_usedTypes=(new bb_set_IntSet)->g_new();
	DBG_LOCAL(t_usedTypes,"usedTypes")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/severity.monkey<165>");
	t_config->m_Clear();
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/severity.monkey<167>");
	for(int t_i=0;t_i<m_MinSliderTypes();t_i=t_i+1){
		DBG_BLOCK();
		DBG_LOCAL(t_i,"i")
		DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/severity.monkey<168>");
		t_usedTypes->m_Insert4(f_shapeTypes.At(t_i));
		DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/severity.monkey<169>");
		t_config->m_AddLast4(f_shapeTypes.At(t_i));
	}
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/severity.monkey<172>");
	while(t_config->m_Count()<4){
		DBG_BLOCK();
		DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/severity.monkey<173>");
		if(t_usedTypes->m_Count()>=f_activatedShapes || bb_random_Rnd()<FLOAT(0.5)){
			DBG_BLOCK();
			DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/severity.monkey<174>");
			t_config->m_AddLast4(f_shapeTypes.At(int(bb_random_Rnd2(FLOAT(0.0),Float(t_usedTypes->m_Count())))));
		}else{
			DBG_BLOCK();
			DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/severity.monkey<176>");
			t_config->m_AddLast4(f_shapeTypes.At(t_usedTypes->m_Count()));
			DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/severity.monkey<177>");
			t_usedTypes->m_Insert4(f_shapeTypes.At(t_usedTypes->m_Count()));
		}
	}
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/severity.monkey<181>");
	f_activatedShapes=t_usedTypes->m_Count();
}
bool bb_severity_Severity::m_ChuteShouldAdvance(){
	DBG_ENTER("Severity.ChuteShouldAdvance")
	bb_severity_Severity *self=this;
	DBG_LOCAL(self,"Self")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/severity.monkey<93>");
	bool t_=f_lastTime>=f_nextChuteAdvanceTime;
	return t_;
}
int bb_severity_Severity::m_ChuteAdvanceHeight(){
	DBG_ENTER("Severity.ChuteAdvanceHeight")
	bb_severity_Severity *self=this;
	DBG_LOCAL(self,"Self")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/severity.monkey<97>");
	return 40;
}
void bb_severity_Severity::m_Set5(int t_level){
	DBG_ENTER("Severity.Set")
	bb_severity_Severity *self=this;
	DBG_LOCAL(self,"Self")
	DBG_LOCAL(t_level,"level")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/severity.monkey<43>");
	this->f_level=t_level;
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/severity.monkey<44>");
	m_Restart();
}
void bb_severity_Severity::m_OnUpdate(Float t_delta,Float t_frameTime){
	DBG_ENTER("Severity.OnUpdate")
	bb_severity_Severity *self=this;
	DBG_LOCAL(self,"Self")
	DBG_LOCAL(t_delta,"delta")
	DBG_LOCAL(t_frameTime,"frameTime")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/severity.monkey<85>");
	f_lastTime=bb_app_Millisecs();
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/severity.monkey<86>");
	if(f_progress>FLOAT(0.0)){
		DBG_BLOCK();
		DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/severity.monkey<87>");
		f_progress=FLOAT(1.0)-FLOAT(1.0)/Float(f_slowDownDuration)*Float(f_lastTime-f_startTime);
		DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/severity.monkey<88>");
		f_progress=bb_math_Max2(FLOAT(0.0),f_progress);
	}
}
bool bb_severity_Severity::m_ShapeShouldBeDropped(){
	DBG_ENTER("Severity.ShapeShouldBeDropped")
	bb_severity_Severity *self=this;
	DBG_LOCAL(self,"Self")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/severity.monkey<117>");
	bool t_=f_lastTime>=f_nextShapeDropTime;
	return t_;
}
int bb_severity_Severity::m_RandomType(){
	DBG_ENTER("Severity.RandomType")
	bb_severity_Severity *self=this;
	DBG_LOCAL(self,"Self")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/severity.monkey<142>");
	int t_newType=0;
	DBG_LOCAL(t_newType,"newType")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/severity.monkey<143>");
	bool t_finished=false;
	DBG_LOCAL(t_finished,"finished")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/severity.monkey<156>");
	do{
		DBG_BLOCK();
		DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/severity.monkey<146>");
		t_finished=true;
		DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/severity.monkey<147>");
		t_newType=int(bb_random_Rnd2(FLOAT(0.0),Float(f_activatedShapes)));
		DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/severity.monkey<149>");
		if(f_lastTypes->m_Length()>=2){
			DBG_BLOCK();
			DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/severity.monkey<150>");
			if(f_lastTypes->m_Get2(0)==t_newType){
				DBG_BLOCK();
				DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/severity.monkey<151>");
				if(f_lastTypes->m_Get2(1)==t_newType){
					DBG_BLOCK();
					DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/severity.monkey<152>");
					t_finished=false;
				}
			}
		}
	}while(!(t_finished==true));
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/severity.monkey<158>");
	if(f_lastTypes->m_Length()>=2){
		DBG_BLOCK();
		f_lastTypes->m_Remove4(0);
	}
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/severity.monkey<159>");
	f_lastTypes->m_Push(t_newType);
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/severity.monkey<160>");
	int t_=f_shapeTypes.At(t_newType);
	return t_;
}
int bb_severity_Severity::m_RandomLane(){
	DBG_ENTER("Severity.RandomLane")
	bb_severity_Severity *self=this;
	DBG_LOCAL(self,"Self")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/severity.monkey<185>");
	int t_newLane=0;
	DBG_LOCAL(t_newLane,"newLane")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/severity.monkey<186>");
	int t_now=bb_app_Millisecs();
	DBG_LOCAL(t_now,"now")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/severity.monkey<190>");
	do{
		DBG_BLOCK();
		DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/severity.monkey<189>");
		t_newLane=int(bb_random_Rnd2(FLOAT(0.0),FLOAT(4.0)));
	}while(!(f_laneTimes.At(t_newLane)<t_now));
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/severity.monkey<192>");
	f_laneTimes.At(t_newLane)=t_now+1400;
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/severity.monkey<194>");
	return t_newLane;
}
String bb_severity_Severity::m_ToString(){
	DBG_ENTER("Severity.ToString")
	bb_severity_Severity *self=this;
	DBG_LOCAL(self,"Self")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/severity.monkey<48>");
	if(f_level==0){
		DBG_BLOCK();
		DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/severity.monkey<49>");
		return String(L"easy");
	}else{
		DBG_BLOCK();
		DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/severity.monkey<50>");
		if(f_level==1){
			DBG_BLOCK();
			DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/severity.monkey<51>");
			return String(L"norm");
		}else{
			DBG_BLOCK();
			DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/severity.monkey<53>");
			return String(L"adv.");
		}
	}
}
void bb_severity_Severity::mark(){
	Object::mark();
	gc_mark_q(f_lastTypes);
	gc_mark_q(f_shapeTypes);
	gc_mark_q(f_laneTimes);
}
String bb_severity_Severity::debug(){
	String t="(Severity)\n";
	t+=dbg_decl("level",&f_level);
	t+=dbg_decl("nextChuteAdvanceTime",&f_nextChuteAdvanceTime);
	t+=dbg_decl("nextShapeDropTime",&f_nextShapeDropTime);
	t+=dbg_decl("lastTime",&f_lastTime);
	t+=dbg_decl("shapeTypes",&f_shapeTypes);
	t+=dbg_decl("laneTimes",&f_laneTimes);
	t+=dbg_decl("lastTypes",&f_lastTypes);
	t+=dbg_decl("activatedShapes",&f_activatedShapes);
	t+=dbg_decl("startTime",&f_startTime);
	t+=dbg_decl("slowDownDuration",&f_slowDownDuration);
	t+=dbg_decl("progress",&f_progress);
	return t;
}
bb_severity_Severity* bb_severity_globalSeverityInstance;
bb_severity_Severity* bb_severity_CurrentSeverity(){
	DBG_ENTER("CurrentSeverity")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/severity.monkey<12>");
	if(!((bb_severity_globalSeverityInstance)!=0)){
		DBG_BLOCK();
		gc_assign(bb_severity_globalSeverityInstance,(new bb_severity_Severity)->g_new());
	}
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/severity.monkey<13>");
	return bb_severity_globalSeverityInstance;
}
bb_slider_Slider::bb_slider_Slider(){
	f_images=Array<bb_graphics_Image* >();
	f_config=(new bb_list_IntList)->g_new();
	f_configArray=Array<int >();
	f_movementActive=false;
	f_movementStart=0;
	f_arrowLeft=0;
	f_arrowRight=0;
	f_posY=FLOAT(.0);
	f_direction=0;
}
bb_slider_Slider* bb_slider_Slider::g_new(){
	DBG_ENTER("Slider.new")
	bb_slider_Slider *self=this;
	DBG_LOCAL(self,"Self")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/slider.monkey<17>");
	bb_baseobject_BaseObject::g_new();
	return this;
}
void bb_slider_Slider::m_InitializeConfig(){
	DBG_ENTER("Slider.InitializeConfig")
	bb_slider_Slider *self=this;
	DBG_LOCAL(self,"Self")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/slider.monkey<147>");
	bb_severity_CurrentSeverity()->m_ConfigureSlider(f_config);
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/slider.monkey<148>");
	gc_assign(f_configArray,f_config->m_ToArray());
}
void bb_slider_Slider::m_Restart(){
	DBG_ENTER("Slider.Restart")
	bb_slider_Slider *self=this;
	DBG_LOCAL(self,"Self")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/slider.monkey<53>");
	m_InitializeConfig();
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/slider.monkey<54>");
	f_movementActive=false;
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/slider.monkey<55>");
	f_movementStart=0;
}
void bb_slider_Slider::m_OnCreate(bb_director_Director* t_director){
	DBG_ENTER("Slider.OnCreate")
	bb_slider_Slider *self=this;
	DBG_LOCAL(self,"Self")
	DBG_LOCAL(t_director,"director")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/slider.monkey<37>");
	bb_graphics_Image* t_[]={bb_graphics_LoadImage(String(L"circle_outside.png"),1,bb_graphics_Image::g_DefaultFlags),bb_graphics_LoadImage(String(L"plus_outside.png"),1,bb_graphics_Image::g_DefaultFlags),bb_graphics_LoadImage(String(L"star_outside.png"),1,bb_graphics_Image::g_DefaultFlags),bb_graphics_LoadImage(String(L"tire_outside.png"),1,bb_graphics_Image::g_DefaultFlags)};
	gc_assign(f_images,Array<bb_graphics_Image* >(t_,4));
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/slider.monkey<39>");
	gc_assign(f_arrowLeft,(new bb_sprite_Sprite)->g_new(String(L"arrow_ingame.png"),0));
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/slider.monkey<40>");
	f_arrowLeft->m_pos()->f_y=t_director->m_size()->f_y-f_arrowLeft->m_size()->f_y;
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/slider.monkey<41>");
	bb_vector2d_Vector2D* t_2=f_arrowLeft->m_pos();
	t_2->f_x=t_2->f_x-FLOAT(4.0);
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/slider.monkey<43>");
	gc_assign(f_arrowRight,(new bb_sprite_Sprite)->g_new(String(L"arrow_ingame2.png"),0));
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/slider.monkey<44>");
	f_arrowRight->m_pos2(t_director->m_size()->m_Copy()->m_Sub(f_arrowRight->m_size()));
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/slider.monkey<45>");
	bb_vector2d_Vector2D* t_3=f_arrowRight->m_pos();
	t_3->f_x=t_3->f_x+FLOAT(4.0);
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/slider.monkey<47>");
	bb_partial_Partial::m_OnCreate(t_director);
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/slider.monkey<49>");
	f_posY=t_director->m_size()->f_y-Float(f_images.At(0)->m_Height())-FLOAT(60.0);
}
bb_vector2d_Vector2D* bb_slider_Slider::m_pos(){
	DBG_ENTER("Slider.pos")
	bb_slider_Slider *self=this;
	DBG_LOCAL(self,"Self")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/slider.monkey<73>");
	bb_vector2d_Vector2D* t_=f_arrowLeft->m_pos();
	return t_;
}
Float bb_slider_Slider::m_GetMovementOffset(){
	DBG_ENTER("Slider.GetMovementOffset")
	bb_slider_Slider *self=this;
	DBG_LOCAL(self,"Self")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/slider.monkey<107>");
	if(!f_movementActive){
		DBG_BLOCK();
		return FLOAT(0.0);
	}
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/slider.monkey<109>");
	int t_now=bb_app_Millisecs();
	DBG_LOCAL(t_now,"now")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/slider.monkey<110>");
	Float t_percent=FLOAT(100.0);
	DBG_LOCAL(t_percent,"percent")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/slider.monkey<111>");
	Float t_movementOffset=FLOAT(0.0);
	DBG_LOCAL(t_movementOffset,"movementOffset")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/slider.monkey<113>");
	if(f_movementStart+300>=t_now){
		DBG_BLOCK();
		DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/slider.monkey<114>");
		t_percent=(Float)ceil(FLOAT(0.33333333333333331)*Float(t_now-f_movementStart));
		DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/slider.monkey<115>");
		t_movementOffset=(Float)ceil(Float(f_images.At(0)->m_Width())/FLOAT(100.0)*t_percent);
	}
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/slider.monkey<118>");
	if(f_direction==1){
		DBG_BLOCK();
		DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/slider.monkey<119>");
		t_movementOffset=t_movementOffset*FLOAT(-1.0);
	}
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/slider.monkey<122>");
	if(f_movementStart+300<t_now){
		DBG_BLOCK();
		DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/slider.monkey<123>");
		f_movementActive=false;
		DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/slider.monkey<124>");
		if(f_direction==1){
			DBG_BLOCK();
			DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/slider.monkey<125>");
			int t_tmpType=f_config->m_First();
			DBG_LOCAL(t_tmpType,"tmpType")
			DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/slider.monkey<126>");
			f_config->m_RemoveFirst();
			DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/slider.monkey<127>");
			f_config->m_AddLast4(t_tmpType);
			DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/slider.monkey<128>");
			gc_assign(f_configArray,f_config->m_ToArray());
		}else{
			DBG_BLOCK();
			DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/slider.monkey<130>");
			int t_tmpType2=f_config->m_Last();
			DBG_LOCAL(t_tmpType2,"tmpType")
			DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/slider.monkey<131>");
			f_config->m_RemoveLast();
			DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/slider.monkey<132>");
			f_config->m_AddFirst2(t_tmpType2);
			DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/slider.monkey<133>");
			gc_assign(f_configArray,f_config->m_ToArray());
		}
	}
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/slider.monkey<137>");
	return t_movementOffset;
}
void bb_slider_Slider::m_OnRender(){
	DBG_ENTER("Slider.OnRender")
	bb_slider_Slider *self=this;
	DBG_LOCAL(self,"Self")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/slider.monkey<77>");
	Float t_posX=FLOAT(44.0)+m_GetMovementOffset();
	DBG_LOCAL(t_posX,"posX")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/slider.monkey<78>");
	bb_graphics_Image* t_img=0;
	DBG_LOCAL(t_img,"img")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/slider.monkey<80>");
	bb_graphics_PushMatrix();
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/slider.monkey<81>");
	bb_graphics_SetColor(FLOAT(255.0),FLOAT(255.0),FLOAT(255.0));
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/slider.monkey<82>");
	bb_graphics_DrawRect(FLOAT(0.0),f_posY+Float(f_images.At(f_config->m_First())->m_Height()),m_director()->m_size()->f_x,m_director()->m_size()->f_y);
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/slider.monkey<83>");
	bb_graphics_PopMatrix();
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/slider.monkey<85>");
	if(t_posX>FLOAT(44.0)){
		DBG_BLOCK();
		DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/slider.monkey<86>");
		t_img=f_images.At(f_config->m_Last());
		DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/slider.monkey<87>");
		bb_graphics_DrawImage(t_img,Float(t_img->m_Width()*-1)+t_posX,f_posY,0);
	}
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/slider.monkey<90>");
	if(t_posX<FLOAT(44.0)){
		DBG_BLOCK();
		DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/slider.monkey<91>");
		t_img=f_images.At(f_config->m_First());
		DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/slider.monkey<92>");
		bb_graphics_DrawImage(t_img,Float(t_img->m_Width()*4)+t_posX,f_posY,0);
	}
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/slider.monkey<95>");
	bb_list_Enumerator3* t_=f_config->m_ObjectEnumerator();
	while(t_->m_HasNext()){
		DBG_BLOCK();
		int t_type=t_->m_NextObject();
		DBG_LOCAL(t_type,"type")
		DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/slider.monkey<96>");
		bb_graphics_DrawImage(f_images.At(t_type),t_posX,f_posY,0);
		DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/slider.monkey<97>");
		t_posX=t_posX+Float(f_images.At(t_type)->m_Width());
	}
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/slider.monkey<100>");
	f_arrowRight->m_OnRender();
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/slider.monkey<101>");
	f_arrowLeft->m_OnRender();
}
bool bb_slider_Slider::m_Match(bb_shape_Shape* t_shape){
	DBG_ENTER("Slider.Match")
	bb_slider_Slider *self=this;
	DBG_LOCAL(self,"Self")
	DBG_LOCAL(t_shape,"shape")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/slider.monkey<141>");
	if(f_movementActive){
		DBG_BLOCK();
		return false;
	}
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/slider.monkey<142>");
	if(t_shape->f_type==f_configArray.At(t_shape->f_lane)){
		DBG_BLOCK();
		return true;
	}
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/slider.monkey<143>");
	return false;
}
void bb_slider_Slider::m_SlideLeft(){
	DBG_ENTER("Slider.SlideLeft")
	bb_slider_Slider *self=this;
	DBG_LOCAL(self,"Self")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/slider.monkey<59>");
	if(f_movementActive){
		DBG_BLOCK();
		return;
	}
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/slider.monkey<60>");
	f_direction=1;
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/slider.monkey<61>");
	f_movementStart=bb_app_Millisecs();
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/slider.monkey<62>");
	f_movementActive=true;
}
void bb_slider_Slider::m_SlideRight(){
	DBG_ENTER("Slider.SlideRight")
	bb_slider_Slider *self=this;
	DBG_LOCAL(self,"Self")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/slider.monkey<66>");
	if(f_movementActive){
		DBG_BLOCK();
		return;
	}
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/slider.monkey<67>");
	f_direction=2;
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/slider.monkey<68>");
	f_movementStart=bb_app_Millisecs();
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/slider.monkey<69>");
	f_movementActive=true;
}
void bb_slider_Slider::mark(){
	bb_baseobject_BaseObject::mark();
	gc_mark_q(f_images);
	gc_mark_q(f_config);
	gc_mark_q(f_configArray);
	gc_mark_q(f_arrowLeft);
	gc_mark_q(f_arrowRight);
}
String bb_slider_Slider::debug(){
	String t="(Slider)\n";
	t=bb_baseobject_BaseObject::debug()+t;
	t+=dbg_decl("config",&f_config);
	t+=dbg_decl("configArray",&f_configArray);
	t+=dbg_decl("direction",&f_direction);
	t+=dbg_decl("movementStart",&f_movementStart);
	t+=dbg_decl("movementActive",&f_movementActive);
	t+=dbg_decl("posY",&f_posY);
	t+=dbg_decl("arrowLeft",&f_arrowLeft);
	t+=dbg_decl("arrowRight",&f_arrowRight);
	t+=dbg_decl("images",&f_images);
	return t;
}
bb_font_Font::bb_font_Font(){
	f_name=String();
	f__align=0;
	f_color=0;
	f__text=String();
	f_fontStore=(new bb_map_StringMap5)->g_new();
	f_recalculateSize=false;
}
bb_font_Font* bb_font_Font::g_new(String t_fontName,bb_vector2d_Vector2D* t_pos){
	DBG_ENTER("Font.new")
	bb_font_Font *self=this;
	DBG_LOCAL(self,"Self")
	DBG_LOCAL(t_fontName,"fontName")
	DBG_LOCAL(t_pos,"pos")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/font.monkey<30>");
	bb_baseobject_BaseObject::g_new();
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/font.monkey<31>");
	if(t_pos==0){
		DBG_BLOCK();
		t_pos=(new bb_vector2d_Vector2D)->g_new(FLOAT(0.0),FLOAT(0.0));
	}
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/font.monkey<33>");
	this->f_name=t_fontName;
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/font.monkey<34>");
	this->m_pos2(t_pos);
	return this;
}
bb_font_Font* bb_font_Font::g_new2(){
	DBG_ENTER("Font.new")
	bb_font_Font *self=this;
	DBG_LOCAL(self,"Self")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/font.monkey<14>");
	bb_baseobject_BaseObject::g_new();
	return this;
}
void bb_font_Font::m_align(int t_newAlign){
	DBG_ENTER("Font.align")
	bb_font_Font *self=this;
	DBG_LOCAL(self,"Self")
	DBG_LOCAL(t_newAlign,"newAlign")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/font.monkey<82>");
	int t_1=t_newAlign;
	DBG_LOCAL(t_1,"1")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/font.monkey<83>");
	if(t_1==0 || t_1==1 || t_1==2){
		DBG_BLOCK();
		DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/font.monkey<84>");
		f__align=t_newAlign;
	}else{
		DBG_BLOCK();
		DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/font.monkey<86>");
		Error(String(L"Invalid align value specified."));
	}
}
int bb_font_Font::m_align2(){
	DBG_ENTER("Font.align")
	bb_font_Font *self=this;
	DBG_LOCAL(self,"Self")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/font.monkey<91>");
	return f__align;
}
bb_angelfont_AngelFont* bb_font_Font::m_font(){
	DBG_ENTER("Font.font")
	bb_font_Font *self=this;
	DBG_LOCAL(self,"Self")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/font.monkey<97>");
	bb_angelfont_AngelFont* t_=f_fontStore->m_Get(f_name);
	return t_;
}
void bb_font_Font::m_text(String t_newText){
	DBG_ENTER("Font.text")
	bb_font_Font *self=this;
	DBG_LOCAL(self,"Self")
	DBG_LOCAL(t_newText,"newText")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/font.monkey<66>");
	f__text=t_newText;
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/font.monkey<67>");
	if(!((m_font())!=0)){
		DBG_BLOCK();
		DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/font.monkey<68>");
		f_recalculateSize=true;
		return;
	}
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/font.monkey<72>");
	Float t_width=Float(m_font()->m_TextWidth(t_newText));
	DBG_LOCAL(t_width,"width")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/font.monkey<73>");
	Float t_height=Float(m_font()->m_TextHeight(t_newText));
	DBG_LOCAL(t_height,"height")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/font.monkey<74>");
	m_size2((new bb_vector2d_Vector2D)->g_new(t_width,t_height));
}
String bb_font_Font::m_text2(){
	DBG_ENTER("Font.text")
	bb_font_Font *self=this;
	DBG_LOCAL(self,"Self")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/font.monkey<78>");
	return f__text;
}
void bb_font_Font::m_OnCreate(bb_director_Director* t_director){
	DBG_ENTER("Font.OnCreate")
	bb_font_Font *self=this;
	DBG_LOCAL(self,"Self")
	DBG_LOCAL(t_director,"director")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/font.monkey<38>");
	bb_partial_Partial::m_OnCreate(t_director);
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/font.monkey<40>");
	if(!f_fontStore->m_Contains(f_name)){
		DBG_BLOCK();
		DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/font.monkey<41>");
		f_fontStore->m_Set7(f_name,(new bb_angelfont_AngelFont)->g_new(String()));
		DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/font.monkey<42>");
		f_fontStore->m_Get(f_name)->m_LoadFont(f_name);
	}
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/font.monkey<45>");
	if(f_recalculateSize){
		DBG_BLOCK();
		DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/font.monkey<46>");
		f_recalculateSize=false;
		DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/font.monkey<47>");
		m_text(f__text);
	}
}
void bb_font_Font::m_OnRender(){
	DBG_ENTER("Font.OnRender")
	bb_font_Font *self=this;
	DBG_LOCAL(self,"Self")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/font.monkey<52>");
	if((f_color)!=0){
		DBG_BLOCK();
		f_color->m_Activate();
	}
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/font.monkey<53>");
	m_font()->m_DrawText2(f__text,int(m_pos()->f_x),int(m_pos()->f_y),f__align);
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/font.monkey<54>");
	if((f_color)!=0){
		DBG_BLOCK();
		f_color->m_Deactivate();
	}
}
void bb_font_Font::mark(){
	bb_baseobject_BaseObject::mark();
	gc_mark_q(f_color);
	gc_mark_q(f_fontStore);
}
String bb_font_Font::debug(){
	String t="(Font)\n";
	t=bb_baseobject_BaseObject::debug()+t;
	t+=dbg_decl("_align",&f__align);
	t+=dbg_decl("_text",&f__text);
	t+=dbg_decl("fontStore",&f_fontStore);
	t+=dbg_decl("name",&f_name);
	t+=dbg_decl("recalculateSize",&f_recalculateSize);
	t+=dbg_decl("color",&f_color);
	return t;
}
bb_angelfont_AngelFont::bb_angelfont_AngelFont(){
	f_chars=Array<bb_char_Char* >(256);
	f_useKerning=true;
	f_kernPairs=(new bb_map_StringMap3)->g_new();
	f_iniText=String();
	f_height=0;
	f_heightOffset=9999;
	f_image=0;
	f_name=String();
	f_xOffset=0;
}
int bb_angelfont_AngelFont::m_TextWidth(String t_txt){
	DBG_ENTER("AngelFont.TextWidth")
	bb_angelfont_AngelFont *self=this;
	DBG_LOCAL(self,"Self")
	DBG_LOCAL(t_txt,"txt")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/vendor/angelfont/angelfont.monkey<250>");
	String t_prevChar=String();
	DBG_LOCAL(t_prevChar,"prevChar")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/vendor/angelfont/angelfont.monkey<251>");
	int t_width=0;
	DBG_LOCAL(t_width,"width")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/vendor/angelfont/angelfont.monkey<252>");
	for(int t_i=0;t_i<t_txt.Length();t_i=t_i+1){
		DBG_BLOCK();
		DBG_LOCAL(t_i,"i")
		DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/vendor/angelfont/angelfont.monkey<253>");
		int t_asc=(int)t_txt[t_i];
		DBG_LOCAL(t_asc,"asc")
		DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/vendor/angelfont/angelfont.monkey<254>");
		bb_char_Char* t_ac=f_chars.At(t_asc);
		DBG_LOCAL(t_ac,"ac")
		DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/vendor/angelfont/angelfont.monkey<255>");
		String t_thisChar=String((Char)(t_asc),1);
		DBG_LOCAL(t_thisChar,"thisChar")
		DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/vendor/angelfont/angelfont.monkey<256>");
		if(t_ac!=0){
			DBG_BLOCK();
			DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/vendor/angelfont/angelfont.monkey<257>");
			if(f_useKerning){
				DBG_BLOCK();
				DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/vendor/angelfont/angelfont.monkey<258>");
				String t_key=t_prevChar+String(L"_")+t_thisChar;
				DBG_LOCAL(t_key,"key")
				DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/vendor/angelfont/angelfont.monkey<259>");
				if(f_kernPairs->m_Contains(t_key)){
					DBG_BLOCK();
					DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/vendor/angelfont/angelfont.monkey<261>");
					t_width+=f_kernPairs->m_Get(t_key)->f_amount;
				}
			}
			DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/vendor/angelfont/angelfont.monkey<265>");
			t_width+=t_ac->f_xAdvance;
			DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/vendor/angelfont/angelfont.monkey<266>");
			t_prevChar=t_thisChar;
		}
	}
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/vendor/angelfont/angelfont.monkey<269>");
	return t_width;
}
int bb_angelfont_AngelFont::m_TextHeight(String t_txt){
	DBG_ENTER("AngelFont.TextHeight")
	bb_angelfont_AngelFont *self=this;
	DBG_LOCAL(self,"Self")
	DBG_LOCAL(t_txt,"txt")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/vendor/angelfont/angelfont.monkey<273>");
	int t_h=0;
	DBG_LOCAL(t_h,"h")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/vendor/angelfont/angelfont.monkey<274>");
	for(int t_i=0;t_i<t_txt.Length();t_i=t_i+1){
		DBG_BLOCK();
		DBG_LOCAL(t_i,"i")
		DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/vendor/angelfont/angelfont.monkey<275>");
		int t_asc=(int)t_txt[t_i];
		DBG_LOCAL(t_asc,"asc")
		DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/vendor/angelfont/angelfont.monkey<276>");
		bb_char_Char* t_ac=f_chars.At(t_asc);
		DBG_LOCAL(t_ac,"ac")
		DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/vendor/angelfont/angelfont.monkey<277>");
		if(t_ac->f_height>t_h){
			DBG_BLOCK();
			t_h=t_ac->f_height;
		}
	}
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/vendor/angelfont/angelfont.monkey<279>");
	return t_h;
}
String bb_angelfont_AngelFont::g_error;
bb_angelfont_AngelFont* bb_angelfont_AngelFont::g_current;
void bb_angelfont_AngelFont::m_LoadFont(String t_url){
	DBG_ENTER("AngelFont.LoadFont")
	bb_angelfont_AngelFont *self=this;
	DBG_LOCAL(self,"Self")
	DBG_LOCAL(t_url,"url")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/vendor/angelfont/angelfont.monkey<61>");
	g_error=String();
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/vendor/angelfont/angelfont.monkey<62>");
	gc_assign(g_current,this);
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/vendor/angelfont/angelfont.monkey<63>");
	f_iniText=bb_app_LoadString(t_url+String(L".txt"));
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/vendor/angelfont/angelfont.monkey<64>");
	Array<String > t_lines=f_iniText.Split(String((Char)(10),1));
	DBG_LOCAL(t_lines,"lines")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/vendor/angelfont/angelfont.monkey<65>");
	Array<String > t_=t_lines;
	int t_2=0;
	while(t_2<t_.Length()){
		DBG_BLOCK();
		String t_line=t_.At(t_2);
		t_2=t_2+1;
		DBG_LOCAL(t_line,"line")
		DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/vendor/angelfont/angelfont.monkey<67>");
		t_line=t_line.Trim();
		DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/vendor/angelfont/angelfont.monkey<69>");
		if(t_line.StartsWith(String(L"id,")) || t_line==String()){
			DBG_BLOCK();
			continue;
		}
		DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/vendor/angelfont/angelfont.monkey<70>");
		if(t_line.StartsWith(String(L"first,"))){
			DBG_BLOCK();
			DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/vendor/angelfont/angelfont.monkey<72>");
			continue;
		}
		DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/vendor/angelfont/angelfont.monkey<74>");
		Array<String > t_data=t_line.Split(String(L","));
		DBG_LOCAL(t_data,"data")
		DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/vendor/angelfont/angelfont.monkey<76>");
		for(int t_i=0;t_i<t_data.Length();t_i=t_i+1){
			DBG_BLOCK();
			DBG_LOCAL(t_i,"i")
			DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/vendor/angelfont/angelfont.monkey<77>");
			t_data.At(t_i)=t_data.At(t_i).Trim();
		}
		DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/vendor/angelfont/angelfont.monkey<80>");
		g_error=g_error+(String(t_data.Length())+String(L","));
		DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/vendor/angelfont/angelfont.monkey<81>");
		if(t_data.Length()>0){
			DBG_BLOCK();
			DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/vendor/angelfont/angelfont.monkey<82>");
			if(t_data.Length()==3){
				DBG_BLOCK();
				DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/vendor/angelfont/angelfont.monkey<84>");
				f_kernPairs->m_Insert(String((Char)((t_data.At(0)).ToInt()),1)+String(L"_")+String((Char)((t_data.At(1)).ToInt()),1),(new bb_kernpair_KernPair)->g_new((t_data.At(0)).ToInt(),(t_data.At(1)).ToInt(),(t_data.At(2)).ToInt()));
			}else{
				DBG_BLOCK();
				DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/vendor/angelfont/angelfont.monkey<86>");
				if(t_data.Length()>=8){
					DBG_BLOCK();
					DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/vendor/angelfont/angelfont.monkey<87>");
					gc_assign(f_chars.At((t_data.At(0)).ToInt()),(new bb_char_Char)->g_new((t_data.At(1)).ToInt(),(t_data.At(2)).ToInt(),(t_data.At(3)).ToInt(),(t_data.At(4)).ToInt(),(t_data.At(5)).ToInt(),(t_data.At(6)).ToInt(),(t_data.At(7)).ToInt()));
					DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/vendor/angelfont/angelfont.monkey<88>");
					bb_char_Char* t_ch=f_chars.At((t_data.At(0)).ToInt());
					DBG_LOCAL(t_ch,"ch")
					DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/vendor/angelfont/angelfont.monkey<89>");
					if(t_ch->f_height>this->f_height){
						DBG_BLOCK();
						this->f_height=t_ch->f_height;
					}
					DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/vendor/angelfont/angelfont.monkey<90>");
					if(t_ch->f_yOffset<this->f_heightOffset){
						DBG_BLOCK();
						this->f_heightOffset=t_ch->f_yOffset;
					}
				}
			}
		}
	}
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/vendor/angelfont/angelfont.monkey<97>");
	gc_assign(f_image,bb_graphics_LoadImage(t_url+String(L".png"),1,bb_graphics_Image::g_DefaultFlags));
}
bb_map_StringMap5* bb_angelfont_AngelFont::g__list;
bb_angelfont_AngelFont* bb_angelfont_AngelFont::g_new(String t_url){
	DBG_ENTER("AngelFont.new")
	bb_angelfont_AngelFont *self=this;
	DBG_LOCAL(self,"Self")
	DBG_LOCAL(t_url,"url")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/vendor/angelfont/angelfont.monkey<48>");
	if(t_url!=String()){
		DBG_BLOCK();
		DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/vendor/angelfont/angelfont.monkey<49>");
		this->m_LoadFont(t_url);
		DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/vendor/angelfont/angelfont.monkey<50>");
		this->f_name=t_url;
		DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/vendor/angelfont/angelfont.monkey<51>");
		g__list->m_Insert3(t_url,this);
	}
	return this;
}
void bb_angelfont_AngelFont::m_DrawText(String t_txt,int t_x,int t_y){
	DBG_ENTER("AngelFont.DrawText")
	bb_angelfont_AngelFont *self=this;
	DBG_LOCAL(self,"Self")
	DBG_LOCAL(t_txt,"txt")
	DBG_LOCAL(t_x,"x")
	DBG_LOCAL(t_y,"y")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/vendor/angelfont/angelfont.monkey<134>");
	String t_prevChar=String();
	DBG_LOCAL(t_prevChar,"prevChar")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/vendor/angelfont/angelfont.monkey<135>");
	f_xOffset=0;
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/vendor/angelfont/angelfont.monkey<137>");
	for(int t_i=0;t_i<t_txt.Length();t_i=t_i+1){
		DBG_BLOCK();
		DBG_LOCAL(t_i,"i")
		DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/vendor/angelfont/angelfont.monkey<138>");
		int t_asc=(int)t_txt[t_i];
		DBG_LOCAL(t_asc,"asc")
		DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/vendor/angelfont/angelfont.monkey<139>");
		bb_char_Char* t_ac=f_chars.At(t_asc);
		DBG_LOCAL(t_ac,"ac")
		DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/vendor/angelfont/angelfont.monkey<140>");
		String t_thisChar=String((Char)(t_asc),1);
		DBG_LOCAL(t_thisChar,"thisChar")
		DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/vendor/angelfont/angelfont.monkey<141>");
		if(t_ac!=0){
			DBG_BLOCK();
			DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/vendor/angelfont/angelfont.monkey<142>");
			if(f_useKerning){
				DBG_BLOCK();
				DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/vendor/angelfont/angelfont.monkey<143>");
				String t_key=t_prevChar+String(L"_")+t_thisChar;
				DBG_LOCAL(t_key,"key")
				DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/vendor/angelfont/angelfont.monkey<144>");
				if(f_kernPairs->m_Contains(t_key)){
					DBG_BLOCK();
					DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/vendor/angelfont/angelfont.monkey<145>");
					f_xOffset+=f_kernPairs->m_Get(t_key)->f_amount;
				}
			}
			DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/vendor/angelfont/angelfont.monkey<148>");
			t_ac->m_Draw(f_image,t_x+f_xOffset,t_y);
			DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/vendor/angelfont/angelfont.monkey<149>");
			f_xOffset+=t_ac->f_xAdvance;
			DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/vendor/angelfont/angelfont.monkey<150>");
			t_prevChar=t_thisChar;
		}
	}
}
void bb_angelfont_AngelFont::m_DrawText2(String t_txt,int t_x,int t_y,int t_align){
	DBG_ENTER("AngelFont.DrawText")
	bb_angelfont_AngelFont *self=this;
	DBG_LOCAL(self,"Self")
	DBG_LOCAL(t_txt,"txt")
	DBG_LOCAL(t_x,"x")
	DBG_LOCAL(t_y,"y")
	DBG_LOCAL(t_align,"align")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/vendor/angelfont/angelfont.monkey<156>");
	f_xOffset=0;
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/vendor/angelfont/angelfont.monkey<157>");
	int t_1=t_align;
	DBG_LOCAL(t_1,"1")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/vendor/angelfont/angelfont.monkey<158>");
	if(t_1==1){
		DBG_BLOCK();
		DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/vendor/angelfont/angelfont.monkey<159>");
		m_DrawText(t_txt,t_x-m_TextWidth(t_txt)/2,t_y);
	}else{
		DBG_BLOCK();
		DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/vendor/angelfont/angelfont.monkey<160>");
		if(t_1==2){
			DBG_BLOCK();
			DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/vendor/angelfont/angelfont.monkey<161>");
			m_DrawText(t_txt,t_x-m_TextWidth(t_txt),t_y);
		}else{
			DBG_BLOCK();
			DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/vendor/angelfont/angelfont.monkey<162>");
			if(t_1==0){
				DBG_BLOCK();
				DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/vendor/angelfont/angelfont.monkey<164>");
				m_DrawText(t_txt,t_x,t_y);
			}
		}
	}
}
void bb_angelfont_AngelFont::mark(){
	Object::mark();
	gc_mark_q(f_chars);
	gc_mark_q(f_kernPairs);
	gc_mark_q(f_image);
}
String bb_angelfont_AngelFont::debug(){
	String t="(AngelFont)\n";
	t+=dbg_decl("_list",&bb_angelfont_AngelFont::g__list);
	t+=dbg_decl("image",&f_image);
	t+=dbg_decl("chars",&f_chars);
	t+=dbg_decl("kernPairs",&f_kernPairs);
	t+=dbg_decl("iniText",&f_iniText);
	t+=dbg_decl("xOffset",&f_xOffset);
	t+=dbg_decl("current",&bb_angelfont_AngelFont::g_current);
	t+=dbg_decl("error",&bb_angelfont_AngelFont::g_error);
	t+=dbg_decl("name",&f_name);
	t+=dbg_decl("useKerning",&f_useKerning);
	t+=dbg_decl("height",&f_height);
	t+=dbg_decl("heightOffset",&f_heightOffset);
	return t;
}
bb_color_Color::bb_color_Color(){
	f_red=FLOAT(.0);
	f_green=FLOAT(.0);
	f_blue=FLOAT(.0);
	f_alpha=FLOAT(.0);
	f_oldColor=0;
}
bb_color_Color* bb_color_Color::g_new(Float t_red,Float t_green,Float t_blue,Float t_alpha){
	DBG_ENTER("Color.new")
	bb_color_Color *self=this;
	DBG_LOCAL(self,"Self")
	DBG_LOCAL(t_red,"red")
	DBG_LOCAL(t_green,"green")
	DBG_LOCAL(t_blue,"blue")
	DBG_LOCAL(t_alpha,"alpha")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/color.monkey<22>");
	this->f_red=t_red;
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/color.monkey<23>");
	this->f_green=t_green;
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/color.monkey<24>");
	this->f_blue=t_blue;
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/color.monkey<25>");
	this->f_alpha=t_alpha;
	return this;
}
bb_color_Color* bb_color_Color::g_new2(){
	DBG_ENTER("Color.new")
	bb_color_Color *self=this;
	DBG_LOCAL(self,"Self")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/color.monkey<9>");
	return this;
}
void bb_color_Color::m_Set6(bb_color_Color* t_color){
	DBG_ENTER("Color.Set")
	bb_color_Color *self=this;
	DBG_LOCAL(self,"Self")
	DBG_LOCAL(t_color,"color")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/color.monkey<47>");
	bb_graphics_SetColor(t_color->f_red,t_color->f_green,t_color->f_blue);
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/color.monkey<48>");
	bb_graphics_SetAlpha(t_color->f_alpha);
}
void bb_color_Color::m_Activate(){
	DBG_ENTER("Color.Activate")
	bb_color_Color *self=this;
	DBG_LOCAL(self,"Self")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/color.monkey<29>");
	if(!((f_oldColor)!=0)){
		DBG_BLOCK();
		gc_assign(f_oldColor,(new bb_color_Color)->g_new(FLOAT(0.0),FLOAT(0.0),FLOAT(0.0),FLOAT(0.0)));
	}
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/color.monkey<31>");
	Array<Float > t_colorStack=bb_graphics_GetColor();
	DBG_LOCAL(t_colorStack,"colorStack")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/color.monkey<32>");
	f_oldColor->f_red=t_colorStack.At(0);
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/color.monkey<33>");
	f_oldColor->f_green=t_colorStack.At(1);
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/color.monkey<34>");
	f_oldColor->f_blue=t_colorStack.At(2);
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/color.monkey<35>");
	f_oldColor->f_alpha=bb_graphics_GetAlpha();
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/color.monkey<37>");
	m_Set6(this);
}
void bb_color_Color::m_Deactivate(){
	DBG_ENTER("Color.Deactivate")
	bb_color_Color *self=this;
	DBG_LOCAL(self,"Self")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/color.monkey<41>");
	if((f_oldColor)!=0){
		DBG_BLOCK();
		m_Set6(f_oldColor);
	}
}
void bb_color_Color::mark(){
	Object::mark();
	gc_mark_q(f_oldColor);
}
String bb_color_Color::debug(){
	String t="(Color)\n";
	t+=dbg_decl("oldColor",&f_oldColor);
	t+=dbg_decl("red",&f_red);
	t+=dbg_decl("green",&f_green);
	t+=dbg_decl("blue",&f_blue);
	t+=dbg_decl("alpha",&f_alpha);
	return t;
}
bb_map_Map5::bb_map_Map5(){
	f_root=0;
}
bb_map_Map5* bb_map_Map5::g_new(){
	DBG_ENTER("Map.new")
	bb_map_Map5 *self=this;
	DBG_LOCAL(self,"Self")
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<7>");
	return this;
}
bb_map_Node5* bb_map_Map5::m_FindNode(String t_key){
	DBG_ENTER("Map.FindNode")
	bb_map_Map5 *self=this;
	DBG_LOCAL(self,"Self")
	DBG_LOCAL(t_key,"key")
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<157>");
	bb_map_Node5* t_node=f_root;
	DBG_LOCAL(t_node,"node")
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<159>");
	while((t_node)!=0){
		DBG_BLOCK();
		DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<160>");
		int t_cmp=m_Compare(t_key,t_node->f_key);
		DBG_LOCAL(t_cmp,"cmp")
		DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<161>");
		if(t_cmp>0){
			DBG_BLOCK();
			DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<162>");
			t_node=t_node->f_right;
		}else{
			DBG_BLOCK();
			DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<163>");
			if(t_cmp<0){
				DBG_BLOCK();
				DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<164>");
				t_node=t_node->f_left;
			}else{
				DBG_BLOCK();
				DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<166>");
				return t_node;
			}
		}
	}
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<169>");
	return t_node;
}
bb_angelfont_AngelFont* bb_map_Map5::m_Get(String t_key){
	DBG_ENTER("Map.Get")
	bb_map_Map5 *self=this;
	DBG_LOCAL(self,"Self")
	DBG_LOCAL(t_key,"key")
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<101>");
	bb_map_Node5* t_node=m_FindNode(t_key);
	DBG_LOCAL(t_node,"node")
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<102>");
	if((t_node)!=0){
		DBG_BLOCK();
		return t_node->f_value;
	}
	return 0;
}
bool bb_map_Map5::m_Contains(String t_key){
	DBG_ENTER("Map.Contains")
	bb_map_Map5 *self=this;
	DBG_LOCAL(self,"Self")
	DBG_LOCAL(t_key,"key")
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<25>");
	bool t_=m_FindNode(t_key)!=0;
	return t_;
}
int bb_map_Map5::m_RotateLeft5(bb_map_Node5* t_node){
	DBG_ENTER("Map.RotateLeft")
	bb_map_Map5 *self=this;
	DBG_LOCAL(self,"Self")
	DBG_LOCAL(t_node,"node")
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<251>");
	bb_map_Node5* t_child=t_node->f_right;
	DBG_LOCAL(t_child,"child")
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<252>");
	gc_assign(t_node->f_right,t_child->f_left);
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<253>");
	if((t_child->f_left)!=0){
		DBG_BLOCK();
		DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<254>");
		gc_assign(t_child->f_left->f_parent,t_node);
	}
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<256>");
	gc_assign(t_child->f_parent,t_node->f_parent);
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<257>");
	if((t_node->f_parent)!=0){
		DBG_BLOCK();
		DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<258>");
		if(t_node==t_node->f_parent->f_left){
			DBG_BLOCK();
			DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<259>");
			gc_assign(t_node->f_parent->f_left,t_child);
		}else{
			DBG_BLOCK();
			DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<261>");
			gc_assign(t_node->f_parent->f_right,t_child);
		}
	}else{
		DBG_BLOCK();
		DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<264>");
		gc_assign(f_root,t_child);
	}
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<266>");
	gc_assign(t_child->f_left,t_node);
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<267>");
	gc_assign(t_node->f_parent,t_child);
	return 0;
}
int bb_map_Map5::m_RotateRight5(bb_map_Node5* t_node){
	DBG_ENTER("Map.RotateRight")
	bb_map_Map5 *self=this;
	DBG_LOCAL(self,"Self")
	DBG_LOCAL(t_node,"node")
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<271>");
	bb_map_Node5* t_child=t_node->f_left;
	DBG_LOCAL(t_child,"child")
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<272>");
	gc_assign(t_node->f_left,t_child->f_right);
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<273>");
	if((t_child->f_right)!=0){
		DBG_BLOCK();
		DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<274>");
		gc_assign(t_child->f_right->f_parent,t_node);
	}
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<276>");
	gc_assign(t_child->f_parent,t_node->f_parent);
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<277>");
	if((t_node->f_parent)!=0){
		DBG_BLOCK();
		DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<278>");
		if(t_node==t_node->f_parent->f_right){
			DBG_BLOCK();
			DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<279>");
			gc_assign(t_node->f_parent->f_right,t_child);
		}else{
			DBG_BLOCK();
			DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<281>");
			gc_assign(t_node->f_parent->f_left,t_child);
		}
	}else{
		DBG_BLOCK();
		DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<284>");
		gc_assign(f_root,t_child);
	}
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<286>");
	gc_assign(t_child->f_right,t_node);
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<287>");
	gc_assign(t_node->f_parent,t_child);
	return 0;
}
int bb_map_Map5::m_InsertFixup5(bb_map_Node5* t_node){
	DBG_ENTER("Map.InsertFixup")
	bb_map_Map5 *self=this;
	DBG_LOCAL(self,"Self")
	DBG_LOCAL(t_node,"node")
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<212>");
	while(((t_node->f_parent)!=0) && t_node->f_parent->f_color==-1 && ((t_node->f_parent->f_parent)!=0)){
		DBG_BLOCK();
		DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<213>");
		if(t_node->f_parent==t_node->f_parent->f_parent->f_left){
			DBG_BLOCK();
			DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<214>");
			bb_map_Node5* t_uncle=t_node->f_parent->f_parent->f_right;
			DBG_LOCAL(t_uncle,"uncle")
			DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<215>");
			if(((t_uncle)!=0) && t_uncle->f_color==-1){
				DBG_BLOCK();
				DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<216>");
				t_node->f_parent->f_color=1;
				DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<217>");
				t_uncle->f_color=1;
				DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<218>");
				t_uncle->f_parent->f_color=-1;
				DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<219>");
				t_node=t_uncle->f_parent;
			}else{
				DBG_BLOCK();
				DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<221>");
				if(t_node==t_node->f_parent->f_right){
					DBG_BLOCK();
					DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<222>");
					t_node=t_node->f_parent;
					DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<223>");
					m_RotateLeft5(t_node);
				}
				DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<225>");
				t_node->f_parent->f_color=1;
				DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<226>");
				t_node->f_parent->f_parent->f_color=-1;
				DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<227>");
				m_RotateRight5(t_node->f_parent->f_parent);
			}
		}else{
			DBG_BLOCK();
			DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<230>");
			bb_map_Node5* t_uncle2=t_node->f_parent->f_parent->f_left;
			DBG_LOCAL(t_uncle2,"uncle")
			DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<231>");
			if(((t_uncle2)!=0) && t_uncle2->f_color==-1){
				DBG_BLOCK();
				DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<232>");
				t_node->f_parent->f_color=1;
				DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<233>");
				t_uncle2->f_color=1;
				DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<234>");
				t_uncle2->f_parent->f_color=-1;
				DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<235>");
				t_node=t_uncle2->f_parent;
			}else{
				DBG_BLOCK();
				DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<237>");
				if(t_node==t_node->f_parent->f_left){
					DBG_BLOCK();
					DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<238>");
					t_node=t_node->f_parent;
					DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<239>");
					m_RotateRight5(t_node);
				}
				DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<241>");
				t_node->f_parent->f_color=1;
				DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<242>");
				t_node->f_parent->f_parent->f_color=-1;
				DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<243>");
				m_RotateLeft5(t_node->f_parent->f_parent);
			}
		}
	}
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<247>");
	f_root->f_color=1;
	return 0;
}
bool bb_map_Map5::m_Set7(String t_key,bb_angelfont_AngelFont* t_value){
	DBG_ENTER("Map.Set")
	bb_map_Map5 *self=this;
	DBG_LOCAL(self,"Self")
	DBG_LOCAL(t_key,"key")
	DBG_LOCAL(t_value,"value")
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<29>");
	bb_map_Node5* t_node=f_root;
	DBG_LOCAL(t_node,"node")
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<30>");
	bb_map_Node5* t_parent=0;
	int t_cmp=0;
	DBG_LOCAL(t_parent,"parent")
	DBG_LOCAL(t_cmp,"cmp")
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<32>");
	while((t_node)!=0){
		DBG_BLOCK();
		DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<33>");
		t_parent=t_node;
		DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<34>");
		t_cmp=m_Compare(t_key,t_node->f_key);
		DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<35>");
		if(t_cmp>0){
			DBG_BLOCK();
			DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<36>");
			t_node=t_node->f_right;
		}else{
			DBG_BLOCK();
			DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<37>");
			if(t_cmp<0){
				DBG_BLOCK();
				DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<38>");
				t_node=t_node->f_left;
			}else{
				DBG_BLOCK();
				DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<40>");
				gc_assign(t_node->f_value,t_value);
				DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<41>");
				return false;
			}
		}
	}
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<45>");
	t_node=(new bb_map_Node5)->g_new(t_key,t_value,-1,t_parent);
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<47>");
	if((t_parent)!=0){
		DBG_BLOCK();
		DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<48>");
		if(t_cmp>0){
			DBG_BLOCK();
			DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<49>");
			gc_assign(t_parent->f_right,t_node);
		}else{
			DBG_BLOCK();
			DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<51>");
			gc_assign(t_parent->f_left,t_node);
		}
		DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<53>");
		m_InsertFixup5(t_node);
	}else{
		DBG_BLOCK();
		DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<55>");
		gc_assign(f_root,t_node);
	}
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<57>");
	return true;
}
bool bb_map_Map5::m_Insert3(String t_key,bb_angelfont_AngelFont* t_value){
	DBG_ENTER("Map.Insert")
	bb_map_Map5 *self=this;
	DBG_LOCAL(self,"Self")
	DBG_LOCAL(t_key,"key")
	DBG_LOCAL(t_value,"value")
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<126>");
	bool t_=m_Set7(t_key,t_value);
	return t_;
}
void bb_map_Map5::mark(){
	Object::mark();
	gc_mark_q(f_root);
}
String bb_map_Map5::debug(){
	String t="(Map)\n";
	t+=dbg_decl("root",&f_root);
	return t;
}
bb_map_StringMap5::bb_map_StringMap5(){
}
bb_map_StringMap5* bb_map_StringMap5::g_new(){
	DBG_ENTER("StringMap.new")
	bb_map_StringMap5 *self=this;
	DBG_LOCAL(self,"Self")
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<551>");
	bb_map_Map5::g_new();
	return this;
}
int bb_map_StringMap5::m_Compare(String t_lhs,String t_rhs){
	DBG_ENTER("StringMap.Compare")
	bb_map_StringMap5 *self=this;
	DBG_LOCAL(self,"Self")
	DBG_LOCAL(t_lhs,"lhs")
	DBG_LOCAL(t_rhs,"rhs")
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<554>");
	int t_=t_lhs.Compare(t_rhs);
	return t_;
}
void bb_map_StringMap5::mark(){
	bb_map_Map5::mark();
}
String bb_map_StringMap5::debug(){
	String t="(StringMap)\n";
	t=bb_map_Map5::debug()+t;
	return t;
}
bb_map_Node5::bb_map_Node5(){
	f_key=String();
	f_right=0;
	f_left=0;
	f_value=0;
	f_color=0;
	f_parent=0;
}
bb_map_Node5* bb_map_Node5::g_new(String t_key,bb_angelfont_AngelFont* t_value,int t_color,bb_map_Node5* t_parent){
	DBG_ENTER("Node.new")
	bb_map_Node5 *self=this;
	DBG_LOCAL(self,"Self")
	DBG_LOCAL(t_key,"key")
	DBG_LOCAL(t_value,"value")
	DBG_LOCAL(t_color,"color")
	DBG_LOCAL(t_parent,"parent")
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<364>");
	this->f_key=t_key;
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<365>");
	gc_assign(this->f_value,t_value);
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<366>");
	this->f_color=t_color;
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<367>");
	gc_assign(this->f_parent,t_parent);
	return this;
}
bb_map_Node5* bb_map_Node5::g_new2(){
	DBG_ENTER("Node.new")
	bb_map_Node5 *self=this;
	DBG_LOCAL(self,"Self")
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<361>");
	return this;
}
void bb_map_Node5::mark(){
	Object::mark();
	gc_mark_q(f_right);
	gc_mark_q(f_left);
	gc_mark_q(f_value);
	gc_mark_q(f_parent);
}
String bb_map_Node5::debug(){
	String t="(Node)\n";
	t+=dbg_decl("key",&f_key);
	t+=dbg_decl("value",&f_value);
	t+=dbg_decl("color",&f_color);
	t+=dbg_decl("parent",&f_parent);
	t+=dbg_decl("left",&f_left);
	t+=dbg_decl("right",&f_right);
	return t;
}
bb_animation_Animation::bb_animation_Animation(){
	f_startValue=FLOAT(.0);
	f_endValue=FLOAT(.0);
	f_duration=FLOAT(.0);
	f_effect=0;
	f_transition=((new bb_transition_TransitionLinear)->g_new());
	f_finished=false;
	f_animationTime=FLOAT(.0);
	f__value=FLOAT(.0);
}
bb_animation_Animation* bb_animation_Animation::g_new(Float t_startValue,Float t_endValue,Float t_duration){
	DBG_ENTER("Animation.new")
	bb_animation_Animation *self=this;
	DBG_LOCAL(self,"Self")
	DBG_LOCAL(t_startValue,"startValue")
	DBG_LOCAL(t_endValue,"endValue")
	DBG_LOCAL(t_duration,"duration")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/animation.monkey<27>");
	bb_fanout_FanOut::g_new();
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/animation.monkey<28>");
	this->f_startValue=t_startValue;
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/animation.monkey<29>");
	this->f_endValue=t_endValue;
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/animation.monkey<30>");
	this->f_duration=t_duration;
	return this;
}
bb_animation_Animation* bb_animation_Animation::g_new2(){
	DBG_ENTER("Animation.new")
	bb_animation_Animation *self=this;
	DBG_LOCAL(self,"Self")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/animation.monkey<12>");
	bb_fanout_FanOut::g_new();
	return this;
}
void bb_animation_Animation::m_Pause(){
	DBG_ENTER("Animation.Pause")
	bb_animation_Animation *self=this;
	DBG_LOCAL(self,"Self")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/animation.monkey<34>");
	f_finished=true;
}
void bb_animation_Animation::m_OnUpdate(Float t_delta,Float t_frameTime){
	DBG_ENTER("Animation.OnUpdate")
	bb_animation_Animation *self=this;
	DBG_LOCAL(self,"Self")
	DBG_LOCAL(t_delta,"delta")
	DBG_LOCAL(t_frameTime,"frameTime")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/animation.monkey<51>");
	bb_fanout_FanOut::m_OnUpdate(t_delta,t_frameTime);
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/animation.monkey<53>");
	if(f_finished){
		DBG_BLOCK();
		return;
	}
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/animation.monkey<54>");
	f_animationTime+=t_frameTime;
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/animation.monkey<56>");
	Float t_progress=bb_math_Min2(FLOAT(1.0),f_animationTime/f_duration);
	DBG_LOCAL(t_progress,"progress")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/animation.monkey<57>");
	Float t_t=f_transition->m_Calculate(t_progress);
	DBG_LOCAL(t_t,"t")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/animation.monkey<58>");
	f__value=f_startValue*(FLOAT(1.0)-t_t)+f_endValue*t_t;
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/animation.monkey<60>");
	if(f_animationTime>=f_duration){
		DBG_BLOCK();
		DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/animation.monkey<61>");
		f_animationTime=f_duration;
		DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/animation.monkey<62>");
		f_finished=true;
	}
}
void bb_animation_Animation::m_OnRender(){
	DBG_ENTER("Animation.OnRender")
	bb_animation_Animation *self=this;
	DBG_LOCAL(self,"Self")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/animation.monkey<67>");
	if(!((f_effect)!=0)){
		DBG_BLOCK();
		DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/animation.monkey<68>");
		bb_fanout_FanOut::m_OnRender();
		return;
	}
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/animation.monkey<72>");
	if(m_Count()==0){
		DBG_BLOCK();
		return;
	}
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/animation.monkey<73>");
	f_effect->m_PreRender(f__value);
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/animation.monkey<75>");
	bb_list_Enumerator* t_=this->m_ObjectEnumerator();
	while(t_->m_HasNext()){
		DBG_BLOCK();
		bb_directorevents_DirectorEvents* t_obj=t_->m_NextObject();
		DBG_LOCAL(t_obj,"obj")
		DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/animation.monkey<76>");
		f_effect->m_PreNode(f__value,t_obj);
		DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/animation.monkey<77>");
		t_obj->m_OnRender();
		DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/animation.monkey<78>");
		f_effect->m_PostNode(f__value,t_obj);
	}
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/animation.monkey<81>");
	f_effect->m_PostRender(f__value);
}
void bb_animation_Animation::m_Play(){
	DBG_ENTER("Animation.Play")
	bb_animation_Animation *self=this;
	DBG_LOCAL(self,"Self")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/animation.monkey<38>");
	f_finished=false;
}
void bb_animation_Animation::m_Restart(){
	DBG_ENTER("Animation.Restart")
	bb_animation_Animation *self=this;
	DBG_LOCAL(self,"Self")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/animation.monkey<42>");
	f_animationTime=FLOAT(0.0);
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/animation.monkey<43>");
	m_Play();
}
bool bb_animation_Animation::m_IsPlaying(){
	DBG_ENTER("Animation.IsPlaying")
	bb_animation_Animation *self=this;
	DBG_LOCAL(self,"Self")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/animation.monkey<47>");
	bool t_=!f_finished;
	return t_;
}
void bb_animation_Animation::mark(){
	bb_fanout_FanOut::mark();
	gc_mark_q(f_effect);
	gc_mark_q(f_transition);
}
String bb_animation_Animation::debug(){
	String t="(Animation)\n";
	t=bb_fanout_FanOut::debug()+t;
	t+=dbg_decl("startValue",&f_startValue);
	t+=dbg_decl("endValue",&f_endValue);
	t+=dbg_decl("duration",&f_duration);
	t+=dbg_decl("animationTime",&f_animationTime);
	t+=dbg_decl("finished",&f_finished);
	t+=dbg_decl("_value",&f__value);
	t+=dbg_decl("transition",&f_transition);
	t+=dbg_decl("effect",&f_effect);
	return t;
}
bb_fader_FaderScale::bb_fader_FaderScale(){
	f_sizeNode=0;
	f_offsetX=FLOAT(.0);
	f_offsetY=FLOAT(.0);
	f_posNode=0;
}
bb_fader_FaderScale* bb_fader_FaderScale::g_new(){
	DBG_ENTER("FaderScale.new")
	bb_fader_FaderScale *self=this;
	DBG_LOCAL(self,"Self")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/fader.monkey<36>");
	return this;
}
void bb_fader_FaderScale::m_PreRender(Float t_value){
	DBG_ENTER("FaderScale.PreRender")
	bb_fader_FaderScale *self=this;
	DBG_LOCAL(self,"Self")
}
void bb_fader_FaderScale::m_PostRender(Float t_value){
	DBG_ENTER("FaderScale.PostRender")
	bb_fader_FaderScale *self=this;
	DBG_LOCAL(self,"Self")
}
void bb_fader_FaderScale::m_PreNode(Float t_value,bb_directorevents_DirectorEvents* t_node){
	DBG_ENTER("FaderScale.PreNode")
	bb_fader_FaderScale *self=this;
	DBG_LOCAL(self,"Self")
	DBG_LOCAL(t_value,"value")
	DBG_LOCAL(t_node,"node")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/fader.monkey<53>");
	if(t_value==FLOAT(1.0)){
		DBG_BLOCK();
		return;
	}
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/fader.monkey<54>");
	bb_graphics_PushMatrix();
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/fader.monkey<56>");
	gc_assign(f_sizeNode,dynamic_cast<bb_sizeable_Sizeable*>(t_node));
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/fader.monkey<57>");
	if((f_sizeNode)!=0){
		DBG_BLOCK();
		DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/fader.monkey<58>");
		f_offsetX=f_sizeNode->m_center()->f_x*(t_value-FLOAT(1.0));
		DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/fader.monkey<59>");
		f_offsetY=f_sizeNode->m_center()->f_y*(t_value-FLOAT(1.0));
		DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/fader.monkey<60>");
		bb_graphics_Translate(-f_offsetX,-f_offsetY);
	}
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/fader.monkey<63>");
	gc_assign(f_posNode,dynamic_cast<bb_positionable_Positionable*>(t_node));
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/fader.monkey<64>");
	if((f_posNode)!=0){
		DBG_BLOCK();
		DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/fader.monkey<65>");
		f_offsetX=f_posNode->m_pos()->f_x*(t_value-FLOAT(1.0));
		DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/fader.monkey<66>");
		f_offsetY=f_posNode->m_pos()->f_y*(t_value-FLOAT(1.0));
		DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/fader.monkey<67>");
		bb_graphics_Translate(-f_offsetX,-f_offsetY);
	}
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/fader.monkey<70>");
	bb_graphics_Scale(t_value,t_value);
}
void bb_fader_FaderScale::m_PostNode(Float t_value,bb_directorevents_DirectorEvents* t_node){
	DBG_ENTER("FaderScale.PostNode")
	bb_fader_FaderScale *self=this;
	DBG_LOCAL(self,"Self")
	DBG_LOCAL(t_value,"value")
	DBG_LOCAL(t_node,"node")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/fader.monkey<74>");
	if(t_value==FLOAT(1.0)){
		DBG_BLOCK();
		return;
	}
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/fader.monkey<75>");
	bb_graphics_PopMatrix();
}
void bb_fader_FaderScale::mark(){
	Object::mark();
	gc_mark_q(f_sizeNode);
	gc_mark_q(f_posNode);
}
String bb_fader_FaderScale::debug(){
	String t="(FaderScale)\n";
	t+=dbg_decl("offsetX",&f_offsetX);
	t+=dbg_decl("offsetY",&f_offsetY);
	t+=dbg_decl("sizeNode",&f_sizeNode);
	t+=dbg_decl("posNode",&f_posNode);
	return t;
}
bb_transition_TransitionInCubic::bb_transition_TransitionInCubic(){
}
bb_transition_TransitionInCubic* bb_transition_TransitionInCubic::g_new(){
	DBG_ENTER("TransitionInCubic.new")
	bb_transition_TransitionInCubic *self=this;
	DBG_LOCAL(self,"Self")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/transition.monkey<38>");
	return this;
}
Float bb_transition_TransitionInCubic::m_Calculate(Float t_progress){
	DBG_ENTER("TransitionInCubic.Calculate")
	bb_transition_TransitionInCubic *self=this;
	DBG_LOCAL(self,"Self")
	DBG_LOCAL(t_progress,"progress")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/transition.monkey<40>");
	Float t_=(Float)pow(t_progress,FLOAT(3.0));
	return t_;
}
void bb_transition_TransitionInCubic::mark(){
	Object::mark();
}
String bb_transition_TransitionInCubic::debug(){
	String t="(TransitionInCubic)\n";
	return t;
}
bb_transition_TransitionLinear::bb_transition_TransitionLinear(){
}
bb_transition_TransitionLinear* bb_transition_TransitionLinear::g_new(){
	DBG_ENTER("TransitionLinear.new")
	bb_transition_TransitionLinear *self=this;
	DBG_LOCAL(self,"Self")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/transition.monkey<10>");
	return this;
}
Float bb_transition_TransitionLinear::m_Calculate(Float t_progress){
	DBG_ENTER("TransitionLinear.Calculate")
	bb_transition_TransitionLinear *self=this;
	DBG_LOCAL(self,"Self")
	DBG_LOCAL(t_progress,"progress")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/transition.monkey<12>");
	return t_progress;
}
void bb_transition_TransitionLinear::mark(){
	Object::mark();
}
String bb_transition_TransitionLinear::debug(){
	String t="(TransitionLinear)\n";
	return t;
}
int bb_app_Millisecs(){
	DBG_ENTER("Millisecs")
	DBG_INFO("/Applications/Monkey/modules/mojo/app.monkey<149>");
	int t_=bb_app_device->MilliSecs();
	return t_;
}
bb_stack_Stack::bb_stack_Stack(){
	f_data=Array<int >();
	f_length=0;
}
bb_stack_Stack* bb_stack_Stack::g_new(){
	DBG_ENTER("Stack.new")
	bb_stack_Stack *self=this;
	DBG_LOCAL(self,"Self")
	return this;
}
bb_stack_Stack* bb_stack_Stack::g_new2(Array<int > t_data){
	DBG_ENTER("Stack.new")
	bb_stack_Stack *self=this;
	DBG_LOCAL(self,"Self")
	DBG_LOCAL(t_data,"data")
	DBG_INFO("/Applications/Monkey/modules/monkey/stack.monkey<13>");
	gc_assign(this->f_data,t_data.Slice(0));
	DBG_INFO("/Applications/Monkey/modules/monkey/stack.monkey<14>");
	this->f_length=t_data.Length();
	return this;
}
int bb_stack_Stack::m_Clear(){
	DBG_ENTER("Stack.Clear")
	bb_stack_Stack *self=this;
	DBG_LOCAL(self,"Self")
	DBG_INFO("/Applications/Monkey/modules/monkey/stack.monkey<34>");
	f_length=0;
	return 0;
}
int bb_stack_Stack::m_Length(){
	DBG_ENTER("Stack.Length")
	bb_stack_Stack *self=this;
	DBG_LOCAL(self,"Self")
	DBG_INFO("/Applications/Monkey/modules/monkey/stack.monkey<38>");
	return f_length;
}
int bb_stack_Stack::m_Get2(int t_index){
	DBG_ENTER("Stack.Get")
	bb_stack_Stack *self=this;
	DBG_LOCAL(self,"Self")
	DBG_LOCAL(t_index,"index")
	DBG_INFO("/Applications/Monkey/modules/monkey/stack.monkey<73>");
	int t_=f_data.At(t_index);
	return t_;
}
int bb_stack_Stack::m_Remove4(int t_index){
	DBG_ENTER("Stack.Remove")
	bb_stack_Stack *self=this;
	DBG_LOCAL(self,"Self")
	DBG_LOCAL(t_index,"index")
	DBG_INFO("/Applications/Monkey/modules/monkey/stack.monkey<88>");
	for(int t_i=t_index;t_i<f_length-1;t_i=t_i+1){
		DBG_BLOCK();
		DBG_LOCAL(t_i,"i")
		DBG_INFO("/Applications/Monkey/modules/monkey/stack.monkey<89>");
		f_data.At(t_i)=f_data.At(t_i+1);
	}
	DBG_INFO("/Applications/Monkey/modules/monkey/stack.monkey<91>");
	f_length-=1;
	return 0;
}
int bb_stack_Stack::m_Push(int t_value){
	DBG_ENTER("Stack.Push")
	bb_stack_Stack *self=this;
	DBG_LOCAL(self,"Self")
	DBG_LOCAL(t_value,"value")
	DBG_INFO("/Applications/Monkey/modules/monkey/stack.monkey<52>");
	if(f_length==f_data.Length()){
		DBG_BLOCK();
		DBG_INFO("/Applications/Monkey/modules/monkey/stack.monkey<53>");
		gc_assign(f_data,f_data.Resize(f_length*2+10));
	}
	DBG_INFO("/Applications/Monkey/modules/monkey/stack.monkey<55>");
	f_data.At(f_length)=t_value;
	DBG_INFO("/Applications/Monkey/modules/monkey/stack.monkey<56>");
	f_length+=1;
	return 0;
}
void bb_stack_Stack::mark(){
	Object::mark();
	gc_mark_q(f_data);
}
String bb_stack_Stack::debug(){
	String t="(Stack)\n";
	t+=dbg_decl("data",&f_data);
	t+=dbg_decl("length",&f_length);
	return t;
}
bb_stack_IntStack::bb_stack_IntStack(){
}
bb_stack_IntStack* bb_stack_IntStack::g_new(){
	DBG_ENTER("IntStack.new")
	bb_stack_IntStack *self=this;
	DBG_LOCAL(self,"Self")
	DBG_INFO("/Applications/Monkey/modules/monkey/stack.monkey<193>");
	bb_stack_Stack::g_new();
	return this;
}
void bb_stack_IntStack::mark(){
	bb_stack_Stack::mark();
}
String bb_stack_IntStack::debug(){
	String t="(IntStack)\n";
	t=bb_stack_Stack::debug()+t;
	return t;
}
int bb_random_Seed;
Float bb_random_Rnd(){
	DBG_ENTER("Rnd")
	DBG_INFO("/Applications/Monkey/modules/monkey/random.monkey<21>");
	bb_random_Seed=bb_random_Seed*1664525+1013904223|0;
	DBG_INFO("/Applications/Monkey/modules/monkey/random.monkey<22>");
	Float t_=Float(bb_random_Seed>>8&16777215)/FLOAT(16777216.0);
	return t_;
}
Float bb_random_Rnd2(Float t_low,Float t_high){
	DBG_ENTER("Rnd")
	DBG_LOCAL(t_low,"low")
	DBG_LOCAL(t_high,"high")
	DBG_INFO("/Applications/Monkey/modules/monkey/random.monkey<30>");
	Float t_=bb_random_Rnd3(t_high-t_low)+t_low;
	return t_;
}
Float bb_random_Rnd3(Float t_range){
	DBG_ENTER("Rnd")
	DBG_LOCAL(t_range,"range")
	DBG_INFO("/Applications/Monkey/modules/monkey/random.monkey<26>");
	Float t_=bb_random_Rnd()*t_range;
	return t_;
}
bb_list_List4::bb_list_List4(){
	f__head=((new bb_list_HeadNode4)->g_new());
}
bb_list_List4* bb_list_List4::g_new(){
	DBG_ENTER("List.new")
	bb_list_List4 *self=this;
	DBG_LOCAL(self,"Self")
	return this;
}
bb_list_Node4* bb_list_List4::m_AddLast4(int t_data){
	DBG_ENTER("List.AddLast")
	bb_list_List4 *self=this;
	DBG_LOCAL(self,"Self")
	DBG_LOCAL(t_data,"data")
	DBG_INFO("/Applications/Monkey/modules/monkey/list.monkey<120>");
	bb_list_Node4* t_=(new bb_list_Node4)->g_new(f__head,f__head->f__pred,t_data);
	return t_;
}
bb_list_List4* bb_list_List4::g_new2(Array<int > t_data){
	DBG_ENTER("List.new")
	bb_list_List4 *self=this;
	DBG_LOCAL(self,"Self")
	DBG_LOCAL(t_data,"data")
	DBG_INFO("/Applications/Monkey/modules/monkey/list.monkey<13>");
	Array<int > t_=t_data;
	int t_2=0;
	while(t_2<t_.Length()){
		DBG_BLOCK();
		int t_t=t_.At(t_2);
		t_2=t_2+1;
		DBG_LOCAL(t_t,"t")
		DBG_INFO("/Applications/Monkey/modules/monkey/list.monkey<14>");
		m_AddLast4(t_t);
	}
	return this;
}
int bb_list_List4::m_Clear(){
	DBG_ENTER("List.Clear")
	bb_list_List4 *self=this;
	DBG_LOCAL(self,"Self")
	DBG_INFO("/Applications/Monkey/modules/monkey/list.monkey<36>");
	gc_assign(f__head->f__succ,f__head);
	DBG_INFO("/Applications/Monkey/modules/monkey/list.monkey<37>");
	gc_assign(f__head->f__pred,f__head);
	return 0;
}
int bb_list_List4::m_Count(){
	DBG_ENTER("List.Count")
	bb_list_List4 *self=this;
	DBG_LOCAL(self,"Self")
	DBG_INFO("/Applications/Monkey/modules/monkey/list.monkey<41>");
	int t_n=0;
	bb_list_Node4* t_node=f__head->f__succ;
	DBG_LOCAL(t_n,"n")
	DBG_LOCAL(t_node,"node")
	DBG_INFO("/Applications/Monkey/modules/monkey/list.monkey<42>");
	while(t_node!=f__head){
		DBG_BLOCK();
		DBG_INFO("/Applications/Monkey/modules/monkey/list.monkey<43>");
		t_node=t_node->f__succ;
		DBG_INFO("/Applications/Monkey/modules/monkey/list.monkey<44>");
		t_n+=1;
	}
	DBG_INFO("/Applications/Monkey/modules/monkey/list.monkey<46>");
	return t_n;
}
bb_list_Enumerator3* bb_list_List4::m_ObjectEnumerator(){
	DBG_ENTER("List.ObjectEnumerator")
	bb_list_List4 *self=this;
	DBG_LOCAL(self,"Self")
	DBG_INFO("/Applications/Monkey/modules/monkey/list.monkey<124>");
	bb_list_Enumerator3* t_=(new bb_list_Enumerator3)->g_new(this);
	return t_;
}
Array<int > bb_list_List4::m_ToArray(){
	DBG_ENTER("List.ToArray")
	bb_list_List4 *self=this;
	DBG_LOCAL(self,"Self")
	DBG_INFO("/Applications/Monkey/modules/monkey/list.monkey<19>");
	Array<int > t_arr=Array<int >(m_Count());
	int t_i=0;
	DBG_LOCAL(t_arr,"arr")
	DBG_LOCAL(t_i,"i")
	DBG_INFO("/Applications/Monkey/modules/monkey/list.monkey<20>");
	bb_list_Enumerator3* t_=this->m_ObjectEnumerator();
	while(t_->m_HasNext()){
		DBG_BLOCK();
		int t_t=t_->m_NextObject();
		DBG_LOCAL(t_t,"t")
		DBG_INFO("/Applications/Monkey/modules/monkey/list.monkey<21>");
		t_arr.At(t_i)=t_t;
		DBG_INFO("/Applications/Monkey/modules/monkey/list.monkey<22>");
		t_i+=1;
	}
	DBG_INFO("/Applications/Monkey/modules/monkey/list.monkey<24>");
	return t_arr;
}
bool bb_list_List4::m_IsEmpty(){
	DBG_ENTER("List.IsEmpty")
	bb_list_List4 *self=this;
	DBG_LOCAL(self,"Self")
	DBG_INFO("/Applications/Monkey/modules/monkey/list.monkey<50>");
	bool t_=f__head->f__succ==f__head;
	return t_;
}
int bb_list_List4::m_First(){
	DBG_ENTER("List.First")
	bb_list_List4 *self=this;
	DBG_LOCAL(self,"Self")
	DBG_INFO("/Applications/Monkey/modules/monkey/list.monkey<71>");
	if(m_IsEmpty()){
		DBG_BLOCK();
		Error(String(L"Illegal operation on empty list"));
	}
	DBG_INFO("/Applications/Monkey/modules/monkey/list.monkey<73>");
	int t_=f__head->m_NextNode()->f__data;
	return t_;
}
int bb_list_List4::m_RemoveFirst(){
	DBG_ENTER("List.RemoveFirst")
	bb_list_List4 *self=this;
	DBG_LOCAL(self,"Self")
	DBG_INFO("/Applications/Monkey/modules/monkey/list.monkey<85>");
	if(m_IsEmpty()){
		DBG_BLOCK();
		Error(String(L"Illegal operation on empty list"));
	}
	DBG_INFO("/Applications/Monkey/modules/monkey/list.monkey<87>");
	int t_data=f__head->m_NextNode()->f__data;
	DBG_LOCAL(t_data,"data")
	DBG_INFO("/Applications/Monkey/modules/monkey/list.monkey<88>");
	f__head->f__succ->m_Remove2();
	DBG_INFO("/Applications/Monkey/modules/monkey/list.monkey<89>");
	return t_data;
}
int bb_list_List4::m_Last(){
	DBG_ENTER("List.Last")
	bb_list_List4 *self=this;
	DBG_LOCAL(self,"Self")
	DBG_INFO("/Applications/Monkey/modules/monkey/list.monkey<78>");
	if(m_IsEmpty()){
		DBG_BLOCK();
		Error(String(L"Illegal operation on empty list"));
	}
	DBG_INFO("/Applications/Monkey/modules/monkey/list.monkey<80>");
	int t_=f__head->m_PrevNode()->f__data;
	return t_;
}
int bb_list_List4::m_RemoveLast(){
	DBG_ENTER("List.RemoveLast")
	bb_list_List4 *self=this;
	DBG_LOCAL(self,"Self")
	DBG_INFO("/Applications/Monkey/modules/monkey/list.monkey<94>");
	if(m_IsEmpty()){
		DBG_BLOCK();
		Error(String(L"Illegal operation on empty list"));
	}
	DBG_INFO("/Applications/Monkey/modules/monkey/list.monkey<96>");
	int t_data=f__head->m_PrevNode()->f__data;
	DBG_LOCAL(t_data,"data")
	DBG_INFO("/Applications/Monkey/modules/monkey/list.monkey<97>");
	f__head->f__pred->m_Remove2();
	DBG_INFO("/Applications/Monkey/modules/monkey/list.monkey<98>");
	return t_data;
}
bb_list_Node4* bb_list_List4::m_AddFirst2(int t_data){
	DBG_ENTER("List.AddFirst")
	bb_list_List4 *self=this;
	DBG_LOCAL(self,"Self")
	DBG_LOCAL(t_data,"data")
	DBG_INFO("/Applications/Monkey/modules/monkey/list.monkey<116>");
	bb_list_Node4* t_=(new bb_list_Node4)->g_new(f__head->f__succ,f__head,t_data);
	return t_;
}
void bb_list_List4::mark(){
	Object::mark();
	gc_mark_q(f__head);
}
String bb_list_List4::debug(){
	String t="(List)\n";
	t+=dbg_decl("_head",&f__head);
	return t;
}
bb_list_IntList::bb_list_IntList(){
}
bb_list_IntList* bb_list_IntList::g_new(){
	DBG_ENTER("IntList.new")
	bb_list_IntList *self=this;
	DBG_LOCAL(self,"Self")
	DBG_INFO("/Applications/Monkey/modules/monkey/list.monkey<333>");
	bb_list_List4::g_new();
	return this;
}
void bb_list_IntList::mark(){
	bb_list_List4::mark();
}
String bb_list_IntList::debug(){
	String t="(IntList)\n";
	t=bb_list_List4::debug()+t;
	return t;
}
bb_list_Node4::bb_list_Node4(){
	f__succ=0;
	f__pred=0;
	f__data=0;
}
bb_list_Node4* bb_list_Node4::g_new(bb_list_Node4* t_succ,bb_list_Node4* t_pred,int t_data){
	DBG_ENTER("Node.new")
	bb_list_Node4 *self=this;
	DBG_LOCAL(self,"Self")
	DBG_LOCAL(t_succ,"succ")
	DBG_LOCAL(t_pred,"pred")
	DBG_LOCAL(t_data,"data")
	DBG_INFO("/Applications/Monkey/modules/monkey/list.monkey<199>");
	gc_assign(f__succ,t_succ);
	DBG_INFO("/Applications/Monkey/modules/monkey/list.monkey<200>");
	gc_assign(f__pred,t_pred);
	DBG_INFO("/Applications/Monkey/modules/monkey/list.monkey<201>");
	gc_assign(f__succ->f__pred,this);
	DBG_INFO("/Applications/Monkey/modules/monkey/list.monkey<202>");
	gc_assign(f__pred->f__succ,this);
	DBG_INFO("/Applications/Monkey/modules/monkey/list.monkey<203>");
	f__data=t_data;
	return this;
}
bb_list_Node4* bb_list_Node4::g_new2(){
	DBG_ENTER("Node.new")
	bb_list_Node4 *self=this;
	DBG_LOCAL(self,"Self")
	DBG_INFO("/Applications/Monkey/modules/monkey/list.monkey<196>");
	return this;
}
bb_list_Node4* bb_list_Node4::m_GetNode(){
	DBG_ENTER("Node.GetNode")
	bb_list_Node4 *self=this;
	DBG_LOCAL(self,"Self")
	DBG_INFO("/Applications/Monkey/modules/monkey/list.monkey<239>");
	return this;
}
bb_list_Node4* bb_list_Node4::m_NextNode(){
	DBG_ENTER("Node.NextNode")
	bb_list_Node4 *self=this;
	DBG_LOCAL(self,"Self")
	DBG_INFO("/Applications/Monkey/modules/monkey/list.monkey<220>");
	if(f__succ->f__pred!=this){
		DBG_BLOCK();
		Error(String(L"Illegal operation on removed node"));
	}
	DBG_INFO("/Applications/Monkey/modules/monkey/list.monkey<222>");
	bb_list_Node4* t_=f__succ->m_GetNode();
	return t_;
}
int bb_list_Node4::m_Remove2(){
	DBG_ENTER("Node.Remove")
	bb_list_Node4 *self=this;
	DBG_LOCAL(self,"Self")
	DBG_INFO("/Applications/Monkey/modules/monkey/list.monkey<212>");
	if(f__succ->f__pred!=this){
		DBG_BLOCK();
		Error(String(L"Illegal operation on removed node"));
	}
	DBG_INFO("/Applications/Monkey/modules/monkey/list.monkey<214>");
	gc_assign(f__succ->f__pred,f__pred);
	DBG_INFO("/Applications/Monkey/modules/monkey/list.monkey<215>");
	gc_assign(f__pred->f__succ,f__succ);
	return 0;
}
bb_list_Node4* bb_list_Node4::m_PrevNode(){
	DBG_ENTER("Node.PrevNode")
	bb_list_Node4 *self=this;
	DBG_LOCAL(self,"Self")
	DBG_INFO("/Applications/Monkey/modules/monkey/list.monkey<227>");
	if(f__succ->f__pred!=this){
		DBG_BLOCK();
		Error(String(L"Illegal operation on removed node"));
	}
	DBG_INFO("/Applications/Monkey/modules/monkey/list.monkey<229>");
	bb_list_Node4* t_=f__pred->m_GetNode();
	return t_;
}
void bb_list_Node4::mark(){
	Object::mark();
	gc_mark_q(f__succ);
	gc_mark_q(f__pred);
}
String bb_list_Node4::debug(){
	String t="(Node)\n";
	t+=dbg_decl("_succ",&f__succ);
	t+=dbg_decl("_pred",&f__pred);
	t+=dbg_decl("_data",&f__data);
	return t;
}
bb_list_HeadNode4::bb_list_HeadNode4(){
}
bb_list_HeadNode4* bb_list_HeadNode4::g_new(){
	DBG_ENTER("HeadNode.new")
	bb_list_HeadNode4 *self=this;
	DBG_LOCAL(self,"Self")
	DBG_INFO("/Applications/Monkey/modules/monkey/list.monkey<248>");
	bb_list_Node4::g_new2();
	DBG_INFO("/Applications/Monkey/modules/monkey/list.monkey<249>");
	gc_assign(f__succ,(this));
	DBG_INFO("/Applications/Monkey/modules/monkey/list.monkey<250>");
	gc_assign(f__pred,(this));
	return this;
}
bb_list_Node4* bb_list_HeadNode4::m_GetNode(){
	DBG_ENTER("HeadNode.GetNode")
	bb_list_HeadNode4 *self=this;
	DBG_LOCAL(self,"Self")
	DBG_INFO("/Applications/Monkey/modules/monkey/list.monkey<254>");
	return 0;
}
void bb_list_HeadNode4::mark(){
	bb_list_Node4::mark();
}
String bb_list_HeadNode4::debug(){
	String t="(HeadNode)\n";
	t=bb_list_Node4::debug()+t;
	return t;
}
bb_set_Set::bb_set_Set(){
	f_map=0;
}
bb_set_Set* bb_set_Set::g_new(bb_map_Map6* t_map){
	DBG_ENTER("Set.new")
	bb_set_Set *self=this;
	DBG_LOCAL(self,"Self")
	DBG_LOCAL(t_map,"map")
	DBG_INFO("/Applications/Monkey/modules/monkey/set.monkey<16>");
	gc_assign(this->f_map,t_map);
	return this;
}
bb_set_Set* bb_set_Set::g_new2(){
	DBG_ENTER("Set.new")
	bb_set_Set *self=this;
	DBG_LOCAL(self,"Self")
	DBG_INFO("/Applications/Monkey/modules/monkey/set.monkey<13>");
	return this;
}
int bb_set_Set::m_Insert4(int t_value){
	DBG_ENTER("Set.Insert")
	bb_set_Set *self=this;
	DBG_LOCAL(self,"Self")
	DBG_LOCAL(t_value,"value")
	DBG_INFO("/Applications/Monkey/modules/monkey/set.monkey<36>");
	f_map->m_Insert5(t_value,0);
	return 0;
}
int bb_set_Set::m_Count(){
	DBG_ENTER("Set.Count")
	bb_set_Set *self=this;
	DBG_LOCAL(self,"Self")
	DBG_INFO("/Applications/Monkey/modules/monkey/set.monkey<24>");
	int t_=f_map->m_Count();
	return t_;
}
int bb_set_Set::m_Clear(){
	DBG_ENTER("Set.Clear")
	bb_set_Set *self=this;
	DBG_LOCAL(self,"Self")
	DBG_INFO("/Applications/Monkey/modules/monkey/set.monkey<20>");
	f_map->m_Clear();
	return 0;
}
int bb_set_Set::m_Remove4(int t_value){
	DBG_ENTER("Set.Remove")
	bb_set_Set *self=this;
	DBG_LOCAL(self,"Self")
	DBG_LOCAL(t_value,"value")
	DBG_INFO("/Applications/Monkey/modules/monkey/set.monkey<40>");
	f_map->m_Remove4(t_value);
	return 0;
}
bool bb_set_Set::m_Contains2(int t_value){
	DBG_ENTER("Set.Contains")
	bb_set_Set *self=this;
	DBG_LOCAL(self,"Self")
	DBG_LOCAL(t_value,"value")
	DBG_INFO("/Applications/Monkey/modules/monkey/set.monkey<32>");
	bool t_=f_map->m_Contains2(t_value);
	return t_;
}
void bb_set_Set::mark(){
	Object::mark();
	gc_mark_q(f_map);
}
String bb_set_Set::debug(){
	String t="(Set)\n";
	t+=dbg_decl("map",&f_map);
	return t;
}
bb_set_IntSet::bb_set_IntSet(){
}
bb_set_IntSet* bb_set_IntSet::g_new(){
	DBG_ENTER("IntSet.new")
	bb_set_IntSet *self=this;
	DBG_LOCAL(self,"Self")
	DBG_INFO("/Applications/Monkey/modules/monkey/set.monkey<57>");
	bb_set_Set::g_new((new bb_map_IntMap)->g_new());
	return this;
}
void bb_set_IntSet::mark(){
	bb_set_Set::mark();
}
String bb_set_IntSet::debug(){
	String t="(IntSet)\n";
	t=bb_set_Set::debug()+t;
	return t;
}
bb_map_Map6::bb_map_Map6(){
	f_root=0;
}
bb_map_Map6* bb_map_Map6::g_new(){
	DBG_ENTER("Map.new")
	bb_map_Map6 *self=this;
	DBG_LOCAL(self,"Self")
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<7>");
	return this;
}
int bb_map_Map6::m_RotateLeft6(bb_map_Node6* t_node){
	DBG_ENTER("Map.RotateLeft")
	bb_map_Map6 *self=this;
	DBG_LOCAL(self,"Self")
	DBG_LOCAL(t_node,"node")
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<251>");
	bb_map_Node6* t_child=t_node->f_right;
	DBG_LOCAL(t_child,"child")
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<252>");
	gc_assign(t_node->f_right,t_child->f_left);
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<253>");
	if((t_child->f_left)!=0){
		DBG_BLOCK();
		DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<254>");
		gc_assign(t_child->f_left->f_parent,t_node);
	}
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<256>");
	gc_assign(t_child->f_parent,t_node->f_parent);
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<257>");
	if((t_node->f_parent)!=0){
		DBG_BLOCK();
		DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<258>");
		if(t_node==t_node->f_parent->f_left){
			DBG_BLOCK();
			DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<259>");
			gc_assign(t_node->f_parent->f_left,t_child);
		}else{
			DBG_BLOCK();
			DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<261>");
			gc_assign(t_node->f_parent->f_right,t_child);
		}
	}else{
		DBG_BLOCK();
		DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<264>");
		gc_assign(f_root,t_child);
	}
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<266>");
	gc_assign(t_child->f_left,t_node);
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<267>");
	gc_assign(t_node->f_parent,t_child);
	return 0;
}
int bb_map_Map6::m_RotateRight6(bb_map_Node6* t_node){
	DBG_ENTER("Map.RotateRight")
	bb_map_Map6 *self=this;
	DBG_LOCAL(self,"Self")
	DBG_LOCAL(t_node,"node")
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<271>");
	bb_map_Node6* t_child=t_node->f_left;
	DBG_LOCAL(t_child,"child")
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<272>");
	gc_assign(t_node->f_left,t_child->f_right);
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<273>");
	if((t_child->f_right)!=0){
		DBG_BLOCK();
		DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<274>");
		gc_assign(t_child->f_right->f_parent,t_node);
	}
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<276>");
	gc_assign(t_child->f_parent,t_node->f_parent);
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<277>");
	if((t_node->f_parent)!=0){
		DBG_BLOCK();
		DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<278>");
		if(t_node==t_node->f_parent->f_right){
			DBG_BLOCK();
			DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<279>");
			gc_assign(t_node->f_parent->f_right,t_child);
		}else{
			DBG_BLOCK();
			DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<281>");
			gc_assign(t_node->f_parent->f_left,t_child);
		}
	}else{
		DBG_BLOCK();
		DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<284>");
		gc_assign(f_root,t_child);
	}
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<286>");
	gc_assign(t_child->f_right,t_node);
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<287>");
	gc_assign(t_node->f_parent,t_child);
	return 0;
}
int bb_map_Map6::m_InsertFixup6(bb_map_Node6* t_node){
	DBG_ENTER("Map.InsertFixup")
	bb_map_Map6 *self=this;
	DBG_LOCAL(self,"Self")
	DBG_LOCAL(t_node,"node")
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<212>");
	while(((t_node->f_parent)!=0) && t_node->f_parent->f_color==-1 && ((t_node->f_parent->f_parent)!=0)){
		DBG_BLOCK();
		DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<213>");
		if(t_node->f_parent==t_node->f_parent->f_parent->f_left){
			DBG_BLOCK();
			DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<214>");
			bb_map_Node6* t_uncle=t_node->f_parent->f_parent->f_right;
			DBG_LOCAL(t_uncle,"uncle")
			DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<215>");
			if(((t_uncle)!=0) && t_uncle->f_color==-1){
				DBG_BLOCK();
				DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<216>");
				t_node->f_parent->f_color=1;
				DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<217>");
				t_uncle->f_color=1;
				DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<218>");
				t_uncle->f_parent->f_color=-1;
				DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<219>");
				t_node=t_uncle->f_parent;
			}else{
				DBG_BLOCK();
				DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<221>");
				if(t_node==t_node->f_parent->f_right){
					DBG_BLOCK();
					DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<222>");
					t_node=t_node->f_parent;
					DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<223>");
					m_RotateLeft6(t_node);
				}
				DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<225>");
				t_node->f_parent->f_color=1;
				DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<226>");
				t_node->f_parent->f_parent->f_color=-1;
				DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<227>");
				m_RotateRight6(t_node->f_parent->f_parent);
			}
		}else{
			DBG_BLOCK();
			DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<230>");
			bb_map_Node6* t_uncle2=t_node->f_parent->f_parent->f_left;
			DBG_LOCAL(t_uncle2,"uncle")
			DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<231>");
			if(((t_uncle2)!=0) && t_uncle2->f_color==-1){
				DBG_BLOCK();
				DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<232>");
				t_node->f_parent->f_color=1;
				DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<233>");
				t_uncle2->f_color=1;
				DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<234>");
				t_uncle2->f_parent->f_color=-1;
				DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<235>");
				t_node=t_uncle2->f_parent;
			}else{
				DBG_BLOCK();
				DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<237>");
				if(t_node==t_node->f_parent->f_left){
					DBG_BLOCK();
					DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<238>");
					t_node=t_node->f_parent;
					DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<239>");
					m_RotateRight6(t_node);
				}
				DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<241>");
				t_node->f_parent->f_color=1;
				DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<242>");
				t_node->f_parent->f_parent->f_color=-1;
				DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<243>");
				m_RotateLeft6(t_node->f_parent->f_parent);
			}
		}
	}
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<247>");
	f_root->f_color=1;
	return 0;
}
bool bb_map_Map6::m_Set8(int t_key,Object* t_value){
	DBG_ENTER("Map.Set")
	bb_map_Map6 *self=this;
	DBG_LOCAL(self,"Self")
	DBG_LOCAL(t_key,"key")
	DBG_LOCAL(t_value,"value")
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<29>");
	bb_map_Node6* t_node=f_root;
	DBG_LOCAL(t_node,"node")
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<30>");
	bb_map_Node6* t_parent=0;
	int t_cmp=0;
	DBG_LOCAL(t_parent,"parent")
	DBG_LOCAL(t_cmp,"cmp")
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<32>");
	while((t_node)!=0){
		DBG_BLOCK();
		DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<33>");
		t_parent=t_node;
		DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<34>");
		t_cmp=m_Compare2(t_key,t_node->f_key);
		DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<35>");
		if(t_cmp>0){
			DBG_BLOCK();
			DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<36>");
			t_node=t_node->f_right;
		}else{
			DBG_BLOCK();
			DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<37>");
			if(t_cmp<0){
				DBG_BLOCK();
				DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<38>");
				t_node=t_node->f_left;
			}else{
				DBG_BLOCK();
				DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<40>");
				gc_assign(t_node->f_value,t_value);
				DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<41>");
				return false;
			}
		}
	}
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<45>");
	t_node=(new bb_map_Node6)->g_new(t_key,t_value,-1,t_parent);
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<47>");
	if((t_parent)!=0){
		DBG_BLOCK();
		DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<48>");
		if(t_cmp>0){
			DBG_BLOCK();
			DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<49>");
			gc_assign(t_parent->f_right,t_node);
		}else{
			DBG_BLOCK();
			DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<51>");
			gc_assign(t_parent->f_left,t_node);
		}
		DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<53>");
		m_InsertFixup6(t_node);
	}else{
		DBG_BLOCK();
		DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<55>");
		gc_assign(f_root,t_node);
	}
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<57>");
	return true;
}
bool bb_map_Map6::m_Insert5(int t_key,Object* t_value){
	DBG_ENTER("Map.Insert")
	bb_map_Map6 *self=this;
	DBG_LOCAL(self,"Self")
	DBG_LOCAL(t_key,"key")
	DBG_LOCAL(t_value,"value")
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<126>");
	bool t_=m_Set8(t_key,t_value);
	return t_;
}
int bb_map_Map6::m_Count(){
	DBG_ENTER("Map.Count")
	bb_map_Map6 *self=this;
	DBG_LOCAL(self,"Self")
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<17>");
	if((f_root)!=0){
		DBG_BLOCK();
		int t_=f_root->m_Count2(0);
		return t_;
	}
	return 0;
}
int bb_map_Map6::m_Clear(){
	DBG_ENTER("Map.Clear")
	bb_map_Map6 *self=this;
	DBG_LOCAL(self,"Self")
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<13>");
	f_root=0;
	return 0;
}
bb_map_Node6* bb_map_Map6::m_FindNode2(int t_key){
	DBG_ENTER("Map.FindNode")
	bb_map_Map6 *self=this;
	DBG_LOCAL(self,"Self")
	DBG_LOCAL(t_key,"key")
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<157>");
	bb_map_Node6* t_node=f_root;
	DBG_LOCAL(t_node,"node")
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<159>");
	while((t_node)!=0){
		DBG_BLOCK();
		DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<160>");
		int t_cmp=m_Compare2(t_key,t_node->f_key);
		DBG_LOCAL(t_cmp,"cmp")
		DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<161>");
		if(t_cmp>0){
			DBG_BLOCK();
			DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<162>");
			t_node=t_node->f_right;
		}else{
			DBG_BLOCK();
			DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<163>");
			if(t_cmp<0){
				DBG_BLOCK();
				DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<164>");
				t_node=t_node->f_left;
			}else{
				DBG_BLOCK();
				DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<166>");
				return t_node;
			}
		}
	}
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<169>");
	return t_node;
}
int bb_map_Map6::m_DeleteFixup(bb_map_Node6* t_node,bb_map_Node6* t_parent){
	DBG_ENTER("Map.DeleteFixup")
	bb_map_Map6 *self=this;
	DBG_LOCAL(self,"Self")
	DBG_LOCAL(t_node,"node")
	DBG_LOCAL(t_parent,"parent")
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<292>");
	while(t_node!=f_root && (!((t_node)!=0) || t_node->f_color==1)){
		DBG_BLOCK();
		DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<294>");
		if(t_node==t_parent->f_left){
			DBG_BLOCK();
			DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<296>");
			bb_map_Node6* t_sib=t_parent->f_right;
			DBG_LOCAL(t_sib,"sib")
			DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<298>");
			if(t_sib->f_color==-1){
				DBG_BLOCK();
				DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<299>");
				t_sib->f_color=1;
				DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<300>");
				t_parent->f_color=-1;
				DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<301>");
				m_RotateLeft6(t_parent);
				DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<302>");
				t_sib=t_parent->f_right;
			}
			DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<305>");
			if((!((t_sib->f_left)!=0) || t_sib->f_left->f_color==1) && (!((t_sib->f_right)!=0) || t_sib->f_right->f_color==1)){
				DBG_BLOCK();
				DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<306>");
				t_sib->f_color=-1;
				DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<307>");
				t_node=t_parent;
				DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<308>");
				t_parent=t_parent->f_parent;
			}else{
				DBG_BLOCK();
				DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<310>");
				if(!((t_sib->f_right)!=0) || t_sib->f_right->f_color==1){
					DBG_BLOCK();
					DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<311>");
					t_sib->f_left->f_color=1;
					DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<312>");
					t_sib->f_color=-1;
					DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<313>");
					m_RotateRight6(t_sib);
					DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<314>");
					t_sib=t_parent->f_right;
				}
				DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<316>");
				t_sib->f_color=t_parent->f_color;
				DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<317>");
				t_parent->f_color=1;
				DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<318>");
				t_sib->f_right->f_color=1;
				DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<319>");
				m_RotateLeft6(t_parent);
				DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<320>");
				t_node=f_root;
			}
		}else{
			DBG_BLOCK();
			DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<323>");
			bb_map_Node6* t_sib2=t_parent->f_left;
			DBG_LOCAL(t_sib2,"sib")
			DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<325>");
			if(t_sib2->f_color==-1){
				DBG_BLOCK();
				DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<326>");
				t_sib2->f_color=1;
				DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<327>");
				t_parent->f_color=-1;
				DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<328>");
				m_RotateRight6(t_parent);
				DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<329>");
				t_sib2=t_parent->f_left;
			}
			DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<332>");
			if((!((t_sib2->f_right)!=0) || t_sib2->f_right->f_color==1) && (!((t_sib2->f_left)!=0) || t_sib2->f_left->f_color==1)){
				DBG_BLOCK();
				DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<333>");
				t_sib2->f_color=-1;
				DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<334>");
				t_node=t_parent;
				DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<335>");
				t_parent=t_parent->f_parent;
			}else{
				DBG_BLOCK();
				DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<337>");
				if(!((t_sib2->f_left)!=0) || t_sib2->f_left->f_color==1){
					DBG_BLOCK();
					DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<338>");
					t_sib2->f_right->f_color=1;
					DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<339>");
					t_sib2->f_color=-1;
					DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<340>");
					m_RotateLeft6(t_sib2);
					DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<341>");
					t_sib2=t_parent->f_left;
				}
				DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<343>");
				t_sib2->f_color=t_parent->f_color;
				DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<344>");
				t_parent->f_color=1;
				DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<345>");
				t_sib2->f_left->f_color=1;
				DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<346>");
				m_RotateRight6(t_parent);
				DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<347>");
				t_node=f_root;
			}
		}
	}
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<351>");
	if((t_node)!=0){
		DBG_BLOCK();
		t_node->f_color=1;
	}
	return 0;
}
int bb_map_Map6::m_RemoveNode(bb_map_Node6* t_node){
	DBG_ENTER("Map.RemoveNode")
	bb_map_Map6 *self=this;
	DBG_LOCAL(self,"Self")
	DBG_LOCAL(t_node,"node")
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<173>");
	bb_map_Node6* t_splice=0;
	bb_map_Node6* t_child=0;
	DBG_LOCAL(t_splice,"splice")
	DBG_LOCAL(t_child,"child")
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<175>");
	if(!((t_node->f_left)!=0)){
		DBG_BLOCK();
		DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<176>");
		t_splice=t_node;
		DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<177>");
		t_child=t_node->f_right;
	}else{
		DBG_BLOCK();
		DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<178>");
		if(!((t_node->f_right)!=0)){
			DBG_BLOCK();
			DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<179>");
			t_splice=t_node;
			DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<180>");
			t_child=t_node->f_left;
		}else{
			DBG_BLOCK();
			DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<182>");
			t_splice=t_node->f_left;
			DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<183>");
			while((t_splice->f_right)!=0){
				DBG_BLOCK();
				DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<184>");
				t_splice=t_splice->f_right;
			}
			DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<186>");
			t_child=t_splice->f_left;
			DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<187>");
			t_node->f_key=t_splice->f_key;
			DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<188>");
			gc_assign(t_node->f_value,t_splice->f_value);
		}
	}
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<191>");
	bb_map_Node6* t_parent=t_splice->f_parent;
	DBG_LOCAL(t_parent,"parent")
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<193>");
	if((t_child)!=0){
		DBG_BLOCK();
		DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<194>");
		gc_assign(t_child->f_parent,t_parent);
	}
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<197>");
	if(!((t_parent)!=0)){
		DBG_BLOCK();
		DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<198>");
		gc_assign(f_root,t_child);
		DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<199>");
		return 0;
	}
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<202>");
	if(t_splice==t_parent->f_left){
		DBG_BLOCK();
		DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<203>");
		gc_assign(t_parent->f_left,t_child);
	}else{
		DBG_BLOCK();
		DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<205>");
		gc_assign(t_parent->f_right,t_child);
	}
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<208>");
	if(t_splice->f_color==1){
		DBG_BLOCK();
		m_DeleteFixup(t_child,t_parent);
	}
	return 0;
}
int bb_map_Map6::m_Remove4(int t_key){
	DBG_ENTER("Map.Remove")
	bb_map_Map6 *self=this;
	DBG_LOCAL(self,"Self")
	DBG_LOCAL(t_key,"key")
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<106>");
	bb_map_Node6* t_node=m_FindNode2(t_key);
	DBG_LOCAL(t_node,"node")
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<107>");
	if(!((t_node)!=0)){
		DBG_BLOCK();
		return 0;
	}
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<108>");
	m_RemoveNode(t_node);
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<109>");
	return 1;
}
bool bb_map_Map6::m_Contains2(int t_key){
	DBG_ENTER("Map.Contains")
	bb_map_Map6 *self=this;
	DBG_LOCAL(self,"Self")
	DBG_LOCAL(t_key,"key")
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<25>");
	bool t_=m_FindNode2(t_key)!=0;
	return t_;
}
void bb_map_Map6::mark(){
	Object::mark();
	gc_mark_q(f_root);
}
String bb_map_Map6::debug(){
	String t="(Map)\n";
	t+=dbg_decl("root",&f_root);
	return t;
}
bb_map_IntMap::bb_map_IntMap(){
}
bb_map_IntMap* bb_map_IntMap::g_new(){
	DBG_ENTER("IntMap.new")
	bb_map_IntMap *self=this;
	DBG_LOCAL(self,"Self")
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<534>");
	bb_map_Map6::g_new();
	return this;
}
int bb_map_IntMap::m_Compare2(int t_lhs,int t_rhs){
	DBG_ENTER("IntMap.Compare")
	bb_map_IntMap *self=this;
	DBG_LOCAL(self,"Self")
	DBG_LOCAL(t_lhs,"lhs")
	DBG_LOCAL(t_rhs,"rhs")
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<537>");
	int t_=t_lhs-t_rhs;
	return t_;
}
void bb_map_IntMap::mark(){
	bb_map_Map6::mark();
}
String bb_map_IntMap::debug(){
	String t="(IntMap)\n";
	t=bb_map_Map6::debug()+t;
	return t;
}
bb_map_Node6::bb_map_Node6(){
	f_key=0;
	f_right=0;
	f_left=0;
	f_value=0;
	f_color=0;
	f_parent=0;
}
bb_map_Node6* bb_map_Node6::g_new(int t_key,Object* t_value,int t_color,bb_map_Node6* t_parent){
	DBG_ENTER("Node.new")
	bb_map_Node6 *self=this;
	DBG_LOCAL(self,"Self")
	DBG_LOCAL(t_key,"key")
	DBG_LOCAL(t_value,"value")
	DBG_LOCAL(t_color,"color")
	DBG_LOCAL(t_parent,"parent")
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<364>");
	this->f_key=t_key;
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<365>");
	gc_assign(this->f_value,t_value);
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<366>");
	this->f_color=t_color;
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<367>");
	gc_assign(this->f_parent,t_parent);
	return this;
}
bb_map_Node6* bb_map_Node6::g_new2(){
	DBG_ENTER("Node.new")
	bb_map_Node6 *self=this;
	DBG_LOCAL(self,"Self")
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<361>");
	return this;
}
int bb_map_Node6::m_Count2(int t_n){
	DBG_ENTER("Node.Count")
	bb_map_Node6 *self=this;
	DBG_LOCAL(self,"Self")
	DBG_LOCAL(t_n,"n")
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<371>");
	if((f_left)!=0){
		DBG_BLOCK();
		t_n=f_left->m_Count2(t_n);
	}
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<372>");
	if((f_right)!=0){
		DBG_BLOCK();
		t_n=f_right->m_Count2(t_n);
	}
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<373>");
	int t_=t_n+1;
	return t_;
}
void bb_map_Node6::mark(){
	Object::mark();
	gc_mark_q(f_right);
	gc_mark_q(f_left);
	gc_mark_q(f_value);
	gc_mark_q(f_parent);
}
String bb_map_Node6::debug(){
	String t="(Node)\n";
	t+=dbg_decl("key",&f_key);
	t+=dbg_decl("value",&f_value);
	t+=dbg_decl("color",&f_color);
	t+=dbg_decl("parent",&f_parent);
	t+=dbg_decl("left",&f_left);
	t+=dbg_decl("right",&f_right);
	return t;
}
bb_list_Enumerator3::bb_list_Enumerator3(){
	f__list=0;
	f__curr=0;
}
bb_list_Enumerator3* bb_list_Enumerator3::g_new(bb_list_List4* t_list){
	DBG_ENTER("Enumerator.new")
	bb_list_Enumerator3 *self=this;
	DBG_LOCAL(self,"Self")
	DBG_LOCAL(t_list,"list")
	DBG_INFO("/Applications/Monkey/modules/monkey/list.monkey<264>");
	gc_assign(f__list,t_list);
	DBG_INFO("/Applications/Monkey/modules/monkey/list.monkey<265>");
	gc_assign(f__curr,t_list->f__head->f__succ);
	return this;
}
bb_list_Enumerator3* bb_list_Enumerator3::g_new2(){
	DBG_ENTER("Enumerator.new")
	bb_list_Enumerator3 *self=this;
	DBG_LOCAL(self,"Self")
	DBG_INFO("/Applications/Monkey/modules/monkey/list.monkey<261>");
	return this;
}
bool bb_list_Enumerator3::m_HasNext(){
	DBG_ENTER("Enumerator.HasNext")
	bb_list_Enumerator3 *self=this;
	DBG_LOCAL(self,"Self")
	DBG_INFO("/Applications/Monkey/modules/monkey/list.monkey<269>");
	while(f__curr->f__succ->f__pred!=f__curr){
		DBG_BLOCK();
		DBG_INFO("/Applications/Monkey/modules/monkey/list.monkey<270>");
		gc_assign(f__curr,f__curr->f__succ);
	}
	DBG_INFO("/Applications/Monkey/modules/monkey/list.monkey<272>");
	bool t_=f__curr!=f__list->f__head;
	return t_;
}
int bb_list_Enumerator3::m_NextObject(){
	DBG_ENTER("Enumerator.NextObject")
	bb_list_Enumerator3 *self=this;
	DBG_LOCAL(self,"Self")
	DBG_INFO("/Applications/Monkey/modules/monkey/list.monkey<276>");
	int t_data=f__curr->f__data;
	DBG_LOCAL(t_data,"data")
	DBG_INFO("/Applications/Monkey/modules/monkey/list.monkey<277>");
	gc_assign(f__curr,f__curr->f__succ);
	DBG_INFO("/Applications/Monkey/modules/monkey/list.monkey<278>");
	return t_data;
}
void bb_list_Enumerator3::mark(){
	Object::mark();
	gc_mark_q(f__list);
	gc_mark_q(f__curr);
}
String bb_list_Enumerator3::debug(){
	String t="(Enumerator)\n";
	t+=dbg_decl("_list",&f__list);
	t+=dbg_decl("_curr",&f__curr);
	return t;
}
bb_textinput_TextInput::bb_textinput_TextInput(){
	f_cursorPos=0;
}
bb_textinput_TextInput* bb_textinput_TextInput::g_new(String t_fontName,bb_vector2d_Vector2D* t_pos){
	DBG_ENTER("TextInput.new")
	bb_textinput_TextInput *self=this;
	DBG_LOCAL(self,"Self")
	DBG_LOCAL(t_fontName,"fontName")
	DBG_LOCAL(t_pos,"pos")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/textinput.monkey<20>");
	bb_font_Font::g_new(t_fontName,t_pos);
	return this;
}
bb_textinput_TextInput* bb_textinput_TextInput::g_new2(){
	DBG_ENTER("TextInput.new")
	bb_textinput_TextInput *self=this;
	DBG_LOCAL(self,"Self")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/textinput.monkey<12>");
	bb_font_Font::g_new2();
	return this;
}
void bb_textinput_TextInput::m_MoveCursorRight(){
	DBG_ENTER("TextInput.MoveCursorRight")
	bb_textinput_TextInput *self=this;
	DBG_LOCAL(self,"Self")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/textinput.monkey<46>");
	if(f_cursorPos>=m_text2().Length()){
		DBG_BLOCK();
		return;
	}
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/textinput.monkey<47>");
	f_cursorPos+=1;
}
void bb_textinput_TextInput::m_InsertChar(String t_char){
	DBG_ENTER("TextInput.InsertChar")
	bb_textinput_TextInput *self=this;
	DBG_LOCAL(self,"Self")
	DBG_LOCAL(t_char,"char")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/textinput.monkey<51>");
	m_text(m_text2().Slice(0,f_cursorPos)+t_char+m_text2().Slice(f_cursorPos,m_text2().Length()));
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/textinput.monkey<52>");
	m_MoveCursorRight();
}
void bb_textinput_TextInput::m_MoveCursorLeft(){
	DBG_ENTER("TextInput.MoveCursorLeft")
	bb_textinput_TextInput *self=this;
	DBG_LOCAL(self,"Self")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/textinput.monkey<41>");
	if(f_cursorPos<=0){
		DBG_BLOCK();
		return;
	}
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/textinput.monkey<42>");
	f_cursorPos-=1;
}
void bb_textinput_TextInput::m_RemoveChar(){
	DBG_ENTER("TextInput.RemoveChar")
	bb_textinput_TextInput *self=this;
	DBG_LOCAL(self,"Self")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/textinput.monkey<56>");
	if(m_text2().Length()==0 || f_cursorPos==0){
		DBG_BLOCK();
		return;
	}
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/textinput.monkey<58>");
	m_text(m_text2().Slice(0,f_cursorPos-1)+m_text2().Slice(f_cursorPos,m_text2().Length()));
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/textinput.monkey<59>");
	m_MoveCursorLeft();
}
void bb_textinput_TextInput::m_OnKeyUp(bb_keyevent_KeyEvent* t_event){
	DBG_ENTER("TextInput.OnKeyUp")
	bb_textinput_TextInput *self=this;
	DBG_LOCAL(self,"Self")
	DBG_LOCAL(t_event,"event")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/textinput.monkey<24>");
	if(t_event->m_code()>31 && t_event->m_code()<127){
		DBG_BLOCK();
		DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/textinput.monkey<25>");
		m_InsertChar(t_event->m_char());
	}else{
		DBG_BLOCK();
		DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/textinput.monkey<27>");
		int t_1=t_event->m_code();
		DBG_LOCAL(t_1,"1")
		DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/textinput.monkey<28>");
		if(t_1==8){
			DBG_BLOCK();
			DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/textinput.monkey<29>");
			m_RemoveChar();
		}else{
			DBG_BLOCK();
			DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/textinput.monkey<30>");
			if(t_1==65573){
				DBG_BLOCK();
				DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/textinput.monkey<31>");
				m_MoveCursorLeft();
			}else{
				DBG_BLOCK();
				DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/textinput.monkey<32>");
				if(t_1==65575){
					DBG_BLOCK();
					DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/textinput.monkey<33>");
					m_MoveCursorRight();
				}
			}
		}
	}
}
void bb_textinput_TextInput::mark(){
	bb_font_Font::mark();
}
String bb_textinput_TextInput::debug(){
	String t="(TextInput)\n";
	t=bb_font_Font::debug()+t;
	t+=dbg_decl("cursorPos",&f_cursorPos);
	return t;
}
int bb_graphics_SetFont(bb_graphics_Image* t_font,int t_firstChar){
	DBG_ENTER("SetFont")
	DBG_LOCAL(t_font,"font")
	DBG_LOCAL(t_firstChar,"firstChar")
	DBG_INFO("/Applications/Monkey/modules/mojo/graphics.monkey<552>");
	if(!((t_font)!=0)){
		DBG_BLOCK();
		DBG_INFO("/Applications/Monkey/modules/mojo/graphics.monkey<553>");
		if(!((bb_graphics_context->f_defaultFont)!=0)){
			DBG_BLOCK();
			DBG_INFO("/Applications/Monkey/modules/mojo/graphics.monkey<554>");
			gc_assign(bb_graphics_context->f_defaultFont,bb_graphics_LoadImage(String(L"mojo_font.png"),96,2));
		}
		DBG_INFO("/Applications/Monkey/modules/mojo/graphics.monkey<556>");
		t_font=bb_graphics_context->f_defaultFont;
		DBG_INFO("/Applications/Monkey/modules/mojo/graphics.monkey<557>");
		t_firstChar=32;
	}
	DBG_INFO("/Applications/Monkey/modules/mojo/graphics.monkey<559>");
	gc_assign(bb_graphics_context->f_font,t_font);
	DBG_INFO("/Applications/Monkey/modules/mojo/graphics.monkey<560>");
	bb_graphics_context->f_firstChar=t_firstChar;
	return 0;
}
gxtkGraphics* bb_graphics_renderDevice;
int bb_graphics_SetMatrix(Float t_ix,Float t_iy,Float t_jx,Float t_jy,Float t_tx,Float t_ty){
	DBG_ENTER("SetMatrix")
	DBG_LOCAL(t_ix,"ix")
	DBG_LOCAL(t_iy,"iy")
	DBG_LOCAL(t_jx,"jx")
	DBG_LOCAL(t_jy,"jy")
	DBG_LOCAL(t_tx,"tx")
	DBG_LOCAL(t_ty,"ty")
	DBG_INFO("/Applications/Monkey/modules/mojo/graphics.monkey<331>");
	bb_graphics_context->f_ix=t_ix;
	DBG_INFO("/Applications/Monkey/modules/mojo/graphics.monkey<332>");
	bb_graphics_context->f_iy=t_iy;
	DBG_INFO("/Applications/Monkey/modules/mojo/graphics.monkey<333>");
	bb_graphics_context->f_jx=t_jx;
	DBG_INFO("/Applications/Monkey/modules/mojo/graphics.monkey<334>");
	bb_graphics_context->f_jy=t_jy;
	DBG_INFO("/Applications/Monkey/modules/mojo/graphics.monkey<335>");
	bb_graphics_context->f_tx=t_tx;
	DBG_INFO("/Applications/Monkey/modules/mojo/graphics.monkey<336>");
	bb_graphics_context->f_ty=t_ty;
	DBG_INFO("/Applications/Monkey/modules/mojo/graphics.monkey<337>");
	bb_graphics_context->f_tformed=((t_ix!=FLOAT(1.0) || t_iy!=FLOAT(0.0) || t_jx!=FLOAT(0.0) || t_jy!=FLOAT(1.0) || t_tx!=FLOAT(0.0) || t_ty!=FLOAT(0.0))?1:0);
	DBG_INFO("/Applications/Monkey/modules/mojo/graphics.monkey<338>");
	bb_graphics_context->f_matDirty=1;
	return 0;
}
int bb_graphics_SetMatrix2(Array<Float > t_m){
	DBG_ENTER("SetMatrix")
	DBG_LOCAL(t_m,"m")
	DBG_INFO("/Applications/Monkey/modules/mojo/graphics.monkey<327>");
	bb_graphics_SetMatrix(t_m.At(0),t_m.At(1),t_m.At(2),t_m.At(3),t_m.At(4),t_m.At(5));
	return 0;
}
int bb_graphics_SetColor(Float t_r,Float t_g,Float t_b){
	DBG_ENTER("SetColor")
	DBG_LOCAL(t_r,"r")
	DBG_LOCAL(t_g,"g")
	DBG_LOCAL(t_b,"b")
	DBG_INFO("/Applications/Monkey/modules/mojo/graphics.monkey<286>");
	bb_graphics_context->f_color_r=t_r;
	DBG_INFO("/Applications/Monkey/modules/mojo/graphics.monkey<287>");
	bb_graphics_context->f_color_g=t_g;
	DBG_INFO("/Applications/Monkey/modules/mojo/graphics.monkey<288>");
	bb_graphics_context->f_color_b=t_b;
	DBG_INFO("/Applications/Monkey/modules/mojo/graphics.monkey<289>");
	bb_graphics_context->f_device->SetColor(t_r,t_g,t_b);
	return 0;
}
int bb_graphics_SetAlpha(Float t_alpha){
	DBG_ENTER("SetAlpha")
	DBG_LOCAL(t_alpha,"alpha")
	DBG_INFO("/Applications/Monkey/modules/mojo/graphics.monkey<297>");
	bb_graphics_context->f_alpha=t_alpha;
	DBG_INFO("/Applications/Monkey/modules/mojo/graphics.monkey<298>");
	bb_graphics_context->f_device->SetAlpha(t_alpha);
	return 0;
}
int bb_graphics_SetBlend(int t_blend){
	DBG_ENTER("SetBlend")
	DBG_LOCAL(t_blend,"blend")
	DBG_INFO("/Applications/Monkey/modules/mojo/graphics.monkey<306>");
	bb_graphics_context->f_blend=t_blend;
	DBG_INFO("/Applications/Monkey/modules/mojo/graphics.monkey<307>");
	bb_graphics_context->f_device->SetBlend(t_blend);
	return 0;
}
int bb_graphics_DeviceWidth(){
	DBG_ENTER("DeviceWidth")
	DBG_INFO("/Applications/Monkey/modules/mojo/graphics.monkey<269>");
	int t_=bb_graphics_context->f_device->Width();
	return t_;
}
int bb_graphics_DeviceHeight(){
	DBG_ENTER("DeviceHeight")
	DBG_INFO("/Applications/Monkey/modules/mojo/graphics.monkey<273>");
	int t_=bb_graphics_context->f_device->Height();
	return t_;
}
int bb_graphics_SetScissor(Float t_x,Float t_y,Float t_width,Float t_height){
	DBG_ENTER("SetScissor")
	DBG_LOCAL(t_x,"x")
	DBG_LOCAL(t_y,"y")
	DBG_LOCAL(t_width,"width")
	DBG_LOCAL(t_height,"height")
	DBG_INFO("/Applications/Monkey/modules/mojo/graphics.monkey<315>");
	bb_graphics_context->f_scissor_x=t_x;
	DBG_INFO("/Applications/Monkey/modules/mojo/graphics.monkey<316>");
	bb_graphics_context->f_scissor_y=t_y;
	DBG_INFO("/Applications/Monkey/modules/mojo/graphics.monkey<317>");
	bb_graphics_context->f_scissor_width=t_width;
	DBG_INFO("/Applications/Monkey/modules/mojo/graphics.monkey<318>");
	bb_graphics_context->f_scissor_height=t_height;
	DBG_INFO("/Applications/Monkey/modules/mojo/graphics.monkey<319>");
	bb_graphics_context->f_device->SetScissor(int(t_x),int(t_y),int(t_width),int(t_height));
	return 0;
}
int bb_graphics_BeginRender(){
	DBG_ENTER("BeginRender")
	DBG_INFO("/Applications/Monkey/modules/mojo/graphics.monkey<254>");
	if(!((bb_graphics_context->f_device->Mode())!=0)){
		DBG_BLOCK();
		return 0;
	}
	DBG_INFO("/Applications/Monkey/modules/mojo/graphics.monkey<255>");
	gc_assign(bb_graphics_renderDevice,bb_graphics_context->f_device);
	DBG_INFO("/Applications/Monkey/modules/mojo/graphics.monkey<256>");
	bb_graphics_context->f_matrixSp=0;
	DBG_INFO("/Applications/Monkey/modules/mojo/graphics.monkey<257>");
	bb_graphics_SetMatrix(FLOAT(1.0),FLOAT(0.0),FLOAT(0.0),FLOAT(1.0),FLOAT(0.0),FLOAT(0.0));
	DBG_INFO("/Applications/Monkey/modules/mojo/graphics.monkey<258>");
	bb_graphics_SetColor(FLOAT(255.0),FLOAT(255.0),FLOAT(255.0));
	DBG_INFO("/Applications/Monkey/modules/mojo/graphics.monkey<259>");
	bb_graphics_SetAlpha(FLOAT(1.0));
	DBG_INFO("/Applications/Monkey/modules/mojo/graphics.monkey<260>");
	bb_graphics_SetBlend(0);
	DBG_INFO("/Applications/Monkey/modules/mojo/graphics.monkey<261>");
	bb_graphics_SetScissor(FLOAT(0.0),FLOAT(0.0),Float(bb_graphics_DeviceWidth()),Float(bb_graphics_DeviceHeight()));
	return 0;
}
int bb_graphics_EndRender(){
	DBG_ENTER("EndRender")
	DBG_INFO("/Applications/Monkey/modules/mojo/graphics.monkey<265>");
	bb_graphics_renderDevice=0;
	return 0;
}
bb_deltatimer_DeltaTimer::bb_deltatimer_DeltaTimer(){
	f_targetFps=FLOAT(.0);
	f_lastTicks=FLOAT(.0);
	f_currentTicks=FLOAT(.0);
	f__frameTime=FLOAT(.0);
	f__delta=FLOAT(.0);
}
bb_deltatimer_DeltaTimer* bb_deltatimer_DeltaTimer::g_new(Float t_fps){
	DBG_ENTER("DeltaTimer.new")
	bb_deltatimer_DeltaTimer *self=this;
	DBG_LOCAL(self,"Self")
	DBG_LOCAL(t_fps,"fps")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/deltatimer.monkey<21>");
	f_targetFps=t_fps;
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/deltatimer.monkey<22>");
	f_lastTicks=Float(bb_app_Millisecs());
	return this;
}
bb_deltatimer_DeltaTimer* bb_deltatimer_DeltaTimer::g_new2(){
	DBG_ENTER("DeltaTimer.new")
	bb_deltatimer_DeltaTimer *self=this;
	DBG_LOCAL(self,"Self")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/deltatimer.monkey<9>");
	return this;
}
Float bb_deltatimer_DeltaTimer::m_frameTime(){
	DBG_ENTER("DeltaTimer.frameTime")
	bb_deltatimer_DeltaTimer *self=this;
	DBG_LOCAL(self,"Self")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/deltatimer.monkey<37>");
	return f__frameTime;
}
void bb_deltatimer_DeltaTimer::m_OnUpdate2(){
	DBG_ENTER("DeltaTimer.OnUpdate")
	bb_deltatimer_DeltaTimer *self=this;
	DBG_LOCAL(self,"Self")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/deltatimer.monkey<26>");
	f_currentTicks=Float(bb_app_Millisecs());
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/deltatimer.monkey<27>");
	f__frameTime=f_currentTicks-f_lastTicks;
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/deltatimer.monkey<28>");
	f__delta=m_frameTime()/(FLOAT(1000.0)/f_targetFps);
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/deltatimer.monkey<29>");
	f_lastTicks=f_currentTicks;
}
Float bb_deltatimer_DeltaTimer::m_delta(){
	DBG_ENTER("DeltaTimer.delta")
	bb_deltatimer_DeltaTimer *self=this;
	DBG_LOCAL(self,"Self")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/deltatimer.monkey<33>");
	return f__delta;
}
void bb_deltatimer_DeltaTimer::mark(){
	Object::mark();
}
String bb_deltatimer_DeltaTimer::debug(){
	String t="(DeltaTimer)\n";
	t+=dbg_decl("_delta",&f__delta);
	t+=dbg_decl("_frameTime",&f__frameTime);
	t+=dbg_decl("currentTicks",&f_currentTicks);
	t+=dbg_decl("lastTicks",&f_lastTicks);
	t+=dbg_decl("targetFps",&f_targetFps);
	return t;
}
int bb_app_SetUpdateRate(int t_hertz){
	DBG_ENTER("SetUpdateRate")
	DBG_LOCAL(t_hertz,"hertz")
	DBG_INFO("/Applications/Monkey/modules/mojo/app.monkey<141>");
	int t_=bb_app_device->SetUpdateRate(t_hertz);
	return t_;
}
int bb_input_TouchDown(int t_index){
	DBG_ENTER("TouchDown")
	DBG_LOCAL(t_index,"index")
	DBG_INFO("/Applications/Monkey/modules/mojo/input.monkey<117>");
	int t_=bb_input_device->KeyDown(384+t_index);
	return t_;
}
bb_touchevent_TouchEvent::bb_touchevent_TouchEvent(){
	f__finger=0;
	f__startTime=0;
	f_positions=(new bb_list_List5)->g_new();
	f__endTime=0;
}
bb_touchevent_TouchEvent* bb_touchevent_TouchEvent::g_new(int t_finger){
	DBG_ENTER("TouchEvent.new")
	bb_touchevent_TouchEvent *self=this;
	DBG_LOCAL(self,"Self")
	DBG_LOCAL(t_finger,"finger")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/touchevent.monkey<22>");
	f__finger=t_finger;
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/touchevent.monkey<23>");
	f__startTime=bb_app_Millisecs();
	return this;
}
bb_touchevent_TouchEvent* bb_touchevent_TouchEvent::g_new2(){
	DBG_ENTER("TouchEvent.new")
	bb_touchevent_TouchEvent *self=this;
	DBG_LOCAL(self,"Self")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/touchevent.monkey<10>");
	return this;
}
bb_vector2d_Vector2D* bb_touchevent_TouchEvent::m_startPos(){
	DBG_ENTER("TouchEvent.startPos")
	bb_touchevent_TouchEvent *self=this;
	DBG_LOCAL(self,"Self")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/touchevent.monkey<70>");
	if(f_positions->m_Count()==0){
		DBG_BLOCK();
		bb_vector2d_Vector2D* t_=(new bb_vector2d_Vector2D)->g_new(FLOAT(0.0),FLOAT(0.0));
		return t_;
	}
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/touchevent.monkey<71>");
	bb_vector2d_Vector2D* t_2=f_positions->m_First();
	return t_2;
}
bb_vector2d_Vector2D* bb_touchevent_TouchEvent::m_prevPos(){
	DBG_ENTER("TouchEvent.prevPos")
	bb_touchevent_TouchEvent *self=this;
	DBG_LOCAL(self,"Self")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/touchevent.monkey<76>");
	if(f_positions->m_Count()==0){
		DBG_BLOCK();
		bb_vector2d_Vector2D* t_=(new bb_vector2d_Vector2D)->g_new(FLOAT(0.0),FLOAT(0.0));
		return t_;
	}
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/touchevent.monkey<77>");
	if(f_positions->m_Count()==1){
		DBG_BLOCK();
		bb_vector2d_Vector2D* t_2=m_startPos();
		return t_2;
	}
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/touchevent.monkey<78>");
	bb_vector2d_Vector2D* t_3=f_positions->m_LastNode()->m_PrevNode()->m_Value();
	return t_3;
}
void bb_touchevent_TouchEvent::m_Add2(bb_vector2d_Vector2D* t_pos){
	DBG_ENTER("TouchEvent.Add")
	bb_touchevent_TouchEvent *self=this;
	DBG_LOCAL(self,"Self")
	DBG_LOCAL(t_pos,"pos")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/touchevent.monkey<38>");
	f__endTime=bb_app_Millisecs();
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/touchevent.monkey<39>");
	if(m_prevPos()->f_x==t_pos->f_x && m_prevPos()->f_y==t_pos->f_y){
		DBG_BLOCK();
		return;
	}
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/touchevent.monkey<40>");
	f_positions->m_AddLast5(t_pos);
}
void bb_touchevent_TouchEvent::m_Trim(int t_size){
	DBG_ENTER("TouchEvent.Trim")
	bb_touchevent_TouchEvent *self=this;
	DBG_LOCAL(self,"Self")
	DBG_LOCAL(t_size,"size")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/touchevent.monkey<27>");
	if(t_size==0){
		DBG_BLOCK();
		DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/touchevent.monkey<28>");
		f_positions->m_Clear();
		return;
	}
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/touchevent.monkey<32>");
	while(f_positions->m_Count()>t_size){
		DBG_BLOCK();
		DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/touchevent.monkey<33>");
		f_positions->m_RemoveFirst();
	}
}
bb_vector2d_Vector2D* bb_touchevent_TouchEvent::m_pos(){
	DBG_ENTER("TouchEvent.pos")
	bb_touchevent_TouchEvent *self=this;
	DBG_LOCAL(self,"Self")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/touchevent.monkey<64>");
	if(f_positions->m_Count()==0){
		DBG_BLOCK();
		bb_vector2d_Vector2D* t_=(new bb_vector2d_Vector2D)->g_new(FLOAT(0.0),FLOAT(0.0));
		return t_;
	}
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/touchevent.monkey<65>");
	bb_vector2d_Vector2D* t_2=f_positions->m_Last();
	return t_2;
}
bb_touchevent_TouchEvent* bb_touchevent_TouchEvent::m_Copy(){
	DBG_ENTER("TouchEvent.Copy")
	bb_touchevent_TouchEvent *self=this;
	DBG_LOCAL(self,"Self")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/touchevent.monkey<44>");
	bb_touchevent_TouchEvent* t_obj=(new bb_touchevent_TouchEvent)->g_new(f__finger);
	DBG_LOCAL(t_obj,"obj")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/touchevent.monkey<46>");
	t_obj->m_Add2(m_pos());
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/touchevent.monkey<47>");
	return t_obj;
}
bb_vector2d_Vector2D* bb_touchevent_TouchEvent::m_startDelta(){
	DBG_ENTER("TouchEvent.startDelta")
	bb_touchevent_TouchEvent *self=this;
	DBG_LOCAL(self,"Self")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/touchevent.monkey<82>");
	bb_vector2d_Vector2D* t_=m_pos()->m_Copy()->m_Sub(m_startPos());
	return t_;
}
void bb_touchevent_TouchEvent::mark(){
	Object::mark();
	gc_mark_q(f_positions);
}
String bb_touchevent_TouchEvent::debug(){
	String t="(TouchEvent)\n";
	t+=dbg_decl("_finger",&f__finger);
	t+=dbg_decl("_startTime",&f__startTime);
	t+=dbg_decl("_endTime",&f__endTime);
	t+=dbg_decl("positions",&f_positions);
	return t;
}
Float bb_input_TouchX(int t_index){
	DBG_ENTER("TouchX")
	DBG_LOCAL(t_index,"index")
	DBG_INFO("/Applications/Monkey/modules/mojo/input.monkey<109>");
	Float t_=bb_input_device->TouchX(t_index);
	return t_;
}
Float bb_input_TouchY(int t_index){
	DBG_ENTER("TouchY")
	DBG_LOCAL(t_index,"index")
	DBG_INFO("/Applications/Monkey/modules/mojo/input.monkey<113>");
	Float t_=bb_input_device->TouchY(t_index);
	return t_;
}
bb_list_List5::bb_list_List5(){
	f__head=((new bb_list_HeadNode5)->g_new());
}
bb_list_List5* bb_list_List5::g_new(){
	DBG_ENTER("List.new")
	bb_list_List5 *self=this;
	DBG_LOCAL(self,"Self")
	return this;
}
bb_list_Node5* bb_list_List5::m_AddLast5(bb_vector2d_Vector2D* t_data){
	DBG_ENTER("List.AddLast")
	bb_list_List5 *self=this;
	DBG_LOCAL(self,"Self")
	DBG_LOCAL(t_data,"data")
	DBG_INFO("/Applications/Monkey/modules/monkey/list.monkey<120>");
	bb_list_Node5* t_=(new bb_list_Node5)->g_new(f__head,f__head->f__pred,t_data);
	return t_;
}
bb_list_List5* bb_list_List5::g_new2(Array<bb_vector2d_Vector2D* > t_data){
	DBG_ENTER("List.new")
	bb_list_List5 *self=this;
	DBG_LOCAL(self,"Self")
	DBG_LOCAL(t_data,"data")
	DBG_INFO("/Applications/Monkey/modules/monkey/list.monkey<13>");
	Array<bb_vector2d_Vector2D* > t_=t_data;
	int t_2=0;
	while(t_2<t_.Length()){
		DBG_BLOCK();
		bb_vector2d_Vector2D* t_t=t_.At(t_2);
		t_2=t_2+1;
		DBG_LOCAL(t_t,"t")
		DBG_INFO("/Applications/Monkey/modules/monkey/list.monkey<14>");
		m_AddLast5(t_t);
	}
	return this;
}
int bb_list_List5::m_Count(){
	DBG_ENTER("List.Count")
	bb_list_List5 *self=this;
	DBG_LOCAL(self,"Self")
	DBG_INFO("/Applications/Monkey/modules/monkey/list.monkey<41>");
	int t_n=0;
	bb_list_Node5* t_node=f__head->f__succ;
	DBG_LOCAL(t_n,"n")
	DBG_LOCAL(t_node,"node")
	DBG_INFO("/Applications/Monkey/modules/monkey/list.monkey<42>");
	while(t_node!=f__head){
		DBG_BLOCK();
		DBG_INFO("/Applications/Monkey/modules/monkey/list.monkey<43>");
		t_node=t_node->f__succ;
		DBG_INFO("/Applications/Monkey/modules/monkey/list.monkey<44>");
		t_n+=1;
	}
	DBG_INFO("/Applications/Monkey/modules/monkey/list.monkey<46>");
	return t_n;
}
bool bb_list_List5::m_IsEmpty(){
	DBG_ENTER("List.IsEmpty")
	bb_list_List5 *self=this;
	DBG_LOCAL(self,"Self")
	DBG_INFO("/Applications/Monkey/modules/monkey/list.monkey<50>");
	bool t_=f__head->f__succ==f__head;
	return t_;
}
bb_vector2d_Vector2D* bb_list_List5::m_First(){
	DBG_ENTER("List.First")
	bb_list_List5 *self=this;
	DBG_LOCAL(self,"Self")
	DBG_INFO("/Applications/Monkey/modules/monkey/list.monkey<71>");
	if(m_IsEmpty()){
		DBG_BLOCK();
		Error(String(L"Illegal operation on empty list"));
	}
	DBG_INFO("/Applications/Monkey/modules/monkey/list.monkey<73>");
	bb_vector2d_Vector2D* t_=f__head->m_NextNode()->f__data;
	return t_;
}
bb_list_Node5* bb_list_List5::m_LastNode(){
	DBG_ENTER("List.LastNode")
	bb_list_List5 *self=this;
	DBG_LOCAL(self,"Self")
	DBG_INFO("/Applications/Monkey/modules/monkey/list.monkey<66>");
	bb_list_Node5* t_=f__head->m_PrevNode();
	return t_;
}
int bb_list_List5::m_Clear(){
	DBG_ENTER("List.Clear")
	bb_list_List5 *self=this;
	DBG_LOCAL(self,"Self")
	DBG_INFO("/Applications/Monkey/modules/monkey/list.monkey<36>");
	gc_assign(f__head->f__succ,f__head);
	DBG_INFO("/Applications/Monkey/modules/monkey/list.monkey<37>");
	gc_assign(f__head->f__pred,f__head);
	return 0;
}
bb_vector2d_Vector2D* bb_list_List5::m_RemoveFirst(){
	DBG_ENTER("List.RemoveFirst")
	bb_list_List5 *self=this;
	DBG_LOCAL(self,"Self")
	DBG_INFO("/Applications/Monkey/modules/monkey/list.monkey<85>");
	if(m_IsEmpty()){
		DBG_BLOCK();
		Error(String(L"Illegal operation on empty list"));
	}
	DBG_INFO("/Applications/Monkey/modules/monkey/list.monkey<87>");
	bb_vector2d_Vector2D* t_data=f__head->m_NextNode()->f__data;
	DBG_LOCAL(t_data,"data")
	DBG_INFO("/Applications/Monkey/modules/monkey/list.monkey<88>");
	f__head->f__succ->m_Remove2();
	DBG_INFO("/Applications/Monkey/modules/monkey/list.monkey<89>");
	return t_data;
}
bb_vector2d_Vector2D* bb_list_List5::m_Last(){
	DBG_ENTER("List.Last")
	bb_list_List5 *self=this;
	DBG_LOCAL(self,"Self")
	DBG_INFO("/Applications/Monkey/modules/monkey/list.monkey<78>");
	if(m_IsEmpty()){
		DBG_BLOCK();
		Error(String(L"Illegal operation on empty list"));
	}
	DBG_INFO("/Applications/Monkey/modules/monkey/list.monkey<80>");
	bb_vector2d_Vector2D* t_=f__head->m_PrevNode()->f__data;
	return t_;
}
void bb_list_List5::mark(){
	Object::mark();
	gc_mark_q(f__head);
}
String bb_list_List5::debug(){
	String t="(List)\n";
	t+=dbg_decl("_head",&f__head);
	return t;
}
bb_list_Node5::bb_list_Node5(){
	f__succ=0;
	f__pred=0;
	f__data=0;
}
bb_list_Node5* bb_list_Node5::g_new(bb_list_Node5* t_succ,bb_list_Node5* t_pred,bb_vector2d_Vector2D* t_data){
	DBG_ENTER("Node.new")
	bb_list_Node5 *self=this;
	DBG_LOCAL(self,"Self")
	DBG_LOCAL(t_succ,"succ")
	DBG_LOCAL(t_pred,"pred")
	DBG_LOCAL(t_data,"data")
	DBG_INFO("/Applications/Monkey/modules/monkey/list.monkey<199>");
	gc_assign(f__succ,t_succ);
	DBG_INFO("/Applications/Monkey/modules/monkey/list.monkey<200>");
	gc_assign(f__pred,t_pred);
	DBG_INFO("/Applications/Monkey/modules/monkey/list.monkey<201>");
	gc_assign(f__succ->f__pred,this);
	DBG_INFO("/Applications/Monkey/modules/monkey/list.monkey<202>");
	gc_assign(f__pred->f__succ,this);
	DBG_INFO("/Applications/Monkey/modules/monkey/list.monkey<203>");
	gc_assign(f__data,t_data);
	return this;
}
bb_list_Node5* bb_list_Node5::g_new2(){
	DBG_ENTER("Node.new")
	bb_list_Node5 *self=this;
	DBG_LOCAL(self,"Self")
	DBG_INFO("/Applications/Monkey/modules/monkey/list.monkey<196>");
	return this;
}
bb_list_Node5* bb_list_Node5::m_GetNode(){
	DBG_ENTER("Node.GetNode")
	bb_list_Node5 *self=this;
	DBG_LOCAL(self,"Self")
	DBG_INFO("/Applications/Monkey/modules/monkey/list.monkey<239>");
	return this;
}
bb_list_Node5* bb_list_Node5::m_NextNode(){
	DBG_ENTER("Node.NextNode")
	bb_list_Node5 *self=this;
	DBG_LOCAL(self,"Self")
	DBG_INFO("/Applications/Monkey/modules/monkey/list.monkey<220>");
	if(f__succ->f__pred!=this){
		DBG_BLOCK();
		Error(String(L"Illegal operation on removed node"));
	}
	DBG_INFO("/Applications/Monkey/modules/monkey/list.monkey<222>");
	bb_list_Node5* t_=f__succ->m_GetNode();
	return t_;
}
bb_list_Node5* bb_list_Node5::m_PrevNode(){
	DBG_ENTER("Node.PrevNode")
	bb_list_Node5 *self=this;
	DBG_LOCAL(self,"Self")
	DBG_INFO("/Applications/Monkey/modules/monkey/list.monkey<227>");
	if(f__succ->f__pred!=this){
		DBG_BLOCK();
		Error(String(L"Illegal operation on removed node"));
	}
	DBG_INFO("/Applications/Monkey/modules/monkey/list.monkey<229>");
	bb_list_Node5* t_=f__pred->m_GetNode();
	return t_;
}
bb_vector2d_Vector2D* bb_list_Node5::m_Value(){
	DBG_ENTER("Node.Value")
	bb_list_Node5 *self=this;
	DBG_LOCAL(self,"Self")
	DBG_INFO("/Applications/Monkey/modules/monkey/list.monkey<207>");
	return f__data;
}
int bb_list_Node5::m_Remove2(){
	DBG_ENTER("Node.Remove")
	bb_list_Node5 *self=this;
	DBG_LOCAL(self,"Self")
	DBG_INFO("/Applications/Monkey/modules/monkey/list.monkey<212>");
	if(f__succ->f__pred!=this){
		DBG_BLOCK();
		Error(String(L"Illegal operation on removed node"));
	}
	DBG_INFO("/Applications/Monkey/modules/monkey/list.monkey<214>");
	gc_assign(f__succ->f__pred,f__pred);
	DBG_INFO("/Applications/Monkey/modules/monkey/list.monkey<215>");
	gc_assign(f__pred->f__succ,f__succ);
	return 0;
}
void bb_list_Node5::mark(){
	Object::mark();
	gc_mark_q(f__succ);
	gc_mark_q(f__pred);
	gc_mark_q(f__data);
}
String bb_list_Node5::debug(){
	String t="(Node)\n";
	t+=dbg_decl("_succ",&f__succ);
	t+=dbg_decl("_pred",&f__pred);
	t+=dbg_decl("_data",&f__data);
	return t;
}
bb_list_HeadNode5::bb_list_HeadNode5(){
}
bb_list_HeadNode5* bb_list_HeadNode5::g_new(){
	DBG_ENTER("HeadNode.new")
	bb_list_HeadNode5 *self=this;
	DBG_LOCAL(self,"Self")
	DBG_INFO("/Applications/Monkey/modules/monkey/list.monkey<248>");
	bb_list_Node5::g_new2();
	DBG_INFO("/Applications/Monkey/modules/monkey/list.monkey<249>");
	gc_assign(f__succ,(this));
	DBG_INFO("/Applications/Monkey/modules/monkey/list.monkey<250>");
	gc_assign(f__pred,(this));
	return this;
}
bb_list_Node5* bb_list_HeadNode5::m_GetNode(){
	DBG_ENTER("HeadNode.GetNode")
	bb_list_HeadNode5 *self=this;
	DBG_LOCAL(self,"Self")
	DBG_INFO("/Applications/Monkey/modules/monkey/list.monkey<254>");
	return 0;
}
void bb_list_HeadNode5::mark(){
	bb_list_Node5::mark();
}
String bb_list_HeadNode5::debug(){
	String t="(HeadNode)\n";
	t=bb_list_Node5::debug()+t;
	return t;
}
int bb_input_EnableKeyboard(){
	DBG_ENTER("EnableKeyboard")
	DBG_INFO("/Applications/Monkey/modules/mojo/input.monkey<65>");
	int t_=bb_input_device->SetKeyboardEnabled(1);
	return t_;
}
int bb_input_GetChar(){
	DBG_ENTER("GetChar")
	DBG_INFO("/Applications/Monkey/modules/mojo/input.monkey<81>");
	int t_=bb_input_device->GetChar();
	return t_;
}
bb_keyevent_KeyEvent::bb_keyevent_KeyEvent(){
	f__code=0;
	f__char=String();
}
bb_keyevent_KeyEvent* bb_keyevent_KeyEvent::g_new(int t_code){
	DBG_ENTER("KeyEvent.new")
	bb_keyevent_KeyEvent *self=this;
	DBG_LOCAL(self,"Self")
	DBG_LOCAL(t_code,"code")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/keyevent.monkey<12>");
	f__code=t_code;
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/keyevent.monkey<13>");
	f__char=String((Char)(f__code),1);
	return this;
}
bb_keyevent_KeyEvent* bb_keyevent_KeyEvent::g_new2(){
	DBG_ENTER("KeyEvent.new")
	bb_keyevent_KeyEvent *self=this;
	DBG_LOCAL(self,"Self")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/keyevent.monkey<3>");
	return this;
}
int bb_keyevent_KeyEvent::m_code(){
	DBG_ENTER("KeyEvent.code")
	bb_keyevent_KeyEvent *self=this;
	DBG_LOCAL(self,"Self")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/keyevent.monkey<17>");
	return f__code;
}
String bb_keyevent_KeyEvent::m_char(){
	DBG_ENTER("KeyEvent.char")
	bb_keyevent_KeyEvent *self=this;
	DBG_LOCAL(self,"Self")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/bono/bono/keyevent.monkey<21>");
	return f__char;
}
void bb_keyevent_KeyEvent::mark(){
	Object::mark();
}
String bb_keyevent_KeyEvent::debug(){
	String t="(KeyEvent)\n";
	t+=dbg_decl("_code",&f__code);
	t+=dbg_decl("_char",&f__char);
	return t;
}
bb_map_Map7::bb_map_Map7(){
	f_root=0;
}
bb_map_Map7* bb_map_Map7::g_new(){
	DBG_ENTER("Map.new")
	bb_map_Map7 *self=this;
	DBG_LOCAL(self,"Self")
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<7>");
	return this;
}
bb_map_Node7* bb_map_Map7::m_FindNode2(int t_key){
	DBG_ENTER("Map.FindNode")
	bb_map_Map7 *self=this;
	DBG_LOCAL(self,"Self")
	DBG_LOCAL(t_key,"key")
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<157>");
	bb_map_Node7* t_node=f_root;
	DBG_LOCAL(t_node,"node")
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<159>");
	while((t_node)!=0){
		DBG_BLOCK();
		DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<160>");
		int t_cmp=m_Compare2(t_key,t_node->f_key);
		DBG_LOCAL(t_cmp,"cmp")
		DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<161>");
		if(t_cmp>0){
			DBG_BLOCK();
			DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<162>");
			t_node=t_node->f_right;
		}else{
			DBG_BLOCK();
			DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<163>");
			if(t_cmp<0){
				DBG_BLOCK();
				DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<164>");
				t_node=t_node->f_left;
			}else{
				DBG_BLOCK();
				DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<166>");
				return t_node;
			}
		}
	}
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<169>");
	return t_node;
}
bool bb_map_Map7::m_Contains2(int t_key){
	DBG_ENTER("Map.Contains")
	bb_map_Map7 *self=this;
	DBG_LOCAL(self,"Self")
	DBG_LOCAL(t_key,"key")
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<25>");
	bool t_=m_FindNode2(t_key)!=0;
	return t_;
}
int bb_map_Map7::m_RotateLeft7(bb_map_Node7* t_node){
	DBG_ENTER("Map.RotateLeft")
	bb_map_Map7 *self=this;
	DBG_LOCAL(self,"Self")
	DBG_LOCAL(t_node,"node")
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<251>");
	bb_map_Node7* t_child=t_node->f_right;
	DBG_LOCAL(t_child,"child")
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<252>");
	gc_assign(t_node->f_right,t_child->f_left);
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<253>");
	if((t_child->f_left)!=0){
		DBG_BLOCK();
		DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<254>");
		gc_assign(t_child->f_left->f_parent,t_node);
	}
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<256>");
	gc_assign(t_child->f_parent,t_node->f_parent);
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<257>");
	if((t_node->f_parent)!=0){
		DBG_BLOCK();
		DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<258>");
		if(t_node==t_node->f_parent->f_left){
			DBG_BLOCK();
			DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<259>");
			gc_assign(t_node->f_parent->f_left,t_child);
		}else{
			DBG_BLOCK();
			DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<261>");
			gc_assign(t_node->f_parent->f_right,t_child);
		}
	}else{
		DBG_BLOCK();
		DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<264>");
		gc_assign(f_root,t_child);
	}
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<266>");
	gc_assign(t_child->f_left,t_node);
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<267>");
	gc_assign(t_node->f_parent,t_child);
	return 0;
}
int bb_map_Map7::m_RotateRight7(bb_map_Node7* t_node){
	DBG_ENTER("Map.RotateRight")
	bb_map_Map7 *self=this;
	DBG_LOCAL(self,"Self")
	DBG_LOCAL(t_node,"node")
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<271>");
	bb_map_Node7* t_child=t_node->f_left;
	DBG_LOCAL(t_child,"child")
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<272>");
	gc_assign(t_node->f_left,t_child->f_right);
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<273>");
	if((t_child->f_right)!=0){
		DBG_BLOCK();
		DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<274>");
		gc_assign(t_child->f_right->f_parent,t_node);
	}
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<276>");
	gc_assign(t_child->f_parent,t_node->f_parent);
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<277>");
	if((t_node->f_parent)!=0){
		DBG_BLOCK();
		DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<278>");
		if(t_node==t_node->f_parent->f_right){
			DBG_BLOCK();
			DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<279>");
			gc_assign(t_node->f_parent->f_right,t_child);
		}else{
			DBG_BLOCK();
			DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<281>");
			gc_assign(t_node->f_parent->f_left,t_child);
		}
	}else{
		DBG_BLOCK();
		DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<284>");
		gc_assign(f_root,t_child);
	}
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<286>");
	gc_assign(t_child->f_right,t_node);
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<287>");
	gc_assign(t_node->f_parent,t_child);
	return 0;
}
int bb_map_Map7::m_InsertFixup7(bb_map_Node7* t_node){
	DBG_ENTER("Map.InsertFixup")
	bb_map_Map7 *self=this;
	DBG_LOCAL(self,"Self")
	DBG_LOCAL(t_node,"node")
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<212>");
	while(((t_node->f_parent)!=0) && t_node->f_parent->f_color==-1 && ((t_node->f_parent->f_parent)!=0)){
		DBG_BLOCK();
		DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<213>");
		if(t_node->f_parent==t_node->f_parent->f_parent->f_left){
			DBG_BLOCK();
			DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<214>");
			bb_map_Node7* t_uncle=t_node->f_parent->f_parent->f_right;
			DBG_LOCAL(t_uncle,"uncle")
			DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<215>");
			if(((t_uncle)!=0) && t_uncle->f_color==-1){
				DBG_BLOCK();
				DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<216>");
				t_node->f_parent->f_color=1;
				DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<217>");
				t_uncle->f_color=1;
				DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<218>");
				t_uncle->f_parent->f_color=-1;
				DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<219>");
				t_node=t_uncle->f_parent;
			}else{
				DBG_BLOCK();
				DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<221>");
				if(t_node==t_node->f_parent->f_right){
					DBG_BLOCK();
					DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<222>");
					t_node=t_node->f_parent;
					DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<223>");
					m_RotateLeft7(t_node);
				}
				DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<225>");
				t_node->f_parent->f_color=1;
				DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<226>");
				t_node->f_parent->f_parent->f_color=-1;
				DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<227>");
				m_RotateRight7(t_node->f_parent->f_parent);
			}
		}else{
			DBG_BLOCK();
			DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<230>");
			bb_map_Node7* t_uncle2=t_node->f_parent->f_parent->f_left;
			DBG_LOCAL(t_uncle2,"uncle")
			DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<231>");
			if(((t_uncle2)!=0) && t_uncle2->f_color==-1){
				DBG_BLOCK();
				DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<232>");
				t_node->f_parent->f_color=1;
				DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<233>");
				t_uncle2->f_color=1;
				DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<234>");
				t_uncle2->f_parent->f_color=-1;
				DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<235>");
				t_node=t_uncle2->f_parent;
			}else{
				DBG_BLOCK();
				DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<237>");
				if(t_node==t_node->f_parent->f_left){
					DBG_BLOCK();
					DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<238>");
					t_node=t_node->f_parent;
					DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<239>");
					m_RotateRight7(t_node);
				}
				DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<241>");
				t_node->f_parent->f_color=1;
				DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<242>");
				t_node->f_parent->f_parent->f_color=-1;
				DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<243>");
				m_RotateLeft7(t_node->f_parent->f_parent);
			}
		}
	}
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<247>");
	f_root->f_color=1;
	return 0;
}
bool bb_map_Map7::m_Add6(int t_key,bb_keyevent_KeyEvent* t_value){
	DBG_ENTER("Map.Add")
	bb_map_Map7 *self=this;
	DBG_LOCAL(self,"Self")
	DBG_LOCAL(t_key,"key")
	DBG_LOCAL(t_value,"value")
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<61>");
	bb_map_Node7* t_node=f_root;
	DBG_LOCAL(t_node,"node")
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<62>");
	bb_map_Node7* t_parent=0;
	int t_cmp=0;
	DBG_LOCAL(t_parent,"parent")
	DBG_LOCAL(t_cmp,"cmp")
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<64>");
	while((t_node)!=0){
		DBG_BLOCK();
		DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<65>");
		t_parent=t_node;
		DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<66>");
		t_cmp=m_Compare2(t_key,t_node->f_key);
		DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<67>");
		if(t_cmp>0){
			DBG_BLOCK();
			DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<68>");
			t_node=t_node->f_right;
		}else{
			DBG_BLOCK();
			DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<69>");
			if(t_cmp<0){
				DBG_BLOCK();
				DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<70>");
				t_node=t_node->f_left;
			}else{
				DBG_BLOCK();
				DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<72>");
				return false;
			}
		}
	}
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<76>");
	t_node=(new bb_map_Node7)->g_new(t_key,t_value,-1,t_parent);
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<78>");
	if((t_parent)!=0){
		DBG_BLOCK();
		DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<79>");
		if(t_cmp>0){
			DBG_BLOCK();
			DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<80>");
			gc_assign(t_parent->f_right,t_node);
		}else{
			DBG_BLOCK();
			DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<82>");
			gc_assign(t_parent->f_left,t_node);
		}
		DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<84>");
		m_InsertFixup7(t_node);
	}else{
		DBG_BLOCK();
		DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<86>");
		gc_assign(f_root,t_node);
	}
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<88>");
	return true;
}
bb_map_MapValues* bb_map_Map7::m_Values(){
	DBG_ENTER("Map.Values")
	bb_map_Map7 *self=this;
	DBG_LOCAL(self,"Self")
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<117>");
	bb_map_MapValues* t_=(new bb_map_MapValues)->g_new(this);
	return t_;
}
bb_map_Node7* bb_map_Map7::m_FirstNode(){
	DBG_ENTER("Map.FirstNode")
	bb_map_Map7 *self=this;
	DBG_LOCAL(self,"Self")
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<137>");
	if(!((f_root)!=0)){
		DBG_BLOCK();
		return 0;
	}
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<139>");
	bb_map_Node7* t_node=f_root;
	DBG_LOCAL(t_node,"node")
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<140>");
	while((t_node->f_left)!=0){
		DBG_BLOCK();
		DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<141>");
		t_node=t_node->f_left;
	}
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<143>");
	return t_node;
}
int bb_map_Map7::m_DeleteFixup2(bb_map_Node7* t_node,bb_map_Node7* t_parent){
	DBG_ENTER("Map.DeleteFixup")
	bb_map_Map7 *self=this;
	DBG_LOCAL(self,"Self")
	DBG_LOCAL(t_node,"node")
	DBG_LOCAL(t_parent,"parent")
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<292>");
	while(t_node!=f_root && (!((t_node)!=0) || t_node->f_color==1)){
		DBG_BLOCK();
		DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<294>");
		if(t_node==t_parent->f_left){
			DBG_BLOCK();
			DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<296>");
			bb_map_Node7* t_sib=t_parent->f_right;
			DBG_LOCAL(t_sib,"sib")
			DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<298>");
			if(t_sib->f_color==-1){
				DBG_BLOCK();
				DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<299>");
				t_sib->f_color=1;
				DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<300>");
				t_parent->f_color=-1;
				DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<301>");
				m_RotateLeft7(t_parent);
				DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<302>");
				t_sib=t_parent->f_right;
			}
			DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<305>");
			if((!((t_sib->f_left)!=0) || t_sib->f_left->f_color==1) && (!((t_sib->f_right)!=0) || t_sib->f_right->f_color==1)){
				DBG_BLOCK();
				DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<306>");
				t_sib->f_color=-1;
				DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<307>");
				t_node=t_parent;
				DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<308>");
				t_parent=t_parent->f_parent;
			}else{
				DBG_BLOCK();
				DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<310>");
				if(!((t_sib->f_right)!=0) || t_sib->f_right->f_color==1){
					DBG_BLOCK();
					DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<311>");
					t_sib->f_left->f_color=1;
					DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<312>");
					t_sib->f_color=-1;
					DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<313>");
					m_RotateRight7(t_sib);
					DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<314>");
					t_sib=t_parent->f_right;
				}
				DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<316>");
				t_sib->f_color=t_parent->f_color;
				DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<317>");
				t_parent->f_color=1;
				DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<318>");
				t_sib->f_right->f_color=1;
				DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<319>");
				m_RotateLeft7(t_parent);
				DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<320>");
				t_node=f_root;
			}
		}else{
			DBG_BLOCK();
			DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<323>");
			bb_map_Node7* t_sib2=t_parent->f_left;
			DBG_LOCAL(t_sib2,"sib")
			DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<325>");
			if(t_sib2->f_color==-1){
				DBG_BLOCK();
				DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<326>");
				t_sib2->f_color=1;
				DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<327>");
				t_parent->f_color=-1;
				DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<328>");
				m_RotateRight7(t_parent);
				DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<329>");
				t_sib2=t_parent->f_left;
			}
			DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<332>");
			if((!((t_sib2->f_right)!=0) || t_sib2->f_right->f_color==1) && (!((t_sib2->f_left)!=0) || t_sib2->f_left->f_color==1)){
				DBG_BLOCK();
				DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<333>");
				t_sib2->f_color=-1;
				DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<334>");
				t_node=t_parent;
				DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<335>");
				t_parent=t_parent->f_parent;
			}else{
				DBG_BLOCK();
				DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<337>");
				if(!((t_sib2->f_left)!=0) || t_sib2->f_left->f_color==1){
					DBG_BLOCK();
					DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<338>");
					t_sib2->f_right->f_color=1;
					DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<339>");
					t_sib2->f_color=-1;
					DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<340>");
					m_RotateLeft7(t_sib2);
					DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<341>");
					t_sib2=t_parent->f_left;
				}
				DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<343>");
				t_sib2->f_color=t_parent->f_color;
				DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<344>");
				t_parent->f_color=1;
				DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<345>");
				t_sib2->f_left->f_color=1;
				DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<346>");
				m_RotateRight7(t_parent);
				DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<347>");
				t_node=f_root;
			}
		}
	}
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<351>");
	if((t_node)!=0){
		DBG_BLOCK();
		t_node->f_color=1;
	}
	return 0;
}
int bb_map_Map7::m_RemoveNode2(bb_map_Node7* t_node){
	DBG_ENTER("Map.RemoveNode")
	bb_map_Map7 *self=this;
	DBG_LOCAL(self,"Self")
	DBG_LOCAL(t_node,"node")
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<173>");
	bb_map_Node7* t_splice=0;
	bb_map_Node7* t_child=0;
	DBG_LOCAL(t_splice,"splice")
	DBG_LOCAL(t_child,"child")
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<175>");
	if(!((t_node->f_left)!=0)){
		DBG_BLOCK();
		DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<176>");
		t_splice=t_node;
		DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<177>");
		t_child=t_node->f_right;
	}else{
		DBG_BLOCK();
		DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<178>");
		if(!((t_node->f_right)!=0)){
			DBG_BLOCK();
			DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<179>");
			t_splice=t_node;
			DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<180>");
			t_child=t_node->f_left;
		}else{
			DBG_BLOCK();
			DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<182>");
			t_splice=t_node->f_left;
			DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<183>");
			while((t_splice->f_right)!=0){
				DBG_BLOCK();
				DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<184>");
				t_splice=t_splice->f_right;
			}
			DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<186>");
			t_child=t_splice->f_left;
			DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<187>");
			t_node->f_key=t_splice->f_key;
			DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<188>");
			gc_assign(t_node->f_value,t_splice->f_value);
		}
	}
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<191>");
	bb_map_Node7* t_parent=t_splice->f_parent;
	DBG_LOCAL(t_parent,"parent")
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<193>");
	if((t_child)!=0){
		DBG_BLOCK();
		DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<194>");
		gc_assign(t_child->f_parent,t_parent);
	}
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<197>");
	if(!((t_parent)!=0)){
		DBG_BLOCK();
		DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<198>");
		gc_assign(f_root,t_child);
		DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<199>");
		return 0;
	}
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<202>");
	if(t_splice==t_parent->f_left){
		DBG_BLOCK();
		DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<203>");
		gc_assign(t_parent->f_left,t_child);
	}else{
		DBG_BLOCK();
		DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<205>");
		gc_assign(t_parent->f_right,t_child);
	}
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<208>");
	if(t_splice->f_color==1){
		DBG_BLOCK();
		m_DeleteFixup2(t_child,t_parent);
	}
	return 0;
}
int bb_map_Map7::m_Remove4(int t_key){
	DBG_ENTER("Map.Remove")
	bb_map_Map7 *self=this;
	DBG_LOCAL(self,"Self")
	DBG_LOCAL(t_key,"key")
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<106>");
	bb_map_Node7* t_node=m_FindNode2(t_key);
	DBG_LOCAL(t_node,"node")
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<107>");
	if(!((t_node)!=0)){
		DBG_BLOCK();
		return 0;
	}
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<108>");
	m_RemoveNode2(t_node);
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<109>");
	return 1;
}
int bb_map_Map7::m_Clear(){
	DBG_ENTER("Map.Clear")
	bb_map_Map7 *self=this;
	DBG_LOCAL(self,"Self")
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<13>");
	f_root=0;
	return 0;
}
void bb_map_Map7::mark(){
	Object::mark();
	gc_mark_q(f_root);
}
String bb_map_Map7::debug(){
	String t="(Map)\n";
	t+=dbg_decl("root",&f_root);
	return t;
}
bb_map_IntMap2::bb_map_IntMap2(){
}
bb_map_IntMap2* bb_map_IntMap2::g_new(){
	DBG_ENTER("IntMap.new")
	bb_map_IntMap2 *self=this;
	DBG_LOCAL(self,"Self")
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<534>");
	bb_map_Map7::g_new();
	return this;
}
int bb_map_IntMap2::m_Compare2(int t_lhs,int t_rhs){
	DBG_ENTER("IntMap.Compare")
	bb_map_IntMap2 *self=this;
	DBG_LOCAL(self,"Self")
	DBG_LOCAL(t_lhs,"lhs")
	DBG_LOCAL(t_rhs,"rhs")
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<537>");
	int t_=t_lhs-t_rhs;
	return t_;
}
void bb_map_IntMap2::mark(){
	bb_map_Map7::mark();
}
String bb_map_IntMap2::debug(){
	String t="(IntMap)\n";
	t=bb_map_Map7::debug()+t;
	return t;
}
bb_map_Node7::bb_map_Node7(){
	f_key=0;
	f_right=0;
	f_left=0;
	f_value=0;
	f_color=0;
	f_parent=0;
}
bb_map_Node7* bb_map_Node7::g_new(int t_key,bb_keyevent_KeyEvent* t_value,int t_color,bb_map_Node7* t_parent){
	DBG_ENTER("Node.new")
	bb_map_Node7 *self=this;
	DBG_LOCAL(self,"Self")
	DBG_LOCAL(t_key,"key")
	DBG_LOCAL(t_value,"value")
	DBG_LOCAL(t_color,"color")
	DBG_LOCAL(t_parent,"parent")
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<364>");
	this->f_key=t_key;
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<365>");
	gc_assign(this->f_value,t_value);
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<366>");
	this->f_color=t_color;
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<367>");
	gc_assign(this->f_parent,t_parent);
	return this;
}
bb_map_Node7* bb_map_Node7::g_new2(){
	DBG_ENTER("Node.new")
	bb_map_Node7 *self=this;
	DBG_LOCAL(self,"Self")
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<361>");
	return this;
}
bb_map_Node7* bb_map_Node7::m_NextNode(){
	DBG_ENTER("Node.NextNode")
	bb_map_Node7 *self=this;
	DBG_LOCAL(self,"Self")
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<385>");
	bb_map_Node7* t_node=0;
	DBG_LOCAL(t_node,"node")
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<386>");
	if((f_right)!=0){
		DBG_BLOCK();
		DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<387>");
		t_node=f_right;
		DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<388>");
		while((t_node->f_left)!=0){
			DBG_BLOCK();
			DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<389>");
			t_node=t_node->f_left;
		}
		DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<391>");
		return t_node;
	}
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<393>");
	t_node=this;
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<394>");
	bb_map_Node7* t_parent=this->f_parent;
	DBG_LOCAL(t_parent,"parent")
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<395>");
	while(((t_parent)!=0) && t_node==t_parent->f_right){
		DBG_BLOCK();
		DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<396>");
		t_node=t_parent;
		DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<397>");
		t_parent=t_parent->f_parent;
	}
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<399>");
	return t_parent;
}
void bb_map_Node7::mark(){
	Object::mark();
	gc_mark_q(f_right);
	gc_mark_q(f_left);
	gc_mark_q(f_value);
	gc_mark_q(f_parent);
}
String bb_map_Node7::debug(){
	String t="(Node)\n";
	t+=dbg_decl("key",&f_key);
	t+=dbg_decl("value",&f_value);
	t+=dbg_decl("color",&f_color);
	t+=dbg_decl("parent",&f_parent);
	t+=dbg_decl("left",&f_left);
	t+=dbg_decl("right",&f_right);
	return t;
}
bb_map_MapValues::bb_map_MapValues(){
	f_map=0;
}
bb_map_MapValues* bb_map_MapValues::g_new(bb_map_Map7* t_map){
	DBG_ENTER("MapValues.new")
	bb_map_MapValues *self=this;
	DBG_LOCAL(self,"Self")
	DBG_LOCAL(t_map,"map")
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<519>");
	gc_assign(this->f_map,t_map);
	return this;
}
bb_map_MapValues* bb_map_MapValues::g_new2(){
	DBG_ENTER("MapValues.new")
	bb_map_MapValues *self=this;
	DBG_LOCAL(self,"Self")
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<516>");
	return this;
}
bb_map_ValueEnumerator* bb_map_MapValues::m_ObjectEnumerator(){
	DBG_ENTER("MapValues.ObjectEnumerator")
	bb_map_MapValues *self=this;
	DBG_LOCAL(self,"Self")
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<523>");
	bb_map_ValueEnumerator* t_=(new bb_map_ValueEnumerator)->g_new(f_map->m_FirstNode());
	return t_;
}
void bb_map_MapValues::mark(){
	Object::mark();
	gc_mark_q(f_map);
}
String bb_map_MapValues::debug(){
	String t="(MapValues)\n";
	t+=dbg_decl("map",&f_map);
	return t;
}
bb_map_ValueEnumerator::bb_map_ValueEnumerator(){
	f_node=0;
}
bb_map_ValueEnumerator* bb_map_ValueEnumerator::g_new(bb_map_Node7* t_node){
	DBG_ENTER("ValueEnumerator.new")
	bb_map_ValueEnumerator *self=this;
	DBG_LOCAL(self,"Self")
	DBG_LOCAL(t_node,"node")
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<481>");
	gc_assign(this->f_node,t_node);
	return this;
}
bb_map_ValueEnumerator* bb_map_ValueEnumerator::g_new2(){
	DBG_ENTER("ValueEnumerator.new")
	bb_map_ValueEnumerator *self=this;
	DBG_LOCAL(self,"Self")
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<478>");
	return this;
}
bool bb_map_ValueEnumerator::m_HasNext(){
	DBG_ENTER("ValueEnumerator.HasNext")
	bb_map_ValueEnumerator *self=this;
	DBG_LOCAL(self,"Self")
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<485>");
	bool t_=f_node!=0;
	return t_;
}
bb_keyevent_KeyEvent* bb_map_ValueEnumerator::m_NextObject(){
	DBG_ENTER("ValueEnumerator.NextObject")
	bb_map_ValueEnumerator *self=this;
	DBG_LOCAL(self,"Self")
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<489>");
	bb_map_Node7* t_t=f_node;
	DBG_LOCAL(t_t,"t")
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<490>");
	gc_assign(f_node,f_node->m_NextNode());
	DBG_INFO("/Applications/Monkey/modules/monkey/map.monkey<491>");
	return t_t->f_value;
}
void bb_map_ValueEnumerator::mark(){
	Object::mark();
	gc_mark_q(f_node);
}
String bb_map_ValueEnumerator::debug(){
	String t="(ValueEnumerator)\n";
	t+=dbg_decl("node",&f_node);
	return t;
}
int bb_input_DisableKeyboard(){
	DBG_ENTER("DisableKeyboard")
	DBG_INFO("/Applications/Monkey/modules/mojo/input.monkey<69>");
	int t_=bb_input_device->SetKeyboardEnabled(0);
	return t_;
}
int bb_graphics_PushMatrix(){
	DBG_ENTER("PushMatrix")
	DBG_INFO("/Applications/Monkey/modules/mojo/graphics.monkey<346>");
	int t_sp=bb_graphics_context->f_matrixSp;
	DBG_LOCAL(t_sp,"sp")
	DBG_INFO("/Applications/Monkey/modules/mojo/graphics.monkey<347>");
	bb_graphics_context->f_matrixStack.At(t_sp+0)=bb_graphics_context->f_ix;
	DBG_INFO("/Applications/Monkey/modules/mojo/graphics.monkey<348>");
	bb_graphics_context->f_matrixStack.At(t_sp+1)=bb_graphics_context->f_iy;
	DBG_INFO("/Applications/Monkey/modules/mojo/graphics.monkey<349>");
	bb_graphics_context->f_matrixStack.At(t_sp+2)=bb_graphics_context->f_jx;
	DBG_INFO("/Applications/Monkey/modules/mojo/graphics.monkey<350>");
	bb_graphics_context->f_matrixStack.At(t_sp+3)=bb_graphics_context->f_jy;
	DBG_INFO("/Applications/Monkey/modules/mojo/graphics.monkey<351>");
	bb_graphics_context->f_matrixStack.At(t_sp+4)=bb_graphics_context->f_tx;
	DBG_INFO("/Applications/Monkey/modules/mojo/graphics.monkey<352>");
	bb_graphics_context->f_matrixStack.At(t_sp+5)=bb_graphics_context->f_ty;
	DBG_INFO("/Applications/Monkey/modules/mojo/graphics.monkey<353>");
	bb_graphics_context->f_matrixSp=t_sp+6;
	return 0;
}
int bb_graphics_Transform(Float t_ix,Float t_iy,Float t_jx,Float t_jy,Float t_tx,Float t_ty){
	DBG_ENTER("Transform")
	DBG_LOCAL(t_ix,"ix")
	DBG_LOCAL(t_iy,"iy")
	DBG_LOCAL(t_jx,"jx")
	DBG_LOCAL(t_jy,"jy")
	DBG_LOCAL(t_tx,"tx")
	DBG_LOCAL(t_ty,"ty")
	DBG_INFO("/Applications/Monkey/modules/mojo/graphics.monkey<367>");
	Float t_ix2=t_ix*bb_graphics_context->f_ix+t_iy*bb_graphics_context->f_jx;
	DBG_LOCAL(t_ix2,"ix2")
	DBG_INFO("/Applications/Monkey/modules/mojo/graphics.monkey<368>");
	Float t_iy2=t_ix*bb_graphics_context->f_iy+t_iy*bb_graphics_context->f_jy;
	DBG_LOCAL(t_iy2,"iy2")
	DBG_INFO("/Applications/Monkey/modules/mojo/graphics.monkey<369>");
	Float t_jx2=t_jx*bb_graphics_context->f_ix+t_jy*bb_graphics_context->f_jx;
	DBG_LOCAL(t_jx2,"jx2")
	DBG_INFO("/Applications/Monkey/modules/mojo/graphics.monkey<370>");
	Float t_jy2=t_jx*bb_graphics_context->f_iy+t_jy*bb_graphics_context->f_jy;
	DBG_LOCAL(t_jy2,"jy2")
	DBG_INFO("/Applications/Monkey/modules/mojo/graphics.monkey<371>");
	Float t_tx2=t_tx*bb_graphics_context->f_ix+t_ty*bb_graphics_context->f_jx+bb_graphics_context->f_tx;
	DBG_LOCAL(t_tx2,"tx2")
	DBG_INFO("/Applications/Monkey/modules/mojo/graphics.monkey<372>");
	Float t_ty2=t_tx*bb_graphics_context->f_iy+t_ty*bb_graphics_context->f_jy+bb_graphics_context->f_ty;
	DBG_LOCAL(t_ty2,"ty2")
	DBG_INFO("/Applications/Monkey/modules/mojo/graphics.monkey<373>");
	bb_graphics_SetMatrix(t_ix2,t_iy2,t_jx2,t_jy2,t_tx2,t_ty2);
	return 0;
}
int bb_graphics_Transform2(Array<Float > t_m){
	DBG_ENTER("Transform")
	DBG_LOCAL(t_m,"m")
	DBG_INFO("/Applications/Monkey/modules/mojo/graphics.monkey<363>");
	bb_graphics_Transform(t_m.At(0),t_m.At(1),t_m.At(2),t_m.At(3),t_m.At(4),t_m.At(5));
	return 0;
}
int bb_graphics_Scale(Float t_x,Float t_y){
	DBG_ENTER("Scale")
	DBG_LOCAL(t_x,"x")
	DBG_LOCAL(t_y,"y")
	DBG_INFO("/Applications/Monkey/modules/mojo/graphics.monkey<381>");
	bb_graphics_Transform(t_x,FLOAT(0.0),FLOAT(0.0),t_y,FLOAT(0.0),FLOAT(0.0));
	return 0;
}
int bb_graphics_DebugRenderDevice(){
	DBG_ENTER("DebugRenderDevice")
	DBG_INFO("/Applications/Monkey/modules/mojo/graphics.monkey<240>");
	if(!((bb_graphics_renderDevice)!=0)){
		DBG_BLOCK();
		Error(String(L"Rendering operations can only be performed inside OnRender"));
	}
	return 0;
}
int bb_graphics_Cls(Float t_r,Float t_g,Float t_b){
	DBG_ENTER("Cls")
	DBG_LOCAL(t_r,"r")
	DBG_LOCAL(t_g,"g")
	DBG_LOCAL(t_b,"b")
	DBG_INFO("/Applications/Monkey/modules/mojo/graphics.monkey<390>");
	bb_graphics_DebugRenderDevice();
	DBG_INFO("/Applications/Monkey/modules/mojo/graphics.monkey<392>");
	bb_graphics_renderDevice->Cls(t_r,t_g,t_b);
	return 0;
}
int bb_graphics_PopMatrix(){
	DBG_ENTER("PopMatrix")
	DBG_INFO("/Applications/Monkey/modules/mojo/graphics.monkey<357>");
	int t_sp=bb_graphics_context->f_matrixSp-6;
	DBG_LOCAL(t_sp,"sp")
	DBG_INFO("/Applications/Monkey/modules/mojo/graphics.monkey<358>");
	bb_graphics_SetMatrix(bb_graphics_context->f_matrixStack.At(t_sp+0),bb_graphics_context->f_matrixStack.At(t_sp+1),bb_graphics_context->f_matrixStack.At(t_sp+2),bb_graphics_context->f_matrixStack.At(t_sp+3),bb_graphics_context->f_matrixStack.At(t_sp+4),bb_graphics_context->f_matrixStack.At(t_sp+5));
	DBG_INFO("/Applications/Monkey/modules/mojo/graphics.monkey<359>");
	bb_graphics_context->f_matrixSp=t_sp;
	return 0;
}
int bb_graphics_Translate(Float t_x,Float t_y){
	DBG_ENTER("Translate")
	DBG_LOCAL(t_x,"x")
	DBG_LOCAL(t_y,"y")
	DBG_INFO("/Applications/Monkey/modules/mojo/graphics.monkey<377>");
	bb_graphics_Transform(FLOAT(1.0),FLOAT(0.0),FLOAT(0.0),FLOAT(1.0),t_x,t_y);
	return 0;
}
int bb_graphics_ValidateMatrix(){
	DBG_ENTER("ValidateMatrix")
	DBG_INFO("/Applications/Monkey/modules/mojo/graphics.monkey<233>");
	if((bb_graphics_context->f_matDirty)!=0){
		DBG_BLOCK();
		DBG_INFO("/Applications/Monkey/modules/mojo/graphics.monkey<234>");
		bb_graphics_context->f_device->SetMatrix(bb_graphics_context->f_ix,bb_graphics_context->f_iy,bb_graphics_context->f_jx,bb_graphics_context->f_jy,bb_graphics_context->f_tx,bb_graphics_context->f_ty);
		DBG_INFO("/Applications/Monkey/modules/mojo/graphics.monkey<235>");
		bb_graphics_context->f_matDirty=0;
	}
	return 0;
}
int bb_graphics_DrawImage(bb_graphics_Image* t_image,Float t_x,Float t_y,int t_frame){
	DBG_ENTER("DrawImage")
	DBG_LOCAL(t_image,"image")
	DBG_LOCAL(t_x,"x")
	DBG_LOCAL(t_y,"y")
	DBG_LOCAL(t_frame,"frame")
	DBG_INFO("/Applications/Monkey/modules/mojo/graphics.monkey<453>");
	bb_graphics_DebugRenderDevice();
	DBG_INFO("/Applications/Monkey/modules/mojo/graphics.monkey<455>");
	bb_graphics_Frame* t_f=t_image->f_frames.At(t_frame);
	DBG_LOCAL(t_f,"f")
	DBG_INFO("/Applications/Monkey/modules/mojo/graphics.monkey<457>");
	if((bb_graphics_context->f_tformed)!=0){
		DBG_BLOCK();
		DBG_INFO("/Applications/Monkey/modules/mojo/graphics.monkey<458>");
		bb_graphics_PushMatrix();
		DBG_INFO("/Applications/Monkey/modules/mojo/graphics.monkey<460>");
		bb_graphics_Translate(t_x-t_image->f_tx,t_y-t_image->f_ty);
		DBG_INFO("/Applications/Monkey/modules/mojo/graphics.monkey<462>");
		bb_graphics_ValidateMatrix();
		DBG_INFO("/Applications/Monkey/modules/mojo/graphics.monkey<464>");
		if((t_image->f_flags&65536)!=0){
			DBG_BLOCK();
			DBG_INFO("/Applications/Monkey/modules/mojo/graphics.monkey<465>");
			bb_graphics_context->f_device->DrawSurface(t_image->f_surface,FLOAT(0.0),FLOAT(0.0));
		}else{
			DBG_BLOCK();
			DBG_INFO("/Applications/Monkey/modules/mojo/graphics.monkey<467>");
			bb_graphics_context->f_device->DrawSurface2(t_image->f_surface,FLOAT(0.0),FLOAT(0.0),t_f->f_x,t_f->f_y,t_image->f_width,t_image->f_height);
		}
		DBG_INFO("/Applications/Monkey/modules/mojo/graphics.monkey<470>");
		bb_graphics_PopMatrix();
	}else{
		DBG_BLOCK();
		DBG_INFO("/Applications/Monkey/modules/mojo/graphics.monkey<472>");
		bb_graphics_ValidateMatrix();
		DBG_INFO("/Applications/Monkey/modules/mojo/graphics.monkey<474>");
		if((t_image->f_flags&65536)!=0){
			DBG_BLOCK();
			DBG_INFO("/Applications/Monkey/modules/mojo/graphics.monkey<475>");
			bb_graphics_context->f_device->DrawSurface(t_image->f_surface,t_x-t_image->f_tx,t_y-t_image->f_ty);
		}else{
			DBG_BLOCK();
			DBG_INFO("/Applications/Monkey/modules/mojo/graphics.monkey<477>");
			bb_graphics_context->f_device->DrawSurface2(t_image->f_surface,t_x-t_image->f_tx,t_y-t_image->f_ty,t_f->f_x,t_f->f_y,t_image->f_width,t_image->f_height);
		}
	}
	return 0;
}
int bb_graphics_Rotate(Float t_angle){
	DBG_ENTER("Rotate")
	DBG_LOCAL(t_angle,"angle")
	DBG_INFO("/Applications/Monkey/modules/mojo/graphics.monkey<385>");
	bb_graphics_Transform((Float)cos((t_angle)*D2R),-(Float)sin((t_angle)*D2R),(Float)sin((t_angle)*D2R),(Float)cos((t_angle)*D2R),FLOAT(0.0),FLOAT(0.0));
	return 0;
}
int bb_graphics_DrawImage2(bb_graphics_Image* t_image,Float t_x,Float t_y,Float t_rotation,Float t_scaleX,Float t_scaleY,int t_frame){
	DBG_ENTER("DrawImage")
	DBG_LOCAL(t_image,"image")
	DBG_LOCAL(t_x,"x")
	DBG_LOCAL(t_y,"y")
	DBG_LOCAL(t_rotation,"rotation")
	DBG_LOCAL(t_scaleX,"scaleX")
	DBG_LOCAL(t_scaleY,"scaleY")
	DBG_LOCAL(t_frame,"frame")
	DBG_INFO("/Applications/Monkey/modules/mojo/graphics.monkey<484>");
	bb_graphics_DebugRenderDevice();
	DBG_INFO("/Applications/Monkey/modules/mojo/graphics.monkey<486>");
	bb_graphics_Frame* t_f=t_image->f_frames.At(t_frame);
	DBG_LOCAL(t_f,"f")
	DBG_INFO("/Applications/Monkey/modules/mojo/graphics.monkey<488>");
	bb_graphics_PushMatrix();
	DBG_INFO("/Applications/Monkey/modules/mojo/graphics.monkey<490>");
	bb_graphics_Translate(t_x,t_y);
	DBG_INFO("/Applications/Monkey/modules/mojo/graphics.monkey<491>");
	bb_graphics_Rotate(t_rotation);
	DBG_INFO("/Applications/Monkey/modules/mojo/graphics.monkey<492>");
	bb_graphics_Scale(t_scaleX,t_scaleY);
	DBG_INFO("/Applications/Monkey/modules/mojo/graphics.monkey<494>");
	bb_graphics_Translate(-t_image->f_tx,-t_image->f_ty);
	DBG_INFO("/Applications/Monkey/modules/mojo/graphics.monkey<496>");
	bb_graphics_ValidateMatrix();
	DBG_INFO("/Applications/Monkey/modules/mojo/graphics.monkey<498>");
	if((t_image->f_flags&65536)!=0){
		DBG_BLOCK();
		DBG_INFO("/Applications/Monkey/modules/mojo/graphics.monkey<499>");
		bb_graphics_context->f_device->DrawSurface(t_image->f_surface,FLOAT(0.0),FLOAT(0.0));
	}else{
		DBG_BLOCK();
		DBG_INFO("/Applications/Monkey/modules/mojo/graphics.monkey<501>");
		bb_graphics_context->f_device->DrawSurface2(t_image->f_surface,FLOAT(0.0),FLOAT(0.0),t_f->f_x,t_f->f_y,t_image->f_width,t_image->f_height);
	}
	DBG_INFO("/Applications/Monkey/modules/mojo/graphics.monkey<504>");
	bb_graphics_PopMatrix();
	return 0;
}
int bb_graphics_DrawRect(Float t_x,Float t_y,Float t_w,Float t_h){
	DBG_ENTER("DrawRect")
	DBG_LOCAL(t_x,"x")
	DBG_LOCAL(t_y,"y")
	DBG_LOCAL(t_w,"w")
	DBG_LOCAL(t_h,"h")
	DBG_INFO("/Applications/Monkey/modules/mojo/graphics.monkey<405>");
	bb_graphics_DebugRenderDevice();
	DBG_INFO("/Applications/Monkey/modules/mojo/graphics.monkey<407>");
	bb_graphics_ValidateMatrix();
	DBG_INFO("/Applications/Monkey/modules/mojo/graphics.monkey<408>");
	bb_graphics_renderDevice->DrawRect(t_x,t_y,t_w,t_h);
	return 0;
}
Array<Float > bb_graphics_GetColor(){
	DBG_ENTER("GetColor")
	DBG_INFO("/Applications/Monkey/modules/mojo/graphics.monkey<293>");
	Float t_2[]={bb_graphics_context->f_color_r,bb_graphics_context->f_color_g,bb_graphics_context->f_color_b};
	Array<Float > t_=Array<Float >(t_2,3);
	return t_;
}
Float bb_graphics_GetAlpha(){
	DBG_ENTER("GetAlpha")
	DBG_INFO("/Applications/Monkey/modules/mojo/graphics.monkey<302>");
	return bb_graphics_context->f_alpha;
}
int bb_graphics_DrawImageRect(bb_graphics_Image* t_image,Float t_x,Float t_y,int t_srcX,int t_srcY,int t_srcWidth,int t_srcHeight,int t_frame){
	DBG_ENTER("DrawImageRect")
	DBG_LOCAL(t_image,"image")
	DBG_LOCAL(t_x,"x")
	DBG_LOCAL(t_y,"y")
	DBG_LOCAL(t_srcX,"srcX")
	DBG_LOCAL(t_srcY,"srcY")
	DBG_LOCAL(t_srcWidth,"srcWidth")
	DBG_LOCAL(t_srcHeight,"srcHeight")
	DBG_LOCAL(t_frame,"frame")
	DBG_INFO("/Applications/Monkey/modules/mojo/graphics.monkey<509>");
	bb_graphics_DebugRenderDevice();
	DBG_INFO("/Applications/Monkey/modules/mojo/graphics.monkey<511>");
	bb_graphics_Frame* t_f=t_image->f_frames.At(t_frame);
	DBG_LOCAL(t_f,"f")
	DBG_INFO("/Applications/Monkey/modules/mojo/graphics.monkey<513>");
	if((bb_graphics_context->f_tformed)!=0){
		DBG_BLOCK();
		DBG_INFO("/Applications/Monkey/modules/mojo/graphics.monkey<514>");
		bb_graphics_PushMatrix();
		DBG_INFO("/Applications/Monkey/modules/mojo/graphics.monkey<517>");
		bb_graphics_Translate(-t_image->f_tx+t_x,-t_image->f_ty+t_y);
		DBG_INFO("/Applications/Monkey/modules/mojo/graphics.monkey<519>");
		bb_graphics_ValidateMatrix();
		DBG_INFO("/Applications/Monkey/modules/mojo/graphics.monkey<521>");
		bb_graphics_context->f_device->DrawSurface2(t_image->f_surface,FLOAT(0.0),FLOAT(0.0),t_srcX+t_f->f_x,t_srcY+t_f->f_y,t_srcWidth,t_srcHeight);
		DBG_INFO("/Applications/Monkey/modules/mojo/graphics.monkey<523>");
		bb_graphics_PopMatrix();
	}else{
		DBG_BLOCK();
		DBG_INFO("/Applications/Monkey/modules/mojo/graphics.monkey<525>");
		bb_graphics_ValidateMatrix();
		DBG_INFO("/Applications/Monkey/modules/mojo/graphics.monkey<527>");
		bb_graphics_context->f_device->DrawSurface2(t_image->f_surface,-t_image->f_tx+t_x,-t_image->f_ty+t_y,t_srcX+t_f->f_x,t_srcY+t_f->f_y,t_srcWidth,t_srcHeight);
	}
	return 0;
}
int bb_graphics_DrawImageRect2(bb_graphics_Image* t_image,Float t_x,Float t_y,int t_srcX,int t_srcY,int t_srcWidth,int t_srcHeight,Float t_rotation,Float t_scaleX,Float t_scaleY,int t_frame){
	DBG_ENTER("DrawImageRect")
	DBG_LOCAL(t_image,"image")
	DBG_LOCAL(t_x,"x")
	DBG_LOCAL(t_y,"y")
	DBG_LOCAL(t_srcX,"srcX")
	DBG_LOCAL(t_srcY,"srcY")
	DBG_LOCAL(t_srcWidth,"srcWidth")
	DBG_LOCAL(t_srcHeight,"srcHeight")
	DBG_LOCAL(t_rotation,"rotation")
	DBG_LOCAL(t_scaleX,"scaleX")
	DBG_LOCAL(t_scaleY,"scaleY")
	DBG_LOCAL(t_frame,"frame")
	DBG_INFO("/Applications/Monkey/modules/mojo/graphics.monkey<533>");
	bb_graphics_DebugRenderDevice();
	DBG_INFO("/Applications/Monkey/modules/mojo/graphics.monkey<535>");
	bb_graphics_Frame* t_f=t_image->f_frames.At(t_frame);
	DBG_LOCAL(t_f,"f")
	DBG_INFO("/Applications/Monkey/modules/mojo/graphics.monkey<537>");
	bb_graphics_PushMatrix();
	DBG_INFO("/Applications/Monkey/modules/mojo/graphics.monkey<539>");
	bb_graphics_Translate(t_x,t_y);
	DBG_INFO("/Applications/Monkey/modules/mojo/graphics.monkey<540>");
	bb_graphics_Rotate(t_rotation);
	DBG_INFO("/Applications/Monkey/modules/mojo/graphics.monkey<541>");
	bb_graphics_Scale(t_scaleX,t_scaleY);
	DBG_INFO("/Applications/Monkey/modules/mojo/graphics.monkey<542>");
	bb_graphics_Translate(-t_image->f_tx,-t_image->f_ty);
	DBG_INFO("/Applications/Monkey/modules/mojo/graphics.monkey<544>");
	bb_graphics_ValidateMatrix();
	DBG_INFO("/Applications/Monkey/modules/mojo/graphics.monkey<546>");
	bb_graphics_context->f_device->DrawSurface2(t_image->f_surface,FLOAT(0.0),FLOAT(0.0),t_srcX+t_f->f_x,t_srcY+t_f->f_y,t_srcWidth,t_srcHeight);
	DBG_INFO("/Applications/Monkey/modules/mojo/graphics.monkey<548>");
	bb_graphics_PopMatrix();
	return 0;
}
int bb_math_Min(int t_x,int t_y){
	DBG_ENTER("Min")
	DBG_LOCAL(t_x,"x")
	DBG_LOCAL(t_y,"y")
	DBG_INFO("/Applications/Monkey/modules/monkey/math.monkey<51>");
	if(t_x<t_y){
		DBG_BLOCK();
		return t_x;
	}
	DBG_INFO("/Applications/Monkey/modules/monkey/math.monkey<52>");
	return t_y;
}
Float bb_math_Min2(Float t_x,Float t_y){
	DBG_ENTER("Min")
	DBG_LOCAL(t_x,"x")
	DBG_LOCAL(t_y,"y")
	DBG_INFO("/Applications/Monkey/modules/monkey/math.monkey<78>");
	if(t_x<t_y){
		DBG_BLOCK();
		return t_x;
	}
	DBG_INFO("/Applications/Monkey/modules/monkey/math.monkey<79>");
	return t_y;
}
bool bb_iap_iapPurchaseInProgress;
int bb_iap_iapCount;
int bb_iap_buyProduct(String t_product){
	DBG_ENTER("buyProduct")
	DBG_LOCAL(t_product,"product")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/iap.monkey<40>");
	bb_iap_iapPurchaseInProgress=true;
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/iap.monkey<41>");
	bb_iap_iapCount=0;
	return 0;
}
bool bb_iap_isPurchaseInProgress(){
	DBG_ENTER("isPurchaseInProgress")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/iap.monkey<55>");
	bb_iap_iapPurchaseInProgress=true;
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/iap.monkey<56>");
	bb_iap_iapCount=bb_iap_iapCount+1;
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/iap.monkey<58>");
	if(bb_iap_iapCount>500){
		DBG_BLOCK();
		DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/iap.monkey<59>");
		bb_iap_iapPurchaseInProgress=false;
	}
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/iap.monkey<62>");
	return bb_iap_iapPurchaseInProgress;
}
bb_shape_Shape::bb_shape_Shape(){
	f_type=0;
	f_lane=0;
	f_chute=0;
	f_isFast=false;
	f_isReadyForFast=false;
	f_readyTime=FLOAT(.0);
}
Array<bb_graphics_Image* > bb_shape_Shape::g_images;
bb_vector2d_Vector2D* bb_shape_Shape::g_SPEED_SLOW;
bb_vector2d_Vector2D* bb_shape_Shape::g_SPEED_FAST;
bb_shape_Shape* bb_shape_Shape::g_new(int t_type,int t_lane,bb_chute_Chute* t_chute){
	DBG_ENTER("Shape.new")
	bb_shape_Shape *self=this;
	DBG_LOCAL(self,"Self")
	DBG_LOCAL(t_type,"type")
	DBG_LOCAL(t_lane,"lane")
	DBG_LOCAL(t_chute,"chute")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/shape.monkey<27>");
	bb_baseobject_BaseObject::g_new();
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/shape.monkey<28>");
	this->f_type=t_type;
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/shape.monkey<29>");
	this->f_lane=t_lane;
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/shape.monkey<30>");
	gc_assign(this->f_chute,t_chute);
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/shape.monkey<32>");
	if(g_images.Length()==0){
		DBG_BLOCK();
		DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/shape.monkey<33>");
		bb_graphics_Image* t_[]={bb_graphics_LoadImage(String(L"circle_inside.png"),1,bb_graphics_Image::g_DefaultFlags),bb_graphics_LoadImage(String(L"plus_inside.png"),1,bb_graphics_Image::g_DefaultFlags),bb_graphics_LoadImage(String(L"star_inside.png"),1,bb_graphics_Image::g_DefaultFlags),bb_graphics_LoadImage(String(L"tire_inside.png"),1,bb_graphics_Image::g_DefaultFlags)};
		gc_assign(g_images,Array<bb_graphics_Image* >(t_,4));
	}
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/shape.monkey<36>");
	Float t_posX=Float(44+g_images.At(0)->m_Width()*t_lane);
	DBG_LOCAL(t_posX,"posX")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/shape.monkey<37>");
	Float t_posY=Float(t_chute->m_Height()-g_images.At(t_type)->m_Height()+37);
	DBG_LOCAL(t_posY,"posY")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/shape.monkey<38>");
	m_pos2((new bb_vector2d_Vector2D)->g_new(t_posX,t_posY));
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/shape.monkey<40>");
	if(!((g_SPEED_SLOW)!=0)){
		DBG_BLOCK();
		gc_assign(g_SPEED_SLOW,(new bb_vector2d_Vector2D)->g_new(FLOAT(0.0),FLOAT(3.0)));
	}
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/shape.monkey<41>");
	if(!((g_SPEED_FAST)!=0)){
		DBG_BLOCK();
		gc_assign(g_SPEED_FAST,(new bb_vector2d_Vector2D)->g_new(FLOAT(0.0),FLOAT(10.0)));
	}
	return this;
}
bb_shape_Shape* bb_shape_Shape::g_new2(){
	DBG_ENTER("Shape.new")
	bb_shape_Shape *self=this;
	DBG_LOCAL(self,"Self")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/shape.monkey<11>");
	bb_baseobject_BaseObject::g_new();
	return this;
}
void bb_shape_Shape::m_OnUpdate(Float t_delta,Float t_frameTime){
	DBG_ENTER("Shape.OnUpdate")
	bb_shape_Shape *self=this;
	DBG_LOCAL(self,"Self")
	DBG_LOCAL(t_delta,"delta")
	DBG_LOCAL(t_frameTime,"frameTime")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/shape.monkey<45>");
	if(!f_isReadyForFast){
		DBG_BLOCK();
		DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/shape.monkey<46>");
		f_readyTime+=t_frameTime;
		DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/shape.monkey<47>");
		f_isFast=false;
		DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/shape.monkey<48>");
		if(f_readyTime>=FLOAT(250.0)){
			DBG_BLOCK();
			f_isReadyForFast=true;
		}
	}
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/shape.monkey<51>");
	if(f_isFast && f_isReadyForFast){
		DBG_BLOCK();
		DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/shape.monkey<52>");
		m_pos()->m_Add2(g_SPEED_FAST->m_Copy()->m_Mul2(t_delta));
	}else{
		DBG_BLOCK();
		DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/shape.monkey<54>");
		m_pos()->m_Add2(g_SPEED_SLOW->m_Copy()->m_Mul2(t_delta));
	}
}
void bb_shape_Shape::m_OnRender(){
	DBG_ENTER("Shape.OnRender")
	bb_shape_Shape *self=this;
	DBG_LOCAL(self,"Self")
	DBG_INFO("/Volumes/Daten/Users/michaelcontento/Workspace/private/daffydrop/daffydrop/shape.monkey<59>");
	bb_graphics_DrawImage(g_images.At(f_type),m_pos()->f_x,m_pos()->f_y,0);
}
void bb_shape_Shape::mark(){
	bb_baseobject_BaseObject::mark();
	gc_mark_q(f_chute);
}
String bb_shape_Shape::debug(){
	String t="(Shape)\n";
	t=bb_baseobject_BaseObject::debug()+t;
	t+=dbg_decl("chute",&f_chute);
	t+=dbg_decl("isReadyForFast",&f_isReadyForFast);
	t+=dbg_decl("readyTime",&f_readyTime);
	t+=dbg_decl("SPEED_SLOW",&bb_shape_Shape::g_SPEED_SLOW);
	t+=dbg_decl("SPEED_FAST",&bb_shape_Shape::g_SPEED_FAST);
	t+=dbg_decl("images",&bb_shape_Shape::g_images);
	t+=dbg_decl("isFast",&f_isFast);
	t+=dbg_decl("type",&f_type);
	t+=dbg_decl("lane",&f_lane);
	return t;
}
bb_stack_Stack2::bb_stack_Stack2(){
	f_data=Array<bb_sprite_Sprite* >();
	f_length=0;
}
bb_stack_Stack2* bb_stack_Stack2::g_new(){
	DBG_ENTER("Stack.new")
	bb_stack_Stack2 *self=this;
	DBG_LOCAL(self,"Self")
	return this;
}
bb_stack_Stack2* bb_stack_Stack2::g_new2(Array<bb_sprite_Sprite* > t_data){
	DBG_ENTER("Stack.new")
	bb_stack_Stack2 *self=this;
	DBG_LOCAL(self,"Self")
	DBG_LOCAL(t_data,"data")
	DBG_INFO("/Applications/Monkey/modules/monkey/stack.monkey<13>");
	gc_assign(this->f_data,t_data.Slice(0));
	DBG_INFO("/Applications/Monkey/modules/monkey/stack.monkey<14>");
	this->f_length=t_data.Length();
	return this;
}
int bb_stack_Stack2::m_Length(){
	DBG_ENTER("Stack.Length")
	bb_stack_Stack2 *self=this;
	DBG_LOCAL(self,"Self")
	DBG_INFO("/Applications/Monkey/modules/monkey/stack.monkey<38>");
	return f_length;
}
bb_sprite_Sprite* bb_stack_Stack2::m_Pop(){
	DBG_ENTER("Stack.Pop")
	bb_stack_Stack2 *self=this;
	DBG_LOCAL(self,"Self")
	DBG_INFO("/Applications/Monkey/modules/monkey/stack.monkey<60>");
	f_length-=1;
	DBG_INFO("/Applications/Monkey/modules/monkey/stack.monkey<61>");
	bb_sprite_Sprite* t_=f_data.At(f_length);
	return t_;
}
int bb_stack_Stack2::m_Push2(bb_sprite_Sprite* t_value){
	DBG_ENTER("Stack.Push")
	bb_stack_Stack2 *self=this;
	DBG_LOCAL(self,"Self")
	DBG_LOCAL(t_value,"value")
	DBG_INFO("/Applications/Monkey/modules/monkey/stack.monkey<52>");
	if(f_length==f_data.Length()){
		DBG_BLOCK();
		DBG_INFO("/Applications/Monkey/modules/monkey/stack.monkey<53>");
		gc_assign(f_data,f_data.Resize(f_length*2+10));
	}
	DBG_INFO("/Applications/Monkey/modules/monkey/stack.monkey<55>");
	gc_assign(f_data.At(f_length),t_value);
	DBG_INFO("/Applications/Monkey/modules/monkey/stack.monkey<56>");
	f_length+=1;
	return 0;
}
void bb_stack_Stack2::mark(){
	Object::mark();
	gc_mark_q(f_data);
}
String bb_stack_Stack2::debug(){
	String t="(Stack)\n";
	t+=dbg_decl("data",&f_data);
	t+=dbg_decl("length",&f_length);
	return t;
}
int bb_math_Max(int t_x,int t_y){
	DBG_ENTER("Max")
	DBG_LOCAL(t_x,"x")
	DBG_LOCAL(t_y,"y")
	DBG_INFO("/Applications/Monkey/modules/monkey/math.monkey<56>");
	if(t_x>t_y){
		DBG_BLOCK();
		return t_x;
	}
	DBG_INFO("/Applications/Monkey/modules/monkey/math.monkey<57>");
	return t_y;
}
Float bb_math_Max2(Float t_x,Float t_y){
	DBG_ENTER("Max")
	DBG_LOCAL(t_x,"x")
	DBG_LOCAL(t_y,"y")
	DBG_INFO("/Applications/Monkey/modules/monkey/math.monkey<83>");
	if(t_x>t_y){
		DBG_BLOCK();
		return t_x;
	}
	DBG_INFO("/Applications/Monkey/modules/monkey/math.monkey<84>");
	return t_y;
}
int bb_math_Abs(int t_x){
	DBG_ENTER("Abs")
	DBG_LOCAL(t_x,"x")
	DBG_INFO("/Applications/Monkey/modules/monkey/math.monkey<46>");
	if(t_x>=0){
		DBG_BLOCK();
		return t_x;
	}
	DBG_INFO("/Applications/Monkey/modules/monkey/math.monkey<47>");
	int t_=-t_x;
	return t_;
}
Float bb_math_Abs2(Float t_x){
	DBG_ENTER("Abs")
	DBG_LOCAL(t_x,"x")
	DBG_INFO("/Applications/Monkey/modules/monkey/math.monkey<73>");
	if(t_x>=FLOAT(0.0)){
		DBG_BLOCK();
		return t_x;
	}
	DBG_INFO("/Applications/Monkey/modules/monkey/math.monkey<74>");
	Float t_=-t_x;
	return t_;
}
int bb_app_SaveState(String t_state){
	DBG_ENTER("SaveState")
	DBG_LOCAL(t_state,"state")
	DBG_INFO("/Applications/Monkey/modules/mojo/app.monkey<133>");
	int t_=bb_app_device->SaveState(t_state);
	return t_;
}
int bbInit(){
	bb_graphics_context=0;
	DBG_GLOBAL("context",&bb_graphics_context);
	bb_input_device=0;
	DBG_GLOBAL("device",&bb_input_device);
	bb_audio_device=0;
	DBG_GLOBAL("device",&bb_audio_device);
	bb_app_device=0;
	DBG_GLOBAL("device",&bb_app_device);
	bb_scene_Scene::g_blend=0;
	DBG_GLOBAL("blend",&bb_scene_Scene::g_blend);
	bb_graphics_Image::g_DefaultFlags=256;
	DBG_GLOBAL("DefaultFlags",&bb_graphics_Image::g_DefaultFlags);
	bb_angelfont2_AngelFont::g_error=String();
	DBG_GLOBAL("error",&bb_angelfont2_AngelFont::g_error);
	bb_angelfont2_AngelFont::g_current=0;
	DBG_GLOBAL("current",&bb_angelfont2_AngelFont::g_current);
	bb_angelfont2_AngelFont::g__list=(new bb_map_StringMap4)->g_new();
	DBG_GLOBAL("_list",&bb_angelfont2_AngelFont::g__list);
	bb_gamehighscore_GameHighscore::g_scores=Array<int >();
	DBG_GLOBAL("scores",&bb_gamehighscore_GameHighscore::g_scores);
	bb_gamehighscore_GameHighscore::g_names=Array<String >();
	DBG_GLOBAL("names",&bb_gamehighscore_GameHighscore::g_names);
	bb_severity_globalSeverityInstance=0;
	DBG_GLOBAL("globalSeverityInstance",&bb_severity_globalSeverityInstance);
	bb_random_Seed=1234;
	DBG_GLOBAL("Seed",&bb_random_Seed);
	bb_graphics_renderDevice=0;
	DBG_GLOBAL("renderDevice",&bb_graphics_renderDevice);
	bb_angelfont_AngelFont::g_error=String();
	DBG_GLOBAL("error",&bb_angelfont_AngelFont::g_error);
	bb_angelfont_AngelFont::g_current=0;
	DBG_GLOBAL("current",&bb_angelfont_AngelFont::g_current);
	bb_angelfont_AngelFont::g__list=(new bb_map_StringMap5)->g_new();
	DBG_GLOBAL("_list",&bb_angelfont_AngelFont::g__list);
	bb_iap_iapPurchaseInProgress=false;
	DBG_GLOBAL("iapPurchaseInProgress",&bb_iap_iapPurchaseInProgress);
	bb_iap_iapCount=0;
	DBG_GLOBAL("iapCount",&bb_iap_iapCount);
	bb_shape_Shape::g_images=Array<bb_graphics_Image* >();
	DBG_GLOBAL("images",&bb_shape_Shape::g_images);
	bb_shape_Shape::g_SPEED_SLOW=0;
	DBG_GLOBAL("SPEED_SLOW",&bb_shape_Shape::g_SPEED_SLOW);
	bb_shape_Shape::g_SPEED_FAST=0;
	DBG_GLOBAL("SPEED_FAST",&bb_shape_Shape::g_SPEED_FAST);
	return 0;
}
void gc_mark(){
	gc_mark_q(bb_graphics_context);
	gc_mark_q(bb_input_device);
	gc_mark_q(bb_audio_device);
	gc_mark_q(bb_app_device);
	gc_mark_q(bb_scene_Scene::g_blend);
	gc_mark_q(bb_angelfont2_AngelFont::g_current);
	gc_mark_q(bb_angelfont2_AngelFont::g__list);
	gc_mark_q(bb_gamehighscore_GameHighscore::g_scores);
	gc_mark_q(bb_gamehighscore_GameHighscore::g_names);
	gc_mark_q(bb_severity_globalSeverityInstance);
	gc_mark_q(bb_graphics_renderDevice);
	gc_mark_q(bb_angelfont_AngelFont::g_current);
	gc_mark_q(bb_angelfont_AngelFont::g__list);
	gc_mark_q(bb_shape_Shape::g_images);
	gc_mark_q(bb_shape_Shape::g_SPEED_SLOW);
	gc_mark_q(bb_shape_Shape::g_SPEED_FAST);
}
//${TRANSCODE_END}

FILE *fopenFile( String path,const char *mode ){
#if _WIN32
	return _wfopen( (String("data/")+path).ToCString<wchar_t>(),L"rb" );
#else
	return fopen( (String("data/")+path).ToCString<char>(),"rb" );
#endif
}

static String extractExt( String path ){
	int i=path.FindLast( "." )+1;
	if( i && path.Find( "/",i )==-1 && path.Find( "\\",i )==-1 ) return path.Slice( i );
	return "";
}

unsigned char *loadImage( String path,int *width,int *height,int *depth ){
	return stbi_load( (String("data/")+path).ToCString<char>(),width,height,depth,0 );
}

void unloadImage( unsigned char *data ){
	stbi_image_free( data );
}

//for reading WAV file...
static const char *readTag( FILE *f ){
	static char buf[8];
	if( fread( buf,4,1,f )!=1 ) return "";
	buf[4]=0;
	return buf;
}

static int readInt( FILE *f ){
	unsigned char buf[4];
	if( fread( buf,4,1,f )!=1 ) return -1;
	return (buf[3]<<24) | (buf[2]<<16) | (buf[1]<<8) | buf[0];
}

static int readShort( FILE *f ){
	unsigned char buf[2];
	if( fread( buf,2,1,f )!=1 ) return -1;
	return (buf[1]<<8) | buf[0];
}

static void skipBytes( int n,FILE *f ){
	char *p=(char*)malloc( n );
	fread( p,n,1,f );
	free(p);
}

static unsigned char *loadSound_wav( String path,int *plength,int *pchannels,int *pformat,int *phertz ){

	if( FILE *f=fopenFile( path,"rb" ) ){
		if( !strcmp( readTag( f ),"RIFF" ) ){
			int len=readInt( f )-8;len=len;
			if( !strcmp( readTag( f ),"WAVE" ) ){
				if( !strcmp( readTag( f ),"fmt " ) ){
					int len2=readInt( f );
					int comp=readShort( f );
					if( comp==1 ){
						int chans=readShort( f );
						int hertz=readInt( f );
						int bytespersec=readInt( f );bytespersec=bytespersec;
						int pad=readShort( f );pad=pad;
						int bits=readShort( f );
						int format=bits/8;
						if( len2>16 ) skipBytes( len2-16,f );
						for(;;){
							const char *p=readTag( f );
							if( feof( f ) ) break;
							int size=readInt( f );
							if( strcmp( p,"data" ) ){
								skipBytes( size,f );
								continue;
							}
							unsigned char *data=(unsigned char*)malloc( size );
							if( fread( data,size,1,f )==1 ){
								*plength=size/(chans*format);
								*pchannels=chans;
								*pformat=format;
								*phertz=hertz;
								fclose( f );
								return data;
							}
							free( data );
						}
					}
				}
			}
		}
		fclose( f );
	}
	return 0;
}

static unsigned char *loadSound_ogg( String path,int *length,int *channels,int *format,int *hertz ){

	int error;
	stb_vorbis *v=stb_vorbis_open_filename( (String("data/")+path).ToCString<char>(),&error,0 );
	if( !v ) return 0;
	
	stb_vorbis_info info=stb_vorbis_get_info( v );
	
	int limit=info.channels*4096;
	int offset=0,data_len=0,total=limit;

	short *data=(short*)malloc( total*sizeof(short) );
	
	for(;;){
		int n=stb_vorbis_get_frame_short_interleaved( v,info.channels,data+offset,total-offset );
		if( !n ) break;
	
		data_len+=n;
		offset+=n*info.channels;
		
		if( offset+limit>total ){
			total*=2;
			data=(short*)realloc( data,total*sizeof(short) );
		}
	}
	
	*length=data_len;
	*channels=info.channels;
	*format=2;
	*hertz=info.sample_rate;
	
	stb_vorbis_close(v);

	return (unsigned char*)data;
}

unsigned char *loadSound( String path,int *length,int *channels,int *format,int *hertz ){

	String ext=extractExt( path ).ToLower();
	
	if( ext=="wav" ) return loadSound_wav( path,length,channels,format,hertz );

	if( ext=="ogg" ) return loadSound_ogg( path,length,channels,format,hertz );
	
	return 0;
}

void unloadSound( unsigned char *data ){
	free( data );
}

ALCdevice *alcDevice;

ALCcontext *alcContext;

void warn( const char *p ){
	puts( p );
}

void fail( const char *p ){
	puts( p );
	exit( -1 );
}

int main( int argc,const char *argv[] ){

	if( !glfwInit() ){
		puts( "glfwInit failed" );
		exit( -1 );
	}

	GLFWvidmode desktopMode;
	glfwGetDesktopMode( &desktopMode );
	
	int w=CFG_GLFW_WINDOW_WIDTH;
	if( !w ) w=desktopMode.Width;
	
	int h=CFG_GLFW_WINDOW_HEIGHT;
	if( !h ) h=desktopMode.Height;
	
	glfwOpenWindowHint( GLFW_WINDOW_NO_RESIZE,CFG_GLFW_WINDOW_RESIZABLE ? GL_FALSE : GL_TRUE );
	
	if( !glfwOpenWindow( w,h, 0,0,0,0,CFG_OPENGL_DEPTH_BUFFER_ENABLED ? 32 : 0,0,CFG_GLFW_WINDOW_FULLSCREEN ? GLFW_FULLSCREEN : GLFW_WINDOW  ) ){
		fail( "glfwOpenWindow failed" );
	}

	glfwSetWindowPos( (desktopMode.Width-w)/2,(desktopMode.Height-h)/2 );	

	glfwSetWindowTitle( CFG_GLFW_WINDOW_TITLE );
	
	if( (alcDevice=alcOpenDevice( 0 )) ){
		if( (alcContext=alcCreateContext( alcDevice,0 )) ){
			if( alcMakeContextCurrent( alcContext ) ){
				//alc all go!
			}else{
				warn( "alcMakeContextCurrent failed" );
			}
		}else{
			warn( "alcCreateContext failed" );
		}
	}else{
		warn( "alcOpenDevice failed" );
	}
	
#if INIT_GL_EXTS
	Init_GL_Exts();
#endif

	try{
	
		bb_std_main( argc,argv );

		if( runner ) runner();
		
	}catch( ThrowableObject *ex ){
	
		Print( "Monkey Runtime Error : Uncaught Monkey Exception" );

	}catch( const char *err ){

	}
	
	if( alcContext ) alcDestroyContext( alcContext );

	if( alcDevice ) alcCloseDevice( alcDevice );

	glfwTerminate();

	return 0;
}
